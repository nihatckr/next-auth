
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetToken = $Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model ColorVariants
 * 
 */
export type ColorVariants = $Result.DefaultSelection<Prisma.$ColorVariantsPayload>
/**
 * Model SizeVariants
 * 
 */
export type SizeVariants = $Result.DefaultSelection<Prisma.$SizeVariantsPayload>
/**
 * Model MediaItem
 * 
 */
export type MediaItem = $Result.DefaultSelection<Prisma.$MediaItemPayload>
/**
 * Model ScrapingJob
 * 
 */
export type ScrapingJob = $Result.DefaultSelection<Prisma.$ScrapingJobPayload>
/**
 * Model PriceHistory
 * 
 */
export type PriceHistory = $Result.DefaultSelection<Prisma.$PriceHistoryPayload>
/**
 * Model ColorHistory
 * 
 */
export type ColorHistory = $Result.DefaultSelection<Prisma.$ColorHistoryPayload>
/**
 * Model SizeHistory
 * 
 */
export type SizeHistory = $Result.DefaultSelection<Prisma.$SizeHistoryPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductCategory
 * 
 */
export type ProductCategory = $Result.DefaultSelection<Prisma.$ProductCategoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ScrapingjobStatus: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type ScrapingjobStatus = (typeof ScrapingjobStatus)[keyof typeof ScrapingjobStatus]


export const ScrapingjobType: {
  CATEGORY: 'CATEGORY',
  PRODUCT: 'PRODUCT',
  BRAND: 'BRAND',
  BULK: 'BULK'
};

export type ScrapingjobType = (typeof ScrapingjobType)[keyof typeof ScrapingjobType]


export const ColorVariantsAvailability: {
  IN_STOCK: 'IN_STOCK',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  PRE_ORDER: 'PRE_ORDER'
};

export type ColorVariantsAvailability = (typeof ColorVariantsAvailability)[keyof typeof ColorVariantsAvailability]


export const SizeVariantsAvailability: {
  IN_STOCK: 'IN_STOCK',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  PRE_ORDER: 'PRE_ORDER'
};

export type SizeVariantsAvailability = (typeof SizeVariantsAvailability)[keyof typeof SizeVariantsAvailability]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ScrapingjobStatus = $Enums.ScrapingjobStatus

export const ScrapingjobStatus: typeof $Enums.ScrapingjobStatus

export type ScrapingjobType = $Enums.ScrapingjobType

export const ScrapingjobType: typeof $Enums.ScrapingjobType

export type ColorVariantsAvailability = $Enums.ColorVariantsAvailability

export const ColorVariantsAvailability: typeof $Enums.ColorVariantsAvailability

export type SizeVariantsAvailability = $Enums.SizeVariantsAvailability

export const SizeVariantsAvailability: typeof $Enums.SizeVariantsAvailability

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetTokens
    * const passwordResetTokens = await prisma.passwordResetToken.findMany()
    * ```
    */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.colorVariants`: Exposes CRUD operations for the **ColorVariants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ColorVariants
    * const colorVariants = await prisma.colorVariants.findMany()
    * ```
    */
  get colorVariants(): Prisma.ColorVariantsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sizeVariants`: Exposes CRUD operations for the **SizeVariants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SizeVariants
    * const sizeVariants = await prisma.sizeVariants.findMany()
    * ```
    */
  get sizeVariants(): Prisma.SizeVariantsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mediaItem`: Exposes CRUD operations for the **MediaItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaItems
    * const mediaItems = await prisma.mediaItem.findMany()
    * ```
    */
  get mediaItem(): Prisma.MediaItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scrapingJob`: Exposes CRUD operations for the **ScrapingJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScrapingJobs
    * const scrapingJobs = await prisma.scrapingJob.findMany()
    * ```
    */
  get scrapingJob(): Prisma.ScrapingJobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.priceHistory`: Exposes CRUD operations for the **PriceHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceHistories
    * const priceHistories = await prisma.priceHistory.findMany()
    * ```
    */
  get priceHistory(): Prisma.PriceHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.colorHistory`: Exposes CRUD operations for the **ColorHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ColorHistories
    * const colorHistories = await prisma.colorHistory.findMany()
    * ```
    */
  get colorHistory(): Prisma.ColorHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sizeHistory`: Exposes CRUD operations for the **SizeHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SizeHistories
    * const sizeHistories = await prisma.sizeHistory.findMany()
    * ```
    */
  get sizeHistory(): Prisma.SizeHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productCategory`: Exposes CRUD operations for the **ProductCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductCategories
    * const productCategories = await prisma.productCategory.findMany()
    * ```
    */
  get productCategory(): Prisma.ProductCategoryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    PasswordResetToken: 'PasswordResetToken',
    VerificationToken: 'VerificationToken',
    Account: 'Account',
    Brand: 'Brand',
    Category: 'Category',
    ColorVariants: 'ColorVariants',
    SizeVariants: 'SizeVariants',
    MediaItem: 'MediaItem',
    ScrapingJob: 'ScrapingJob',
    PriceHistory: 'PriceHistory',
    ColorHistory: 'ColorHistory',
    SizeHistory: 'SizeHistory',
    Product: 'Product',
    ProductCategory: 'ProductCategory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "passwordResetToken" | "verificationToken" | "account" | "brand" | "category" | "colorVariants" | "sizeVariants" | "mediaItem" | "scrapingJob" | "priceHistory" | "colorHistory" | "sizeHistory" | "product" | "productCategory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetToken: {
        payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
        fields: Prisma.PasswordResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          update: {
            args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetToken>
          }
          groupBy: {
            args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      ColorVariants: {
        payload: Prisma.$ColorVariantsPayload<ExtArgs>
        fields: Prisma.ColorVariantsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ColorVariantsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColorVariantsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload>
          }
          findFirst: {
            args: Prisma.ColorVariantsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColorVariantsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload>
          }
          findMany: {
            args: Prisma.ColorVariantsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload>[]
          }
          create: {
            args: Prisma.ColorVariantsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload>
          }
          createMany: {
            args: Prisma.ColorVariantsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ColorVariantsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload>
          }
          update: {
            args: Prisma.ColorVariantsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload>
          }
          deleteMany: {
            args: Prisma.ColorVariantsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ColorVariantsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ColorVariantsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorVariantsPayload>
          }
          aggregate: {
            args: Prisma.ColorVariantsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateColorVariants>
          }
          groupBy: {
            args: Prisma.ColorVariantsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ColorVariantsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ColorVariantsCountArgs<ExtArgs>
            result: $Utils.Optional<ColorVariantsCountAggregateOutputType> | number
          }
        }
      }
      SizeVariants: {
        payload: Prisma.$SizeVariantsPayload<ExtArgs>
        fields: Prisma.SizeVariantsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeVariantsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeVariantsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload>
          }
          findFirst: {
            args: Prisma.SizeVariantsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeVariantsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload>
          }
          findMany: {
            args: Prisma.SizeVariantsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload>[]
          }
          create: {
            args: Prisma.SizeVariantsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload>
          }
          createMany: {
            args: Prisma.SizeVariantsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SizeVariantsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload>
          }
          update: {
            args: Prisma.SizeVariantsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload>
          }
          deleteMany: {
            args: Prisma.SizeVariantsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeVariantsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SizeVariantsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeVariantsPayload>
          }
          aggregate: {
            args: Prisma.SizeVariantsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSizeVariants>
          }
          groupBy: {
            args: Prisma.SizeVariantsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeVariantsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SizeVariantsCountArgs<ExtArgs>
            result: $Utils.Optional<SizeVariantsCountAggregateOutputType> | number
          }
        }
      }
      MediaItem: {
        payload: Prisma.$MediaItemPayload<ExtArgs>
        fields: Prisma.MediaItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          findFirst: {
            args: Prisma.MediaItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          findMany: {
            args: Prisma.MediaItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>[]
          }
          create: {
            args: Prisma.MediaItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          createMany: {
            args: Prisma.MediaItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MediaItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          update: {
            args: Prisma.MediaItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          deleteMany: {
            args: Prisma.MediaItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MediaItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MediaItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MediaItemPayload>
          }
          aggregate: {
            args: Prisma.MediaItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMediaItem>
          }
          groupBy: {
            args: Prisma.MediaItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MediaItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaItemCountArgs<ExtArgs>
            result: $Utils.Optional<MediaItemCountAggregateOutputType> | number
          }
        }
      }
      ScrapingJob: {
        payload: Prisma.$ScrapingJobPayload<ExtArgs>
        fields: Prisma.ScrapingJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScrapingJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScrapingJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          findFirst: {
            args: Prisma.ScrapingJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScrapingJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          findMany: {
            args: Prisma.ScrapingJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>[]
          }
          create: {
            args: Prisma.ScrapingJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          createMany: {
            args: Prisma.ScrapingJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ScrapingJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          update: {
            args: Prisma.ScrapingJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          deleteMany: {
            args: Prisma.ScrapingJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScrapingJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScrapingJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          aggregate: {
            args: Prisma.ScrapingJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScrapingJob>
          }
          groupBy: {
            args: Prisma.ScrapingJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScrapingJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScrapingJobCountArgs<ExtArgs>
            result: $Utils.Optional<ScrapingJobCountAggregateOutputType> | number
          }
        }
      }
      PriceHistory: {
        payload: Prisma.$PriceHistoryPayload<ExtArgs>
        fields: Prisma.PriceHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          findFirst: {
            args: Prisma.PriceHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          findMany: {
            args: Prisma.PriceHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>[]
          }
          create: {
            args: Prisma.PriceHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          createMany: {
            args: Prisma.PriceHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PriceHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          update: {
            args: Prisma.PriceHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          deleteMany: {
            args: Prisma.PriceHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PriceHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PriceHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          aggregate: {
            args: Prisma.PriceHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePriceHistory>
          }
          groupBy: {
            args: Prisma.PriceHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PriceHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<PriceHistoryCountAggregateOutputType> | number
          }
        }
      }
      ColorHistory: {
        payload: Prisma.$ColorHistoryPayload<ExtArgs>
        fields: Prisma.ColorHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ColorHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColorHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload>
          }
          findFirst: {
            args: Prisma.ColorHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColorHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload>
          }
          findMany: {
            args: Prisma.ColorHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload>[]
          }
          create: {
            args: Prisma.ColorHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload>
          }
          createMany: {
            args: Prisma.ColorHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ColorHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload>
          }
          update: {
            args: Prisma.ColorHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ColorHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ColorHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ColorHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColorHistoryPayload>
          }
          aggregate: {
            args: Prisma.ColorHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateColorHistory>
          }
          groupBy: {
            args: Prisma.ColorHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ColorHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ColorHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ColorHistoryCountAggregateOutputType> | number
          }
        }
      }
      SizeHistory: {
        payload: Prisma.$SizeHistoryPayload<ExtArgs>
        fields: Prisma.SizeHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload>
          }
          findFirst: {
            args: Prisma.SizeHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload>
          }
          findMany: {
            args: Prisma.SizeHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload>[]
          }
          create: {
            args: Prisma.SizeHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload>
          }
          createMany: {
            args: Prisma.SizeHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SizeHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload>
          }
          update: {
            args: Prisma.SizeHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload>
          }
          deleteMany: {
            args: Prisma.SizeHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SizeHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeHistoryPayload>
          }
          aggregate: {
            args: Prisma.SizeHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSizeHistory>
          }
          groupBy: {
            args: Prisma.SizeHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SizeHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<SizeHistoryCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductCategory: {
        payload: Prisma.$ProductCategoryPayload<ExtArgs>
        fields: Prisma.ProductCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          findFirst: {
            args: Prisma.ProductCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          findMany: {
            args: Prisma.ProductCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>[]
          }
          create: {
            args: Prisma.ProductCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          createMany: {
            args: Prisma.ProductCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          update: {
            args: Prisma.ProductCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ProductCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          aggregate: {
            args: Prisma.ProductCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductCategory>
          }
          groupBy: {
            args: Prisma.ProductCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCategoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    passwordResetToken?: PasswordResetTokenOmit
    verificationToken?: VerificationTokenOmit
    account?: AccountOmit
    brand?: BrandOmit
    category?: CategoryOmit
    colorVariants?: ColorVariantsOmit
    sizeVariants?: SizeVariantsOmit
    mediaItem?: MediaItemOmit
    scrapingJob?: ScrapingJobOmit
    priceHistory?: PriceHistoryOmit
    colorHistory?: ColorHistoryOmit
    sizeHistory?: SizeHistoryOmit
    product?: ProductOmit
    productCategory?: ProductCategoryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdBrands: number
    updatedBrands: number
    createdCategories: number
    updatedCategories: number
    createdProducts: number
    updatedProducts: number
    createdMediaItems: number
    updatedMediaItems: number
    scrapingJobs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBrands?: boolean | UserCountOutputTypeCountCreatedBrandsArgs
    updatedBrands?: boolean | UserCountOutputTypeCountUpdatedBrandsArgs
    createdCategories?: boolean | UserCountOutputTypeCountCreatedCategoriesArgs
    updatedCategories?: boolean | UserCountOutputTypeCountUpdatedCategoriesArgs
    createdProducts?: boolean | UserCountOutputTypeCountCreatedProductsArgs
    updatedProducts?: boolean | UserCountOutputTypeCountUpdatedProductsArgs
    createdMediaItems?: boolean | UserCountOutputTypeCountCreatedMediaItemsArgs
    updatedMediaItems?: boolean | UserCountOutputTypeCountUpdatedMediaItemsArgs
    scrapingJobs?: boolean | UserCountOutputTypeCountScrapingJobsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScrapingJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScrapingJobWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    categories: number
    products: number
    mediaItems: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | BrandCountOutputTypeCountCategoriesArgs
    products?: boolean | BrandCountOutputTypeCountProductsArgs
    mediaItems?: boolean | BrandCountOutputTypeCountMediaItemsArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    subCategories: number
    productCategories: number
    mediaItems: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subCategories?: boolean | CategoryCountOutputTypeCountSubCategoriesArgs
    productCategories?: boolean | CategoryCountOutputTypeCountProductCategoriesArgs
    mediaItems?: boolean | CategoryCountOutputTypeCountMediaItemsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSubCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductCategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }


  /**
   * Count Type ColorVariantsCountOutputType
   */

  export type ColorVariantsCountOutputType = {
    sizes: number
  }

  export type ColorVariantsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sizes?: boolean | ColorVariantsCountOutputTypeCountSizesArgs
  }

  // Custom InputTypes
  /**
   * ColorVariantsCountOutputType without action
   */
  export type ColorVariantsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariantsCountOutputType
     */
    select?: ColorVariantsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ColorVariantsCountOutputType without action
   */
  export type ColorVariantsCountOutputTypeCountSizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeVariantsWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    colorVariants: number
    priceHistory: number
    colorHistory: number
    sizeHistory: number
    productCategories: number
    mediaItems: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colorVariants?: boolean | ProductCountOutputTypeCountColorVariantsArgs
    priceHistory?: boolean | ProductCountOutputTypeCountPriceHistoryArgs
    colorHistory?: boolean | ProductCountOutputTypeCountColorHistoryArgs
    sizeHistory?: boolean | ProductCountOutputTypeCountSizeHistoryArgs
    productCategories?: boolean | ProductCountOutputTypeCountProductCategoriesArgs
    mediaItems?: boolean | ProductCountOutputTypeCountMediaItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountColorVariantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColorVariantsWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountPriceHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceHistoryWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountColorHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColorHistoryWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountSizeHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeHistoryWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductCategoryWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    password: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    password: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    password: number
    email: number
    emailVerified: number
    image: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    password: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account?: boolean | User$accountArgs<ExtArgs>
    createdBrands?: boolean | User$createdBrandsArgs<ExtArgs>
    updatedBrands?: boolean | User$updatedBrandsArgs<ExtArgs>
    createdCategories?: boolean | User$createdCategoriesArgs<ExtArgs>
    updatedCategories?: boolean | User$updatedCategoriesArgs<ExtArgs>
    createdProducts?: boolean | User$createdProductsArgs<ExtArgs>
    updatedProducts?: boolean | User$updatedProductsArgs<ExtArgs>
    createdMediaItems?: boolean | User$createdMediaItemsArgs<ExtArgs>
    updatedMediaItems?: boolean | User$updatedMediaItemsArgs<ExtArgs>
    scrapingJobs?: boolean | User$scrapingJobsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "password" | "email" | "emailVerified" | "image" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | User$accountArgs<ExtArgs>
    createdBrands?: boolean | User$createdBrandsArgs<ExtArgs>
    updatedBrands?: boolean | User$updatedBrandsArgs<ExtArgs>
    createdCategories?: boolean | User$createdCategoriesArgs<ExtArgs>
    updatedCategories?: boolean | User$updatedCategoriesArgs<ExtArgs>
    createdProducts?: boolean | User$createdProductsArgs<ExtArgs>
    updatedProducts?: boolean | User$updatedProductsArgs<ExtArgs>
    createdMediaItems?: boolean | User$createdMediaItemsArgs<ExtArgs>
    updatedMediaItems?: boolean | User$updatedMediaItemsArgs<ExtArgs>
    scrapingJobs?: boolean | User$scrapingJobsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs> | null
      createdBrands: Prisma.$BrandPayload<ExtArgs>[]
      updatedBrands: Prisma.$BrandPayload<ExtArgs>[]
      createdCategories: Prisma.$CategoryPayload<ExtArgs>[]
      updatedCategories: Prisma.$CategoryPayload<ExtArgs>[]
      createdProducts: Prisma.$ProductPayload<ExtArgs>[]
      updatedProducts: Prisma.$ProductPayload<ExtArgs>[]
      createdMediaItems: Prisma.$MediaItemPayload<ExtArgs>[]
      updatedMediaItems: Prisma.$MediaItemPayload<ExtArgs>[]
      scrapingJobs: Prisma.$ScrapingJobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      password: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends User$accountArgs<ExtArgs> = {}>(args?: Subset<T, User$accountArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBrands<T extends User$createdBrandsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdBrandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedBrands<T extends User$updatedBrandsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedBrandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdCategories<T extends User$createdCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedCategories<T extends User$updatedCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdProducts<T extends User$createdProductsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedProducts<T extends User$updatedProductsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdMediaItems<T extends User$createdMediaItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdMediaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedMediaItems<T extends User$updatedMediaItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedMediaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scrapingJobs<T extends User$scrapingJobsArgs<ExtArgs> = {}>(args?: Subset<T, User$scrapingJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.account
   */
  export type User$accountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
  }

  /**
   * User.createdBrands
   */
  export type User$createdBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * User.updatedBrands
   */
  export type User$updatedBrandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    cursor?: BrandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * User.createdCategories
   */
  export type User$createdCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * User.updatedCategories
   */
  export type User$updatedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * User.createdProducts
   */
  export type User$createdProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * User.updatedProducts
   */
  export type User$updatedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * User.createdMediaItems
   */
  export type User$createdMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * User.updatedMediaItems
   */
  export type User$updatedMediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * User.scrapingJobs
   */
  export type User$scrapingJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    where?: ScrapingJobWhereInput
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    cursor?: ScrapingJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScrapingJobScalarFieldEnum | ScrapingJobScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model PasswordResetToken
   */

  export type AggregatePasswordResetToken = {
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  export type PasswordResetTokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordResetTokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordResetTokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires: number
    used: number
    createdAt: number
    _all: number
  }


  export type PasswordResetTokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    used?: true
    createdAt?: true
  }

  export type PasswordResetTokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    used?: true
    createdAt?: true
  }

  export type PasswordResetTokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires?: true
    used?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetToken to aggregate.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetTokens
    **/
    _count?: true | PasswordResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetToken[P]>
      : GetScalarType<T[P], AggregatePasswordResetToken[P]>
  }




  export type PasswordResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithAggregationInput | PasswordResetTokenOrderByWithAggregationInput[]
    by: PasswordResetTokenScalarFieldEnum[] | PasswordResetTokenScalarFieldEnum
    having?: PasswordResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetTokenCountAggregateInputType | true
    _min?: PasswordResetTokenMinAggregateInputType
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type PasswordResetTokenGroupByOutputType = {
    id: string
    email: string
    token: string
    expires: Date
    used: boolean
    createdAt: Date
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
    used?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["passwordResetToken"]>



  export type PasswordResetTokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires?: boolean
    used?: boolean
    createdAt?: boolean
  }

  export type PasswordResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "expires" | "used" | "createdAt", ExtArgs["result"]["passwordResetToken"]>

  export type $PasswordResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires: Date
      used: boolean
      createdAt: Date
    }, ExtArgs["result"]["passwordResetToken"]>
    composites: {}
  }

  type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

  type PasswordResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetTokenCountAggregateInputType | true
    }

  export interface PasswordResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
    /**
     * Find zero or one PasswordResetToken that matches the filter.
     * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany()
     * 
     * // Get first 10 PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetTokenFindManyArgs>(args?: SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetToken.
     * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
     * @example
     * // Create one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.create({
     *   data: {
     *     // ... data to create a PasswordResetToken
     *   }
     * })
     * 
     */
    create<T extends PasswordResetTokenCreateArgs>(args: SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetTokens.
     * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetTokenCreateManyArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PasswordResetToken.
     * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
     * @example
     * // Delete one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetToken
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetTokenDeleteArgs>(args: SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetToken.
     * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
     * @example
     * // Update one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetTokenUpdateArgs>(args: SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetTokens.
     * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
     * @example
     * // Delete a few PasswordResetTokens
     * const { count } = await prisma.passwordResetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordResetToken.
     * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
     * @example
     * // Update or create a PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.upsert({
     *   create: {
     *     // ... data to create a PasswordResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetToken we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetTokenUpsertArgs>(args: SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
     * @example
     * // Count the number of PasswordResetTokens
     * const count = await prisma.passwordResetToken.count({
     *   where: {
     *     // ... the filter for the PasswordResetTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetTokenCountArgs>(
      args?: Subset<T, PasswordResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetTokenAggregateArgs>(args: Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

    /**
     * Group by PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetToken model
   */
  readonly fields: PasswordResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetToken model
   */
  interface PasswordResetTokenFieldRefs {
    readonly id: FieldRef<"PasswordResetToken", 'String'>
    readonly email: FieldRef<"PasswordResetToken", 'String'>
    readonly token: FieldRef<"PasswordResetToken", 'String'>
    readonly expires: FieldRef<"PasswordResetToken", 'DateTime'>
    readonly used: FieldRef<"PasswordResetToken", 'Boolean'>
    readonly createdAt: FieldRef<"PasswordResetToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetToken findUnique
   */
  export type PasswordResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findUniqueOrThrow
   */
  export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findFirst
   */
  export type PasswordResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findFirstOrThrow
   */
  export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findMany
   */
  export type PasswordResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter, which PasswordResetTokens to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken create
   */
  export type PasswordResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
  }

  /**
   * PasswordResetToken createMany
   */
  export type PasswordResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken update
   */
  export type PasswordResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetToken to update.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken updateMany
   */
  export type PasswordResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken upsert
   */
  export type PasswordResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetToken to update in case it exists.
     */
    where: PasswordResetTokenWhereUniqueInput
    /**
     * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
     */
    create: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
    /**
     * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
  }

  /**
   * PasswordResetToken delete
   */
  export type PasswordResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Filter which PasswordResetToken to delete.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken deleteMany
   */
  export type PasswordResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetTokens to delete
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetToken without action
   */
  export type PasswordResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    expires: Date | null
    email: string | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    expires: Date | null
    email: string | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    id: number
    token: number
    expires: number
    email: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    id?: true
    token?: true
    expires?: true
    email?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    id?: true
    token?: true
    expires?: true
    email?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    id?: true
    token?: true
    expires?: true
    email?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    id: string
    token: string
    expires: Date
    email: string
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    expires?: boolean
    email?: boolean
  }, ExtArgs["result"]["verificationToken"]>



  export type VerificationTokenSelectScalar = {
    id?: boolean
    token?: boolean
    expires?: boolean
    email?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "expires" | "email", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      expires: Date
      email: string
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly id: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
    readonly email: FieldRef<"VerificationToken", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>



  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _avg: BrandAvgAggregateOutputType | null
    _sum: BrandSumAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandAvgAggregateOutputType = {
    id: number | null
  }

  export type BrandSumAggregateOutputType = {
    id: number | null
  }

  export type BrandMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    url: string | null
    apiProductsUrl: string | null
    apiProductDetailsUrl: string | null
    createdById: string | null
    updatedById: string | null
  }

  export type BrandMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    url: string | null
    apiProductsUrl: string | null
    apiProductDetailsUrl: string | null
    createdById: string | null
    updatedById: string | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    url: number
    apiProductsUrl: number
    apiProductDetailsUrl: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type BrandAvgAggregateInputType = {
    id?: true
  }

  export type BrandSumAggregateInputType = {
    id?: true
  }

  export type BrandMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    url?: true
    apiProductsUrl?: true
    apiProductDetailsUrl?: true
    createdById?: true
    updatedById?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    url?: true
    apiProductsUrl?: true
    apiProductDetailsUrl?: true
    createdById?: true
    updatedById?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    url?: true
    apiProductsUrl?: true
    apiProductDetailsUrl?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BrandAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BrandSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _avg?: BrandAvgAggregateInputType
    _sum?: BrandSumAggregateInputType
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: number
    name: string
    slug: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    url: string | null
    apiProductsUrl: string | null
    apiProductDetailsUrl: string | null
    createdById: string | null
    updatedById: string | null
    _count: BrandCountAggregateOutputType | null
    _avg: BrandAvgAggregateOutputType | null
    _sum: BrandSumAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    url?: boolean
    apiProductsUrl?: boolean
    apiProductDetailsUrl?: boolean
    createdById?: boolean
    updatedById?: boolean
    categories?: boolean | Brand$categoriesArgs<ExtArgs>
    products?: boolean | Brand$productsArgs<ExtArgs>
    mediaItems?: boolean | Brand$mediaItemsArgs<ExtArgs>
    createdBy?: boolean | Brand$createdByArgs<ExtArgs>
    updatedBy?: boolean | Brand$updatedByArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>



  export type BrandSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    url?: boolean
    apiProductsUrl?: boolean
    apiProductDetailsUrl?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "isActive" | "createdAt" | "updatedAt" | "url" | "apiProductsUrl" | "apiProductDetailsUrl" | "createdById" | "updatedById", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Brand$categoriesArgs<ExtArgs>
    products?: boolean | Brand$productsArgs<ExtArgs>
    mediaItems?: boolean | Brand$mediaItemsArgs<ExtArgs>
    createdBy?: boolean | Brand$createdByArgs<ExtArgs>
    updatedBy?: boolean | Brand$updatedByArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
      mediaItems: Prisma.$MediaItemPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      url: string | null
      apiProductsUrl: string | null
      apiProductDetailsUrl: string | null
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends Brand$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Brand$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends Brand$productsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mediaItems<T extends Brand$mediaItemsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$mediaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends Brand$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Brand$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Brand$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Brand$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'Int'>
    readonly name: FieldRef<"Brand", 'String'>
    readonly slug: FieldRef<"Brand", 'String'>
    readonly description: FieldRef<"Brand", 'String'>
    readonly isActive: FieldRef<"Brand", 'Boolean'>
    readonly createdAt: FieldRef<"Brand", 'DateTime'>
    readonly updatedAt: FieldRef<"Brand", 'DateTime'>
    readonly url: FieldRef<"Brand", 'String'>
    readonly apiProductsUrl: FieldRef<"Brand", 'String'>
    readonly apiProductDetailsUrl: FieldRef<"Brand", 'String'>
    readonly createdById: FieldRef<"Brand", 'String'>
    readonly updatedById: FieldRef<"Brand", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.categories
   */
  export type Brand$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Brand.products
   */
  export type Brand$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Brand.mediaItems
   */
  export type Brand$mediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * Brand.createdBy
   */
  export type Brand$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Brand.updatedBy
   */
  export type Brand$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    level: number | null
    sortOrder: number | null
    brandId: number | null
    parentId: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    level: number | null
    sortOrder: number | null
    brandId: number | null
    parentId: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    level: number | null
    sortOrder: number | null
    isActive: boolean | null
    gender: string | null
    brandId: number | null
    parentId: number | null
    apiId: string | null
    isLeaf: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    level: number | null
    sortOrder: number | null
    isActive: boolean | null
    gender: string | null
    brandId: number | null
    parentId: number | null
    apiId: string | null
    isLeaf: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    level: number
    sortOrder: number
    isActive: number
    gender: number
    brandId: number
    parentId: number
    apiId: number
    isLeaf: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    level?: true
    sortOrder?: true
    brandId?: true
    parentId?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    level?: true
    sortOrder?: true
    brandId?: true
    parentId?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    level?: true
    sortOrder?: true
    isActive?: true
    gender?: true
    brandId?: true
    parentId?: true
    apiId?: true
    isLeaf?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    level?: true
    sortOrder?: true
    isActive?: true
    gender?: true
    brandId?: true
    parentId?: true
    apiId?: true
    isLeaf?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    level?: true
    sortOrder?: true
    isActive?: true
    gender?: true
    brandId?: true
    parentId?: true
    apiId?: true
    isLeaf?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    slug: string
    level: number
    sortOrder: number
    isActive: boolean
    gender: string | null
    brandId: number
    parentId: number | null
    apiId: string | null
    isLeaf: boolean
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    level?: boolean
    sortOrder?: boolean
    isActive?: boolean
    gender?: boolean
    brandId?: boolean
    parentId?: boolean
    apiId?: boolean
    isLeaf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    parent?: boolean | Category$parentArgs<ExtArgs>
    subCategories?: boolean | Category$subCategoriesArgs<ExtArgs>
    productCategories?: boolean | Category$productCategoriesArgs<ExtArgs>
    mediaItems?: boolean | Category$mediaItemsArgs<ExtArgs>
    createdBy?: boolean | Category$createdByArgs<ExtArgs>
    updatedBy?: boolean | Category$updatedByArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>



  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    level?: boolean
    sortOrder?: boolean
    isActive?: boolean
    gender?: boolean
    brandId?: boolean
    parentId?: boolean
    apiId?: boolean
    isLeaf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "level" | "sortOrder" | "isActive" | "gender" | "brandId" | "parentId" | "apiId" | "isLeaf" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    parent?: boolean | Category$parentArgs<ExtArgs>
    subCategories?: boolean | Category$subCategoriesArgs<ExtArgs>
    productCategories?: boolean | Category$productCategoriesArgs<ExtArgs>
    mediaItems?: boolean | Category$mediaItemsArgs<ExtArgs>
    createdBy?: boolean | Category$createdByArgs<ExtArgs>
    updatedBy?: boolean | Category$updatedByArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      brand: Prisma.$BrandPayload<ExtArgs>
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      subCategories: Prisma.$CategoryPayload<ExtArgs>[]
      productCategories: Prisma.$ProductCategoryPayload<ExtArgs>[]
      mediaItems: Prisma.$MediaItemPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      level: number
      sortOrder: number
      isActive: boolean
      gender: string | null
      brandId: number
      parentId: number | null
      apiId: string | null
      isLeaf: boolean
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subCategories<T extends Category$subCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Category$subCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    productCategories<T extends Category$productCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Category$productCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mediaItems<T extends Category$mediaItemsArgs<ExtArgs> = {}>(args?: Subset<T, Category$mediaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends Category$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Category$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Category$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Category$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly level: FieldRef<"Category", 'Int'>
    readonly sortOrder: FieldRef<"Category", 'Int'>
    readonly isActive: FieldRef<"Category", 'Boolean'>
    readonly gender: FieldRef<"Category", 'String'>
    readonly brandId: FieldRef<"Category", 'Int'>
    readonly parentId: FieldRef<"Category", 'Int'>
    readonly apiId: FieldRef<"Category", 'String'>
    readonly isLeaf: FieldRef<"Category", 'Boolean'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
    readonly createdById: FieldRef<"Category", 'String'>
    readonly updatedById: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.subCategories
   */
  export type Category$subCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.productCategories
   */
  export type Category$productCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    where?: ProductCategoryWhereInput
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    cursor?: ProductCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * Category.mediaItems
   */
  export type Category$mediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * Category.createdBy
   */
  export type Category$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Category.updatedBy
   */
  export type Category$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model ColorVariants
   */

  export type AggregateColorVariants = {
    _count: ColorVariantsCountAggregateOutputType | null
    _min: ColorVariantsMinAggregateOutputType | null
    _max: ColorVariantsMaxAggregateOutputType | null
  }

  export type ColorVariantsMinAggregateOutputType = {
    id: string | null
    colorName: string | null
    colorCode: string | null
    price: string | null
    hexColor: string | null
    availability: $Enums.ColorVariantsAvailability | null
    sku: string | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ColorVariantsMaxAggregateOutputType = {
    id: string | null
    colorName: string | null
    colorCode: string | null
    price: string | null
    hexColor: string | null
    availability: $Enums.ColorVariantsAvailability | null
    sku: string | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ColorVariantsCountAggregateOutputType = {
    id: number
    colorName: number
    colorCode: number
    price: number
    hexColor: number
    availability: number
    sku: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ColorVariantsMinAggregateInputType = {
    id?: true
    colorName?: true
    colorCode?: true
    price?: true
    hexColor?: true
    availability?: true
    sku?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ColorVariantsMaxAggregateInputType = {
    id?: true
    colorName?: true
    colorCode?: true
    price?: true
    hexColor?: true
    availability?: true
    sku?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ColorVariantsCountAggregateInputType = {
    id?: true
    colorName?: true
    colorCode?: true
    price?: true
    hexColor?: true
    availability?: true
    sku?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ColorVariantsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ColorVariants to aggregate.
     */
    where?: ColorVariantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColorVariants to fetch.
     */
    orderBy?: ColorVariantsOrderByWithRelationInput | ColorVariantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColorVariantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColorVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColorVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ColorVariants
    **/
    _count?: true | ColorVariantsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColorVariantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColorVariantsMaxAggregateInputType
  }

  export type GetColorVariantsAggregateType<T extends ColorVariantsAggregateArgs> = {
        [P in keyof T & keyof AggregateColorVariants]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColorVariants[P]>
      : GetScalarType<T[P], AggregateColorVariants[P]>
  }




  export type ColorVariantsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColorVariantsWhereInput
    orderBy?: ColorVariantsOrderByWithAggregationInput | ColorVariantsOrderByWithAggregationInput[]
    by: ColorVariantsScalarFieldEnum[] | ColorVariantsScalarFieldEnum
    having?: ColorVariantsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColorVariantsCountAggregateInputType | true
    _min?: ColorVariantsMinAggregateInputType
    _max?: ColorVariantsMaxAggregateInputType
  }

  export type ColorVariantsGroupByOutputType = {
    id: string
    colorName: string
    colorCode: string | null
    price: string | null
    hexColor: string | null
    availability: $Enums.ColorVariantsAvailability
    sku: string | null
    productId: string
    createdAt: Date
    updatedAt: Date
    _count: ColorVariantsCountAggregateOutputType | null
    _min: ColorVariantsMinAggregateOutputType | null
    _max: ColorVariantsMaxAggregateOutputType | null
  }

  type GetColorVariantsGroupByPayload<T extends ColorVariantsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColorVariantsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColorVariantsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColorVariantsGroupByOutputType[P]>
            : GetScalarType<T[P], ColorVariantsGroupByOutputType[P]>
        }
      >
    >


  export type ColorVariantsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colorName?: boolean
    colorCode?: boolean
    price?: boolean
    hexColor?: boolean
    availability?: boolean
    sku?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    sizes?: boolean | ColorVariants$sizesArgs<ExtArgs>
    _count?: boolean | ColorVariantsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["colorVariants"]>



  export type ColorVariantsSelectScalar = {
    id?: boolean
    colorName?: boolean
    colorCode?: boolean
    price?: boolean
    hexColor?: boolean
    availability?: boolean
    sku?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ColorVariantsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "colorName" | "colorCode" | "price" | "hexColor" | "availability" | "sku" | "productId" | "createdAt" | "updatedAt", ExtArgs["result"]["colorVariants"]>
  export type ColorVariantsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    sizes?: boolean | ColorVariants$sizesArgs<ExtArgs>
    _count?: boolean | ColorVariantsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ColorVariantsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ColorVariants"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      sizes: Prisma.$SizeVariantsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      colorName: string
      colorCode: string | null
      price: string | null
      hexColor: string | null
      availability: $Enums.ColorVariantsAvailability
      sku: string | null
      productId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["colorVariants"]>
    composites: {}
  }

  type ColorVariantsGetPayload<S extends boolean | null | undefined | ColorVariantsDefaultArgs> = $Result.GetResult<Prisma.$ColorVariantsPayload, S>

  type ColorVariantsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ColorVariantsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ColorVariantsCountAggregateInputType | true
    }

  export interface ColorVariantsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ColorVariants'], meta: { name: 'ColorVariants' } }
    /**
     * Find zero or one ColorVariants that matches the filter.
     * @param {ColorVariantsFindUniqueArgs} args - Arguments to find a ColorVariants
     * @example
     * // Get one ColorVariants
     * const colorVariants = await prisma.colorVariants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ColorVariantsFindUniqueArgs>(args: SelectSubset<T, ColorVariantsFindUniqueArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ColorVariants that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ColorVariantsFindUniqueOrThrowArgs} args - Arguments to find a ColorVariants
     * @example
     * // Get one ColorVariants
     * const colorVariants = await prisma.colorVariants.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ColorVariantsFindUniqueOrThrowArgs>(args: SelectSubset<T, ColorVariantsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ColorVariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorVariantsFindFirstArgs} args - Arguments to find a ColorVariants
     * @example
     * // Get one ColorVariants
     * const colorVariants = await prisma.colorVariants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ColorVariantsFindFirstArgs>(args?: SelectSubset<T, ColorVariantsFindFirstArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ColorVariants that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorVariantsFindFirstOrThrowArgs} args - Arguments to find a ColorVariants
     * @example
     * // Get one ColorVariants
     * const colorVariants = await prisma.colorVariants.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ColorVariantsFindFirstOrThrowArgs>(args?: SelectSubset<T, ColorVariantsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ColorVariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorVariantsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ColorVariants
     * const colorVariants = await prisma.colorVariants.findMany()
     * 
     * // Get first 10 ColorVariants
     * const colorVariants = await prisma.colorVariants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colorVariantsWithIdOnly = await prisma.colorVariants.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ColorVariantsFindManyArgs>(args?: SelectSubset<T, ColorVariantsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ColorVariants.
     * @param {ColorVariantsCreateArgs} args - Arguments to create a ColorVariants.
     * @example
     * // Create one ColorVariants
     * const ColorVariants = await prisma.colorVariants.create({
     *   data: {
     *     // ... data to create a ColorVariants
     *   }
     * })
     * 
     */
    create<T extends ColorVariantsCreateArgs>(args: SelectSubset<T, ColorVariantsCreateArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ColorVariants.
     * @param {ColorVariantsCreateManyArgs} args - Arguments to create many ColorVariants.
     * @example
     * // Create many ColorVariants
     * const colorVariants = await prisma.colorVariants.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ColorVariantsCreateManyArgs>(args?: SelectSubset<T, ColorVariantsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ColorVariants.
     * @param {ColorVariantsDeleteArgs} args - Arguments to delete one ColorVariants.
     * @example
     * // Delete one ColorVariants
     * const ColorVariants = await prisma.colorVariants.delete({
     *   where: {
     *     // ... filter to delete one ColorVariants
     *   }
     * })
     * 
     */
    delete<T extends ColorVariantsDeleteArgs>(args: SelectSubset<T, ColorVariantsDeleteArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ColorVariants.
     * @param {ColorVariantsUpdateArgs} args - Arguments to update one ColorVariants.
     * @example
     * // Update one ColorVariants
     * const colorVariants = await prisma.colorVariants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ColorVariantsUpdateArgs>(args: SelectSubset<T, ColorVariantsUpdateArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ColorVariants.
     * @param {ColorVariantsDeleteManyArgs} args - Arguments to filter ColorVariants to delete.
     * @example
     * // Delete a few ColorVariants
     * const { count } = await prisma.colorVariants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ColorVariantsDeleteManyArgs>(args?: SelectSubset<T, ColorVariantsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ColorVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorVariantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ColorVariants
     * const colorVariants = await prisma.colorVariants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ColorVariantsUpdateManyArgs>(args: SelectSubset<T, ColorVariantsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ColorVariants.
     * @param {ColorVariantsUpsertArgs} args - Arguments to update or create a ColorVariants.
     * @example
     * // Update or create a ColorVariants
     * const colorVariants = await prisma.colorVariants.upsert({
     *   create: {
     *     // ... data to create a ColorVariants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ColorVariants we want to update
     *   }
     * })
     */
    upsert<T extends ColorVariantsUpsertArgs>(args: SelectSubset<T, ColorVariantsUpsertArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ColorVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorVariantsCountArgs} args - Arguments to filter ColorVariants to count.
     * @example
     * // Count the number of ColorVariants
     * const count = await prisma.colorVariants.count({
     *   where: {
     *     // ... the filter for the ColorVariants we want to count
     *   }
     * })
    **/
    count<T extends ColorVariantsCountArgs>(
      args?: Subset<T, ColorVariantsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColorVariantsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ColorVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorVariantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColorVariantsAggregateArgs>(args: Subset<T, ColorVariantsAggregateArgs>): Prisma.PrismaPromise<GetColorVariantsAggregateType<T>>

    /**
     * Group by ColorVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorVariantsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColorVariantsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColorVariantsGroupByArgs['orderBy'] }
        : { orderBy?: ColorVariantsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColorVariantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColorVariantsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ColorVariants model
   */
  readonly fields: ColorVariantsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ColorVariants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ColorVariantsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sizes<T extends ColorVariants$sizesArgs<ExtArgs> = {}>(args?: Subset<T, ColorVariants$sizesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ColorVariants model
   */
  interface ColorVariantsFieldRefs {
    readonly id: FieldRef<"ColorVariants", 'String'>
    readonly colorName: FieldRef<"ColorVariants", 'String'>
    readonly colorCode: FieldRef<"ColorVariants", 'String'>
    readonly price: FieldRef<"ColorVariants", 'String'>
    readonly hexColor: FieldRef<"ColorVariants", 'String'>
    readonly availability: FieldRef<"ColorVariants", 'ColorVariantsAvailability'>
    readonly sku: FieldRef<"ColorVariants", 'String'>
    readonly productId: FieldRef<"ColorVariants", 'String'>
    readonly createdAt: FieldRef<"ColorVariants", 'DateTime'>
    readonly updatedAt: FieldRef<"ColorVariants", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ColorVariants findUnique
   */
  export type ColorVariantsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * Filter, which ColorVariants to fetch.
     */
    where: ColorVariantsWhereUniqueInput
  }

  /**
   * ColorVariants findUniqueOrThrow
   */
  export type ColorVariantsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * Filter, which ColorVariants to fetch.
     */
    where: ColorVariantsWhereUniqueInput
  }

  /**
   * ColorVariants findFirst
   */
  export type ColorVariantsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * Filter, which ColorVariants to fetch.
     */
    where?: ColorVariantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColorVariants to fetch.
     */
    orderBy?: ColorVariantsOrderByWithRelationInput | ColorVariantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ColorVariants.
     */
    cursor?: ColorVariantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColorVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColorVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ColorVariants.
     */
    distinct?: ColorVariantsScalarFieldEnum | ColorVariantsScalarFieldEnum[]
  }

  /**
   * ColorVariants findFirstOrThrow
   */
  export type ColorVariantsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * Filter, which ColorVariants to fetch.
     */
    where?: ColorVariantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColorVariants to fetch.
     */
    orderBy?: ColorVariantsOrderByWithRelationInput | ColorVariantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ColorVariants.
     */
    cursor?: ColorVariantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColorVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColorVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ColorVariants.
     */
    distinct?: ColorVariantsScalarFieldEnum | ColorVariantsScalarFieldEnum[]
  }

  /**
   * ColorVariants findMany
   */
  export type ColorVariantsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * Filter, which ColorVariants to fetch.
     */
    where?: ColorVariantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColorVariants to fetch.
     */
    orderBy?: ColorVariantsOrderByWithRelationInput | ColorVariantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ColorVariants.
     */
    cursor?: ColorVariantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColorVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColorVariants.
     */
    skip?: number
    distinct?: ColorVariantsScalarFieldEnum | ColorVariantsScalarFieldEnum[]
  }

  /**
   * ColorVariants create
   */
  export type ColorVariantsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * The data needed to create a ColorVariants.
     */
    data: XOR<ColorVariantsCreateInput, ColorVariantsUncheckedCreateInput>
  }

  /**
   * ColorVariants createMany
   */
  export type ColorVariantsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ColorVariants.
     */
    data: ColorVariantsCreateManyInput | ColorVariantsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ColorVariants update
   */
  export type ColorVariantsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * The data needed to update a ColorVariants.
     */
    data: XOR<ColorVariantsUpdateInput, ColorVariantsUncheckedUpdateInput>
    /**
     * Choose, which ColorVariants to update.
     */
    where: ColorVariantsWhereUniqueInput
  }

  /**
   * ColorVariants updateMany
   */
  export type ColorVariantsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ColorVariants.
     */
    data: XOR<ColorVariantsUpdateManyMutationInput, ColorVariantsUncheckedUpdateManyInput>
    /**
     * Filter which ColorVariants to update
     */
    where?: ColorVariantsWhereInput
    /**
     * Limit how many ColorVariants to update.
     */
    limit?: number
  }

  /**
   * ColorVariants upsert
   */
  export type ColorVariantsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * The filter to search for the ColorVariants to update in case it exists.
     */
    where: ColorVariantsWhereUniqueInput
    /**
     * In case the ColorVariants found by the `where` argument doesn't exist, create a new ColorVariants with this data.
     */
    create: XOR<ColorVariantsCreateInput, ColorVariantsUncheckedCreateInput>
    /**
     * In case the ColorVariants was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColorVariantsUpdateInput, ColorVariantsUncheckedUpdateInput>
  }

  /**
   * ColorVariants delete
   */
  export type ColorVariantsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    /**
     * Filter which ColorVariants to delete.
     */
    where: ColorVariantsWhereUniqueInput
  }

  /**
   * ColorVariants deleteMany
   */
  export type ColorVariantsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ColorVariants to delete
     */
    where?: ColorVariantsWhereInput
    /**
     * Limit how many ColorVariants to delete.
     */
    limit?: number
  }

  /**
   * ColorVariants.sizes
   */
  export type ColorVariants$sizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    where?: SizeVariantsWhereInput
    orderBy?: SizeVariantsOrderByWithRelationInput | SizeVariantsOrderByWithRelationInput[]
    cursor?: SizeVariantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizeVariantsScalarFieldEnum | SizeVariantsScalarFieldEnum[]
  }

  /**
   * ColorVariants without action
   */
  export type ColorVariantsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
  }


  /**
   * Model SizeVariants
   */

  export type AggregateSizeVariants = {
    _count: SizeVariantsCountAggregateOutputType | null
    _avg: SizeVariantsAvgAggregateOutputType | null
    _sum: SizeVariantsSumAggregateOutputType | null
    _min: SizeVariantsMinAggregateOutputType | null
    _max: SizeVariantsMaxAggregateOutputType | null
  }

  export type SizeVariantsAvgAggregateOutputType = {
    originalOrder: number | null
  }

  export type SizeVariantsSumAggregateOutputType = {
    originalOrder: number | null
  }

  export type SizeVariantsMinAggregateOutputType = {
    id: string | null
    size: string | null
    availability: $Enums.SizeVariantsAvailability | null
    isSelected: boolean | null
    originalOrder: number | null
    colorVariantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SizeVariantsMaxAggregateOutputType = {
    id: string | null
    size: string | null
    availability: $Enums.SizeVariantsAvailability | null
    isSelected: boolean | null
    originalOrder: number | null
    colorVariantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SizeVariantsCountAggregateOutputType = {
    id: number
    size: number
    availability: number
    isSelected: number
    originalOrder: number
    colorVariantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SizeVariantsAvgAggregateInputType = {
    originalOrder?: true
  }

  export type SizeVariantsSumAggregateInputType = {
    originalOrder?: true
  }

  export type SizeVariantsMinAggregateInputType = {
    id?: true
    size?: true
    availability?: true
    isSelected?: true
    originalOrder?: true
    colorVariantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SizeVariantsMaxAggregateInputType = {
    id?: true
    size?: true
    availability?: true
    isSelected?: true
    originalOrder?: true
    colorVariantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SizeVariantsCountAggregateInputType = {
    id?: true
    size?: true
    availability?: true
    isSelected?: true
    originalOrder?: true
    colorVariantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SizeVariantsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeVariants to aggregate.
     */
    where?: SizeVariantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeVariants to fetch.
     */
    orderBy?: SizeVariantsOrderByWithRelationInput | SizeVariantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeVariantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SizeVariants
    **/
    _count?: true | SizeVariantsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SizeVariantsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SizeVariantsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeVariantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeVariantsMaxAggregateInputType
  }

  export type GetSizeVariantsAggregateType<T extends SizeVariantsAggregateArgs> = {
        [P in keyof T & keyof AggregateSizeVariants]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSizeVariants[P]>
      : GetScalarType<T[P], AggregateSizeVariants[P]>
  }




  export type SizeVariantsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeVariantsWhereInput
    orderBy?: SizeVariantsOrderByWithAggregationInput | SizeVariantsOrderByWithAggregationInput[]
    by: SizeVariantsScalarFieldEnum[] | SizeVariantsScalarFieldEnum
    having?: SizeVariantsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeVariantsCountAggregateInputType | true
    _avg?: SizeVariantsAvgAggregateInputType
    _sum?: SizeVariantsSumAggregateInputType
    _min?: SizeVariantsMinAggregateInputType
    _max?: SizeVariantsMaxAggregateInputType
  }

  export type SizeVariantsGroupByOutputType = {
    id: string
    size: string
    availability: $Enums.SizeVariantsAvailability
    isSelected: boolean
    originalOrder: number | null
    colorVariantId: string
    createdAt: Date
    updatedAt: Date
    _count: SizeVariantsCountAggregateOutputType | null
    _avg: SizeVariantsAvgAggregateOutputType | null
    _sum: SizeVariantsSumAggregateOutputType | null
    _min: SizeVariantsMinAggregateOutputType | null
    _max: SizeVariantsMaxAggregateOutputType | null
  }

  type GetSizeVariantsGroupByPayload<T extends SizeVariantsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeVariantsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeVariantsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeVariantsGroupByOutputType[P]>
            : GetScalarType<T[P], SizeVariantsGroupByOutputType[P]>
        }
      >
    >


  export type SizeVariantsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    size?: boolean
    availability?: boolean
    isSelected?: boolean
    originalOrder?: boolean
    colorVariantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    colorVariant?: boolean | ColorVariantsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizeVariants"]>



  export type SizeVariantsSelectScalar = {
    id?: boolean
    size?: boolean
    availability?: boolean
    isSelected?: boolean
    originalOrder?: boolean
    colorVariantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SizeVariantsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "size" | "availability" | "isSelected" | "originalOrder" | "colorVariantId" | "createdAt" | "updatedAt", ExtArgs["result"]["sizeVariants"]>
  export type SizeVariantsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colorVariant?: boolean | ColorVariantsDefaultArgs<ExtArgs>
  }

  export type $SizeVariantsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SizeVariants"
    objects: {
      colorVariant: Prisma.$ColorVariantsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      size: string
      availability: $Enums.SizeVariantsAvailability
      isSelected: boolean
      originalOrder: number | null
      colorVariantId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sizeVariants"]>
    composites: {}
  }

  type SizeVariantsGetPayload<S extends boolean | null | undefined | SizeVariantsDefaultArgs> = $Result.GetResult<Prisma.$SizeVariantsPayload, S>

  type SizeVariantsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeVariantsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeVariantsCountAggregateInputType | true
    }

  export interface SizeVariantsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SizeVariants'], meta: { name: 'SizeVariants' } }
    /**
     * Find zero or one SizeVariants that matches the filter.
     * @param {SizeVariantsFindUniqueArgs} args - Arguments to find a SizeVariants
     * @example
     * // Get one SizeVariants
     * const sizeVariants = await prisma.sizeVariants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeVariantsFindUniqueArgs>(args: SelectSubset<T, SizeVariantsFindUniqueArgs<ExtArgs>>): Prisma__SizeVariantsClient<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SizeVariants that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeVariantsFindUniqueOrThrowArgs} args - Arguments to find a SizeVariants
     * @example
     * // Get one SizeVariants
     * const sizeVariants = await prisma.sizeVariants.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeVariantsFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeVariantsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeVariantsClient<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeVariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeVariantsFindFirstArgs} args - Arguments to find a SizeVariants
     * @example
     * // Get one SizeVariants
     * const sizeVariants = await prisma.sizeVariants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeVariantsFindFirstArgs>(args?: SelectSubset<T, SizeVariantsFindFirstArgs<ExtArgs>>): Prisma__SizeVariantsClient<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeVariants that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeVariantsFindFirstOrThrowArgs} args - Arguments to find a SizeVariants
     * @example
     * // Get one SizeVariants
     * const sizeVariants = await prisma.sizeVariants.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeVariantsFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeVariantsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeVariantsClient<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeVariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeVariantsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SizeVariants
     * const sizeVariants = await prisma.sizeVariants.findMany()
     * 
     * // Get first 10 SizeVariants
     * const sizeVariants = await prisma.sizeVariants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeVariantsWithIdOnly = await prisma.sizeVariants.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeVariantsFindManyArgs>(args?: SelectSubset<T, SizeVariantsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SizeVariants.
     * @param {SizeVariantsCreateArgs} args - Arguments to create a SizeVariants.
     * @example
     * // Create one SizeVariants
     * const SizeVariants = await prisma.sizeVariants.create({
     *   data: {
     *     // ... data to create a SizeVariants
     *   }
     * })
     * 
     */
    create<T extends SizeVariantsCreateArgs>(args: SelectSubset<T, SizeVariantsCreateArgs<ExtArgs>>): Prisma__SizeVariantsClient<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SizeVariants.
     * @param {SizeVariantsCreateManyArgs} args - Arguments to create many SizeVariants.
     * @example
     * // Create many SizeVariants
     * const sizeVariants = await prisma.sizeVariants.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeVariantsCreateManyArgs>(args?: SelectSubset<T, SizeVariantsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SizeVariants.
     * @param {SizeVariantsDeleteArgs} args - Arguments to delete one SizeVariants.
     * @example
     * // Delete one SizeVariants
     * const SizeVariants = await prisma.sizeVariants.delete({
     *   where: {
     *     // ... filter to delete one SizeVariants
     *   }
     * })
     * 
     */
    delete<T extends SizeVariantsDeleteArgs>(args: SelectSubset<T, SizeVariantsDeleteArgs<ExtArgs>>): Prisma__SizeVariantsClient<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SizeVariants.
     * @param {SizeVariantsUpdateArgs} args - Arguments to update one SizeVariants.
     * @example
     * // Update one SizeVariants
     * const sizeVariants = await prisma.sizeVariants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeVariantsUpdateArgs>(args: SelectSubset<T, SizeVariantsUpdateArgs<ExtArgs>>): Prisma__SizeVariantsClient<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SizeVariants.
     * @param {SizeVariantsDeleteManyArgs} args - Arguments to filter SizeVariants to delete.
     * @example
     * // Delete a few SizeVariants
     * const { count } = await prisma.sizeVariants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeVariantsDeleteManyArgs>(args?: SelectSubset<T, SizeVariantsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SizeVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeVariantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SizeVariants
     * const sizeVariants = await prisma.sizeVariants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeVariantsUpdateManyArgs>(args: SelectSubset<T, SizeVariantsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SizeVariants.
     * @param {SizeVariantsUpsertArgs} args - Arguments to update or create a SizeVariants.
     * @example
     * // Update or create a SizeVariants
     * const sizeVariants = await prisma.sizeVariants.upsert({
     *   create: {
     *     // ... data to create a SizeVariants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SizeVariants we want to update
     *   }
     * })
     */
    upsert<T extends SizeVariantsUpsertArgs>(args: SelectSubset<T, SizeVariantsUpsertArgs<ExtArgs>>): Prisma__SizeVariantsClient<$Result.GetResult<Prisma.$SizeVariantsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SizeVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeVariantsCountArgs} args - Arguments to filter SizeVariants to count.
     * @example
     * // Count the number of SizeVariants
     * const count = await prisma.sizeVariants.count({
     *   where: {
     *     // ... the filter for the SizeVariants we want to count
     *   }
     * })
    **/
    count<T extends SizeVariantsCountArgs>(
      args?: Subset<T, SizeVariantsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeVariantsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SizeVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeVariantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeVariantsAggregateArgs>(args: Subset<T, SizeVariantsAggregateArgs>): Prisma.PrismaPromise<GetSizeVariantsAggregateType<T>>

    /**
     * Group by SizeVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeVariantsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeVariantsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeVariantsGroupByArgs['orderBy'] }
        : { orderBy?: SizeVariantsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeVariantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeVariantsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SizeVariants model
   */
  readonly fields: SizeVariantsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SizeVariants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeVariantsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    colorVariant<T extends ColorVariantsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ColorVariantsDefaultArgs<ExtArgs>>): Prisma__ColorVariantsClient<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SizeVariants model
   */
  interface SizeVariantsFieldRefs {
    readonly id: FieldRef<"SizeVariants", 'String'>
    readonly size: FieldRef<"SizeVariants", 'String'>
    readonly availability: FieldRef<"SizeVariants", 'SizeVariantsAvailability'>
    readonly isSelected: FieldRef<"SizeVariants", 'Boolean'>
    readonly originalOrder: FieldRef<"SizeVariants", 'Int'>
    readonly colorVariantId: FieldRef<"SizeVariants", 'String'>
    readonly createdAt: FieldRef<"SizeVariants", 'DateTime'>
    readonly updatedAt: FieldRef<"SizeVariants", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SizeVariants findUnique
   */
  export type SizeVariantsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * Filter, which SizeVariants to fetch.
     */
    where: SizeVariantsWhereUniqueInput
  }

  /**
   * SizeVariants findUniqueOrThrow
   */
  export type SizeVariantsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * Filter, which SizeVariants to fetch.
     */
    where: SizeVariantsWhereUniqueInput
  }

  /**
   * SizeVariants findFirst
   */
  export type SizeVariantsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * Filter, which SizeVariants to fetch.
     */
    where?: SizeVariantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeVariants to fetch.
     */
    orderBy?: SizeVariantsOrderByWithRelationInput | SizeVariantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeVariants.
     */
    cursor?: SizeVariantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeVariants.
     */
    distinct?: SizeVariantsScalarFieldEnum | SizeVariantsScalarFieldEnum[]
  }

  /**
   * SizeVariants findFirstOrThrow
   */
  export type SizeVariantsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * Filter, which SizeVariants to fetch.
     */
    where?: SizeVariantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeVariants to fetch.
     */
    orderBy?: SizeVariantsOrderByWithRelationInput | SizeVariantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeVariants.
     */
    cursor?: SizeVariantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeVariants.
     */
    distinct?: SizeVariantsScalarFieldEnum | SizeVariantsScalarFieldEnum[]
  }

  /**
   * SizeVariants findMany
   */
  export type SizeVariantsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * Filter, which SizeVariants to fetch.
     */
    where?: SizeVariantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeVariants to fetch.
     */
    orderBy?: SizeVariantsOrderByWithRelationInput | SizeVariantsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SizeVariants.
     */
    cursor?: SizeVariantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeVariants.
     */
    skip?: number
    distinct?: SizeVariantsScalarFieldEnum | SizeVariantsScalarFieldEnum[]
  }

  /**
   * SizeVariants create
   */
  export type SizeVariantsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * The data needed to create a SizeVariants.
     */
    data: XOR<SizeVariantsCreateInput, SizeVariantsUncheckedCreateInput>
  }

  /**
   * SizeVariants createMany
   */
  export type SizeVariantsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SizeVariants.
     */
    data: SizeVariantsCreateManyInput | SizeVariantsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SizeVariants update
   */
  export type SizeVariantsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * The data needed to update a SizeVariants.
     */
    data: XOR<SizeVariantsUpdateInput, SizeVariantsUncheckedUpdateInput>
    /**
     * Choose, which SizeVariants to update.
     */
    where: SizeVariantsWhereUniqueInput
  }

  /**
   * SizeVariants updateMany
   */
  export type SizeVariantsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SizeVariants.
     */
    data: XOR<SizeVariantsUpdateManyMutationInput, SizeVariantsUncheckedUpdateManyInput>
    /**
     * Filter which SizeVariants to update
     */
    where?: SizeVariantsWhereInput
    /**
     * Limit how many SizeVariants to update.
     */
    limit?: number
  }

  /**
   * SizeVariants upsert
   */
  export type SizeVariantsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * The filter to search for the SizeVariants to update in case it exists.
     */
    where: SizeVariantsWhereUniqueInput
    /**
     * In case the SizeVariants found by the `where` argument doesn't exist, create a new SizeVariants with this data.
     */
    create: XOR<SizeVariantsCreateInput, SizeVariantsUncheckedCreateInput>
    /**
     * In case the SizeVariants was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeVariantsUpdateInput, SizeVariantsUncheckedUpdateInput>
  }

  /**
   * SizeVariants delete
   */
  export type SizeVariantsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
    /**
     * Filter which SizeVariants to delete.
     */
    where: SizeVariantsWhereUniqueInput
  }

  /**
   * SizeVariants deleteMany
   */
  export type SizeVariantsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeVariants to delete
     */
    where?: SizeVariantsWhereInput
    /**
     * Limit how many SizeVariants to delete.
     */
    limit?: number
  }

  /**
   * SizeVariants without action
   */
  export type SizeVariantsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeVariants
     */
    select?: SizeVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeVariants
     */
    omit?: SizeVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeVariantsInclude<ExtArgs> | null
  }


  /**
   * Model MediaItem
   */

  export type AggregateMediaItem = {
    _count: MediaItemCountAggregateOutputType | null
    _avg: MediaItemAvgAggregateOutputType | null
    _sum: MediaItemSumAggregateOutputType | null
    _min: MediaItemMinAggregateOutputType | null
    _max: MediaItemMaxAggregateOutputType | null
  }

  export type MediaItemAvgAggregateOutputType = {
    brandId: number | null
    categoryId: number | null
  }

  export type MediaItemSumAggregateOutputType = {
    brandId: number | null
    categoryId: number | null
  }

  export type MediaItemMinAggregateOutputType = {
    id: string | null
    url: string | null
    fileName: string | null
    type: string | null
    apiId: string | null
    brandId: number | null
    categoryId: number | null
    productId: string | null
    createdById: string | null
    updatedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaItemMaxAggregateOutputType = {
    id: string | null
    url: string | null
    fileName: string | null
    type: string | null
    apiId: string | null
    brandId: number | null
    categoryId: number | null
    productId: string | null
    createdById: string | null
    updatedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaItemCountAggregateOutputType = {
    id: number
    url: number
    fileName: number
    type: number
    apiId: number
    brandId: number
    categoryId: number
    productId: number
    createdById: number
    updatedById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MediaItemAvgAggregateInputType = {
    brandId?: true
    categoryId?: true
  }

  export type MediaItemSumAggregateInputType = {
    brandId?: true
    categoryId?: true
  }

  export type MediaItemMinAggregateInputType = {
    id?: true
    url?: true
    fileName?: true
    type?: true
    apiId?: true
    brandId?: true
    categoryId?: true
    productId?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaItemMaxAggregateInputType = {
    id?: true
    url?: true
    fileName?: true
    type?: true
    apiId?: true
    brandId?: true
    categoryId?: true
    productId?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaItemCountAggregateInputType = {
    id?: true
    url?: true
    fileName?: true
    type?: true
    apiId?: true
    brandId?: true
    categoryId?: true
    productId?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MediaItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaItem to aggregate.
     */
    where?: MediaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaItems to fetch.
     */
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaItems
    **/
    _count?: true | MediaItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaItemMaxAggregateInputType
  }

  export type GetMediaItemAggregateType<T extends MediaItemAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaItem[P]>
      : GetScalarType<T[P], AggregateMediaItem[P]>
  }




  export type MediaItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithAggregationInput | MediaItemOrderByWithAggregationInput[]
    by: MediaItemScalarFieldEnum[] | MediaItemScalarFieldEnum
    having?: MediaItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaItemCountAggregateInputType | true
    _avg?: MediaItemAvgAggregateInputType
    _sum?: MediaItemSumAggregateInputType
    _min?: MediaItemMinAggregateInputType
    _max?: MediaItemMaxAggregateInputType
  }

  export type MediaItemGroupByOutputType = {
    id: string
    url: string
    fileName: string
    type: string
    apiId: string | null
    brandId: number | null
    categoryId: number | null
    productId: string | null
    createdById: string | null
    updatedById: string | null
    createdAt: Date
    updatedAt: Date
    _count: MediaItemCountAggregateOutputType | null
    _avg: MediaItemAvgAggregateOutputType | null
    _sum: MediaItemSumAggregateOutputType | null
    _min: MediaItemMinAggregateOutputType | null
    _max: MediaItemMaxAggregateOutputType | null
  }

  type GetMediaItemGroupByPayload<T extends MediaItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaItemGroupByOutputType[P]>
            : GetScalarType<T[P], MediaItemGroupByOutputType[P]>
        }
      >
    >


  export type MediaItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    fileName?: boolean
    type?: boolean
    apiId?: boolean
    brandId?: boolean
    categoryId?: boolean
    productId?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | MediaItem$brandArgs<ExtArgs>
    category?: boolean | MediaItem$categoryArgs<ExtArgs>
    product?: boolean | MediaItem$productArgs<ExtArgs>
    createdBy?: boolean | MediaItem$createdByArgs<ExtArgs>
    updatedBy?: boolean | MediaItem$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["mediaItem"]>



  export type MediaItemSelectScalar = {
    id?: boolean
    url?: boolean
    fileName?: boolean
    type?: boolean
    apiId?: boolean
    brandId?: boolean
    categoryId?: boolean
    productId?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MediaItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "fileName" | "type" | "apiId" | "brandId" | "categoryId" | "productId" | "createdById" | "updatedById" | "createdAt" | "updatedAt", ExtArgs["result"]["mediaItem"]>
  export type MediaItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | MediaItem$brandArgs<ExtArgs>
    category?: boolean | MediaItem$categoryArgs<ExtArgs>
    product?: boolean | MediaItem$productArgs<ExtArgs>
    createdBy?: boolean | MediaItem$createdByArgs<ExtArgs>
    updatedBy?: boolean | MediaItem$updatedByArgs<ExtArgs>
  }

  export type $MediaItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaItem"
    objects: {
      brand: Prisma.$BrandPayload<ExtArgs> | null
      category: Prisma.$CategoryPayload<ExtArgs> | null
      product: Prisma.$ProductPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      fileName: string
      type: string
      apiId: string | null
      brandId: number | null
      categoryId: number | null
      productId: string | null
      createdById: string | null
      updatedById: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mediaItem"]>
    composites: {}
  }

  type MediaItemGetPayload<S extends boolean | null | undefined | MediaItemDefaultArgs> = $Result.GetResult<Prisma.$MediaItemPayload, S>

  type MediaItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MediaItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MediaItemCountAggregateInputType | true
    }

  export interface MediaItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaItem'], meta: { name: 'MediaItem' } }
    /**
     * Find zero or one MediaItem that matches the filter.
     * @param {MediaItemFindUniqueArgs} args - Arguments to find a MediaItem
     * @example
     * // Get one MediaItem
     * const mediaItem = await prisma.mediaItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MediaItemFindUniqueArgs>(args: SelectSubset<T, MediaItemFindUniqueArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MediaItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MediaItemFindUniqueOrThrowArgs} args - Arguments to find a MediaItem
     * @example
     * // Get one MediaItem
     * const mediaItem = await prisma.mediaItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MediaItemFindUniqueOrThrowArgs>(args: SelectSubset<T, MediaItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MediaItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemFindFirstArgs} args - Arguments to find a MediaItem
     * @example
     * // Get one MediaItem
     * const mediaItem = await prisma.mediaItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MediaItemFindFirstArgs>(args?: SelectSubset<T, MediaItemFindFirstArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MediaItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemFindFirstOrThrowArgs} args - Arguments to find a MediaItem
     * @example
     * // Get one MediaItem
     * const mediaItem = await prisma.mediaItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MediaItemFindFirstOrThrowArgs>(args?: SelectSubset<T, MediaItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MediaItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaItems
     * const mediaItems = await prisma.mediaItem.findMany()
     * 
     * // Get first 10 MediaItems
     * const mediaItems = await prisma.mediaItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaItemWithIdOnly = await prisma.mediaItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MediaItemFindManyArgs>(args?: SelectSubset<T, MediaItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MediaItem.
     * @param {MediaItemCreateArgs} args - Arguments to create a MediaItem.
     * @example
     * // Create one MediaItem
     * const MediaItem = await prisma.mediaItem.create({
     *   data: {
     *     // ... data to create a MediaItem
     *   }
     * })
     * 
     */
    create<T extends MediaItemCreateArgs>(args: SelectSubset<T, MediaItemCreateArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MediaItems.
     * @param {MediaItemCreateManyArgs} args - Arguments to create many MediaItems.
     * @example
     * // Create many MediaItems
     * const mediaItem = await prisma.mediaItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MediaItemCreateManyArgs>(args?: SelectSubset<T, MediaItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MediaItem.
     * @param {MediaItemDeleteArgs} args - Arguments to delete one MediaItem.
     * @example
     * // Delete one MediaItem
     * const MediaItem = await prisma.mediaItem.delete({
     *   where: {
     *     // ... filter to delete one MediaItem
     *   }
     * })
     * 
     */
    delete<T extends MediaItemDeleteArgs>(args: SelectSubset<T, MediaItemDeleteArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MediaItem.
     * @param {MediaItemUpdateArgs} args - Arguments to update one MediaItem.
     * @example
     * // Update one MediaItem
     * const mediaItem = await prisma.mediaItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MediaItemUpdateArgs>(args: SelectSubset<T, MediaItemUpdateArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MediaItems.
     * @param {MediaItemDeleteManyArgs} args - Arguments to filter MediaItems to delete.
     * @example
     * // Delete a few MediaItems
     * const { count } = await prisma.mediaItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MediaItemDeleteManyArgs>(args?: SelectSubset<T, MediaItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaItems
     * const mediaItem = await prisma.mediaItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MediaItemUpdateManyArgs>(args: SelectSubset<T, MediaItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MediaItem.
     * @param {MediaItemUpsertArgs} args - Arguments to update or create a MediaItem.
     * @example
     * // Update or create a MediaItem
     * const mediaItem = await prisma.mediaItem.upsert({
     *   create: {
     *     // ... data to create a MediaItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaItem we want to update
     *   }
     * })
     */
    upsert<T extends MediaItemUpsertArgs>(args: SelectSubset<T, MediaItemUpsertArgs<ExtArgs>>): Prisma__MediaItemClient<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MediaItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemCountArgs} args - Arguments to filter MediaItems to count.
     * @example
     * // Count the number of MediaItems
     * const count = await prisma.mediaItem.count({
     *   where: {
     *     // ... the filter for the MediaItems we want to count
     *   }
     * })
    **/
    count<T extends MediaItemCountArgs>(
      args?: Subset<T, MediaItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaItemAggregateArgs>(args: Subset<T, MediaItemAggregateArgs>): Prisma.PrismaPromise<GetMediaItemAggregateType<T>>

    /**
     * Group by MediaItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaItemGroupByArgs['orderBy'] }
        : { orderBy?: MediaItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaItem model
   */
  readonly fields: MediaItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends MediaItem$brandArgs<ExtArgs> = {}>(args?: Subset<T, MediaItem$brandArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    category<T extends MediaItem$categoryArgs<ExtArgs> = {}>(args?: Subset<T, MediaItem$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends MediaItem$productArgs<ExtArgs> = {}>(args?: Subset<T, MediaItem$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends MediaItem$createdByArgs<ExtArgs> = {}>(args?: Subset<T, MediaItem$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends MediaItem$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, MediaItem$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MediaItem model
   */
  interface MediaItemFieldRefs {
    readonly id: FieldRef<"MediaItem", 'String'>
    readonly url: FieldRef<"MediaItem", 'String'>
    readonly fileName: FieldRef<"MediaItem", 'String'>
    readonly type: FieldRef<"MediaItem", 'String'>
    readonly apiId: FieldRef<"MediaItem", 'String'>
    readonly brandId: FieldRef<"MediaItem", 'Int'>
    readonly categoryId: FieldRef<"MediaItem", 'Int'>
    readonly productId: FieldRef<"MediaItem", 'String'>
    readonly createdById: FieldRef<"MediaItem", 'String'>
    readonly updatedById: FieldRef<"MediaItem", 'String'>
    readonly createdAt: FieldRef<"MediaItem", 'DateTime'>
    readonly updatedAt: FieldRef<"MediaItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MediaItem findUnique
   */
  export type MediaItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItem to fetch.
     */
    where: MediaItemWhereUniqueInput
  }

  /**
   * MediaItem findUniqueOrThrow
   */
  export type MediaItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItem to fetch.
     */
    where: MediaItemWhereUniqueInput
  }

  /**
   * MediaItem findFirst
   */
  export type MediaItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItem to fetch.
     */
    where?: MediaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaItems to fetch.
     */
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaItems.
     */
    cursor?: MediaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaItems.
     */
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * MediaItem findFirstOrThrow
   */
  export type MediaItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItem to fetch.
     */
    where?: MediaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaItems to fetch.
     */
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaItems.
     */
    cursor?: MediaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaItems.
     */
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * MediaItem findMany
   */
  export type MediaItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter, which MediaItems to fetch.
     */
    where?: MediaItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaItems to fetch.
     */
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaItems.
     */
    cursor?: MediaItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaItems.
     */
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * MediaItem create
   */
  export type MediaItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * The data needed to create a MediaItem.
     */
    data: XOR<MediaItemCreateInput, MediaItemUncheckedCreateInput>
  }

  /**
   * MediaItem createMany
   */
  export type MediaItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaItems.
     */
    data: MediaItemCreateManyInput | MediaItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MediaItem update
   */
  export type MediaItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * The data needed to update a MediaItem.
     */
    data: XOR<MediaItemUpdateInput, MediaItemUncheckedUpdateInput>
    /**
     * Choose, which MediaItem to update.
     */
    where: MediaItemWhereUniqueInput
  }

  /**
   * MediaItem updateMany
   */
  export type MediaItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaItems.
     */
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyInput>
    /**
     * Filter which MediaItems to update
     */
    where?: MediaItemWhereInput
    /**
     * Limit how many MediaItems to update.
     */
    limit?: number
  }

  /**
   * MediaItem upsert
   */
  export type MediaItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * The filter to search for the MediaItem to update in case it exists.
     */
    where: MediaItemWhereUniqueInput
    /**
     * In case the MediaItem found by the `where` argument doesn't exist, create a new MediaItem with this data.
     */
    create: XOR<MediaItemCreateInput, MediaItemUncheckedCreateInput>
    /**
     * In case the MediaItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaItemUpdateInput, MediaItemUncheckedUpdateInput>
  }

  /**
   * MediaItem delete
   */
  export type MediaItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    /**
     * Filter which MediaItem to delete.
     */
    where: MediaItemWhereUniqueInput
  }

  /**
   * MediaItem deleteMany
   */
  export type MediaItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaItems to delete
     */
    where?: MediaItemWhereInput
    /**
     * Limit how many MediaItems to delete.
     */
    limit?: number
  }

  /**
   * MediaItem.brand
   */
  export type MediaItem$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
  }

  /**
   * MediaItem.category
   */
  export type MediaItem$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * MediaItem.product
   */
  export type MediaItem$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * MediaItem.createdBy
   */
  export type MediaItem$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MediaItem.updatedBy
   */
  export type MediaItem$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MediaItem without action
   */
  export type MediaItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
  }


  /**
   * Model ScrapingJob
   */

  export type AggregateScrapingJob = {
    _count: ScrapingJobCountAggregateOutputType | null
    _avg: ScrapingJobAvgAggregateOutputType | null
    _sum: ScrapingJobSumAggregateOutputType | null
    _min: ScrapingJobMinAggregateOutputType | null
    _max: ScrapingJobMaxAggregateOutputType | null
  }

  export type ScrapingJobAvgAggregateOutputType = {
    progress: number | null
  }

  export type ScrapingJobSumAggregateOutputType = {
    progress: number | null
  }

  export type ScrapingJobMinAggregateOutputType = {
    id: string | null
    name: string | null
    status: $Enums.ScrapingjobStatus | null
    type: $Enums.ScrapingjobType | null
    targetId: string | null
    targetName: string | null
    progress: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScrapingJobMaxAggregateOutputType = {
    id: string | null
    name: string | null
    status: $Enums.ScrapingjobStatus | null
    type: $Enums.ScrapingjobType | null
    targetId: string | null
    targetName: string | null
    progress: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScrapingJobCountAggregateOutputType = {
    id: number
    name: number
    status: number
    type: number
    targetId: number
    targetName: number
    progress: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScrapingJobAvgAggregateInputType = {
    progress?: true
  }

  export type ScrapingJobSumAggregateInputType = {
    progress?: true
  }

  export type ScrapingJobMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    targetId?: true
    targetName?: true
    progress?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScrapingJobMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    targetId?: true
    targetName?: true
    progress?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScrapingJobCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    type?: true
    targetId?: true
    targetName?: true
    progress?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScrapingJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapingJob to aggregate.
     */
    where?: ScrapingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingJobs to fetch.
     */
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScrapingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScrapingJobs
    **/
    _count?: true | ScrapingJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScrapingJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScrapingJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScrapingJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScrapingJobMaxAggregateInputType
  }

  export type GetScrapingJobAggregateType<T extends ScrapingJobAggregateArgs> = {
        [P in keyof T & keyof AggregateScrapingJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScrapingJob[P]>
      : GetScalarType<T[P], AggregateScrapingJob[P]>
  }




  export type ScrapingJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScrapingJobWhereInput
    orderBy?: ScrapingJobOrderByWithAggregationInput | ScrapingJobOrderByWithAggregationInput[]
    by: ScrapingJobScalarFieldEnum[] | ScrapingJobScalarFieldEnum
    having?: ScrapingJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScrapingJobCountAggregateInputType | true
    _avg?: ScrapingJobAvgAggregateInputType
    _sum?: ScrapingJobSumAggregateInputType
    _min?: ScrapingJobMinAggregateInputType
    _max?: ScrapingJobMaxAggregateInputType
  }

  export type ScrapingJobGroupByOutputType = {
    id: string
    name: string
    status: $Enums.ScrapingjobStatus
    type: $Enums.ScrapingjobType
    targetId: string | null
    targetName: string | null
    progress: number
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: ScrapingJobCountAggregateOutputType | null
    _avg: ScrapingJobAvgAggregateOutputType | null
    _sum: ScrapingJobSumAggregateOutputType | null
    _min: ScrapingJobMinAggregateOutputType | null
    _max: ScrapingJobMaxAggregateOutputType | null
  }

  type GetScrapingJobGroupByPayload<T extends ScrapingJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScrapingJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScrapingJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScrapingJobGroupByOutputType[P]>
            : GetScalarType<T[P], ScrapingJobGroupByOutputType[P]>
        }
      >
    >


  export type ScrapingJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    type?: boolean
    targetId?: boolean
    targetName?: boolean
    progress?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scrapingJob"]>



  export type ScrapingJobSelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
    type?: boolean
    targetId?: boolean
    targetName?: boolean
    progress?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScrapingJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "status" | "type" | "targetId" | "targetName" | "progress" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["scrapingJob"]>
  export type ScrapingJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ScrapingJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScrapingJob"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      status: $Enums.ScrapingjobStatus
      type: $Enums.ScrapingjobType
      targetId: string | null
      targetName: string | null
      progress: number
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scrapingJob"]>
    composites: {}
  }

  type ScrapingJobGetPayload<S extends boolean | null | undefined | ScrapingJobDefaultArgs> = $Result.GetResult<Prisma.$ScrapingJobPayload, S>

  type ScrapingJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScrapingJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScrapingJobCountAggregateInputType | true
    }

  export interface ScrapingJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScrapingJob'], meta: { name: 'ScrapingJob' } }
    /**
     * Find zero or one ScrapingJob that matches the filter.
     * @param {ScrapingJobFindUniqueArgs} args - Arguments to find a ScrapingJob
     * @example
     * // Get one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScrapingJobFindUniqueArgs>(args: SelectSubset<T, ScrapingJobFindUniqueArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScrapingJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScrapingJobFindUniqueOrThrowArgs} args - Arguments to find a ScrapingJob
     * @example
     * // Get one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScrapingJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ScrapingJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScrapingJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobFindFirstArgs} args - Arguments to find a ScrapingJob
     * @example
     * // Get one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScrapingJobFindFirstArgs>(args?: SelectSubset<T, ScrapingJobFindFirstArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScrapingJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobFindFirstOrThrowArgs} args - Arguments to find a ScrapingJob
     * @example
     * // Get one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScrapingJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ScrapingJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScrapingJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScrapingJobs
     * const scrapingJobs = await prisma.scrapingJob.findMany()
     * 
     * // Get first 10 ScrapingJobs
     * const scrapingJobs = await prisma.scrapingJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scrapingJobWithIdOnly = await prisma.scrapingJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScrapingJobFindManyArgs>(args?: SelectSubset<T, ScrapingJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScrapingJob.
     * @param {ScrapingJobCreateArgs} args - Arguments to create a ScrapingJob.
     * @example
     * // Create one ScrapingJob
     * const ScrapingJob = await prisma.scrapingJob.create({
     *   data: {
     *     // ... data to create a ScrapingJob
     *   }
     * })
     * 
     */
    create<T extends ScrapingJobCreateArgs>(args: SelectSubset<T, ScrapingJobCreateArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScrapingJobs.
     * @param {ScrapingJobCreateManyArgs} args - Arguments to create many ScrapingJobs.
     * @example
     * // Create many ScrapingJobs
     * const scrapingJob = await prisma.scrapingJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScrapingJobCreateManyArgs>(args?: SelectSubset<T, ScrapingJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ScrapingJob.
     * @param {ScrapingJobDeleteArgs} args - Arguments to delete one ScrapingJob.
     * @example
     * // Delete one ScrapingJob
     * const ScrapingJob = await prisma.scrapingJob.delete({
     *   where: {
     *     // ... filter to delete one ScrapingJob
     *   }
     * })
     * 
     */
    delete<T extends ScrapingJobDeleteArgs>(args: SelectSubset<T, ScrapingJobDeleteArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScrapingJob.
     * @param {ScrapingJobUpdateArgs} args - Arguments to update one ScrapingJob.
     * @example
     * // Update one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScrapingJobUpdateArgs>(args: SelectSubset<T, ScrapingJobUpdateArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScrapingJobs.
     * @param {ScrapingJobDeleteManyArgs} args - Arguments to filter ScrapingJobs to delete.
     * @example
     * // Delete a few ScrapingJobs
     * const { count } = await prisma.scrapingJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScrapingJobDeleteManyArgs>(args?: SelectSubset<T, ScrapingJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScrapingJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScrapingJobs
     * const scrapingJob = await prisma.scrapingJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScrapingJobUpdateManyArgs>(args: SelectSubset<T, ScrapingJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScrapingJob.
     * @param {ScrapingJobUpsertArgs} args - Arguments to update or create a ScrapingJob.
     * @example
     * // Update or create a ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.upsert({
     *   create: {
     *     // ... data to create a ScrapingJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScrapingJob we want to update
     *   }
     * })
     */
    upsert<T extends ScrapingJobUpsertArgs>(args: SelectSubset<T, ScrapingJobUpsertArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScrapingJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobCountArgs} args - Arguments to filter ScrapingJobs to count.
     * @example
     * // Count the number of ScrapingJobs
     * const count = await prisma.scrapingJob.count({
     *   where: {
     *     // ... the filter for the ScrapingJobs we want to count
     *   }
     * })
    **/
    count<T extends ScrapingJobCountArgs>(
      args?: Subset<T, ScrapingJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScrapingJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScrapingJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScrapingJobAggregateArgs>(args: Subset<T, ScrapingJobAggregateArgs>): Prisma.PrismaPromise<GetScrapingJobAggregateType<T>>

    /**
     * Group by ScrapingJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScrapingJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScrapingJobGroupByArgs['orderBy'] }
        : { orderBy?: ScrapingJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScrapingJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScrapingJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScrapingJob model
   */
  readonly fields: ScrapingJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScrapingJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScrapingJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScrapingJob model
   */
  interface ScrapingJobFieldRefs {
    readonly id: FieldRef<"ScrapingJob", 'String'>
    readonly name: FieldRef<"ScrapingJob", 'String'>
    readonly status: FieldRef<"ScrapingJob", 'ScrapingjobStatus'>
    readonly type: FieldRef<"ScrapingJob", 'ScrapingjobType'>
    readonly targetId: FieldRef<"ScrapingJob", 'String'>
    readonly targetName: FieldRef<"ScrapingJob", 'String'>
    readonly progress: FieldRef<"ScrapingJob", 'Float'>
    readonly userId: FieldRef<"ScrapingJob", 'String'>
    readonly createdAt: FieldRef<"ScrapingJob", 'DateTime'>
    readonly updatedAt: FieldRef<"ScrapingJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScrapingJob findUnique
   */
  export type ScrapingJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJob to fetch.
     */
    where: ScrapingJobWhereUniqueInput
  }

  /**
   * ScrapingJob findUniqueOrThrow
   */
  export type ScrapingJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJob to fetch.
     */
    where: ScrapingJobWhereUniqueInput
  }

  /**
   * ScrapingJob findFirst
   */
  export type ScrapingJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJob to fetch.
     */
    where?: ScrapingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingJobs to fetch.
     */
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapingJobs.
     */
    cursor?: ScrapingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapingJobs.
     */
    distinct?: ScrapingJobScalarFieldEnum | ScrapingJobScalarFieldEnum[]
  }

  /**
   * ScrapingJob findFirstOrThrow
   */
  export type ScrapingJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJob to fetch.
     */
    where?: ScrapingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingJobs to fetch.
     */
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapingJobs.
     */
    cursor?: ScrapingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapingJobs.
     */
    distinct?: ScrapingJobScalarFieldEnum | ScrapingJobScalarFieldEnum[]
  }

  /**
   * ScrapingJob findMany
   */
  export type ScrapingJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJobs to fetch.
     */
    where?: ScrapingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingJobs to fetch.
     */
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScrapingJobs.
     */
    cursor?: ScrapingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingJobs.
     */
    skip?: number
    distinct?: ScrapingJobScalarFieldEnum | ScrapingJobScalarFieldEnum[]
  }

  /**
   * ScrapingJob create
   */
  export type ScrapingJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * The data needed to create a ScrapingJob.
     */
    data: XOR<ScrapingJobCreateInput, ScrapingJobUncheckedCreateInput>
  }

  /**
   * ScrapingJob createMany
   */
  export type ScrapingJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScrapingJobs.
     */
    data: ScrapingJobCreateManyInput | ScrapingJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScrapingJob update
   */
  export type ScrapingJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * The data needed to update a ScrapingJob.
     */
    data: XOR<ScrapingJobUpdateInput, ScrapingJobUncheckedUpdateInput>
    /**
     * Choose, which ScrapingJob to update.
     */
    where: ScrapingJobWhereUniqueInput
  }

  /**
   * ScrapingJob updateMany
   */
  export type ScrapingJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScrapingJobs.
     */
    data: XOR<ScrapingJobUpdateManyMutationInput, ScrapingJobUncheckedUpdateManyInput>
    /**
     * Filter which ScrapingJobs to update
     */
    where?: ScrapingJobWhereInput
    /**
     * Limit how many ScrapingJobs to update.
     */
    limit?: number
  }

  /**
   * ScrapingJob upsert
   */
  export type ScrapingJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * The filter to search for the ScrapingJob to update in case it exists.
     */
    where: ScrapingJobWhereUniqueInput
    /**
     * In case the ScrapingJob found by the `where` argument doesn't exist, create a new ScrapingJob with this data.
     */
    create: XOR<ScrapingJobCreateInput, ScrapingJobUncheckedCreateInput>
    /**
     * In case the ScrapingJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScrapingJobUpdateInput, ScrapingJobUncheckedUpdateInput>
  }

  /**
   * ScrapingJob delete
   */
  export type ScrapingJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter which ScrapingJob to delete.
     */
    where: ScrapingJobWhereUniqueInput
  }

  /**
   * ScrapingJob deleteMany
   */
  export type ScrapingJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapingJobs to delete
     */
    where?: ScrapingJobWhereInput
    /**
     * Limit how many ScrapingJobs to delete.
     */
    limit?: number
  }

  /**
   * ScrapingJob without action
   */
  export type ScrapingJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapingJob
     */
    omit?: ScrapingJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
  }


  /**
   * Model PriceHistory
   */

  export type AggregatePriceHistory = {
    _count: PriceHistoryCountAggregateOutputType | null
    _avg: PriceHistoryAvgAggregateOutputType | null
    _sum: PriceHistorySumAggregateOutputType | null
    _min: PriceHistoryMinAggregateOutputType | null
    _max: PriceHistoryMaxAggregateOutputType | null
  }

  export type PriceHistoryAvgAggregateOutputType = {
    id: number | null
    oldPrice: number | null
    newPrice: number | null
  }

  export type PriceHistorySumAggregateOutputType = {
    id: number | null
    oldPrice: number | null
    newPrice: number | null
  }

  export type PriceHistoryMinAggregateOutputType = {
    id: number | null
    productId: string | null
    oldPrice: number | null
    newPrice: number | null
    changedAt: Date | null
  }

  export type PriceHistoryMaxAggregateOutputType = {
    id: number | null
    productId: string | null
    oldPrice: number | null
    newPrice: number | null
    changedAt: Date | null
  }

  export type PriceHistoryCountAggregateOutputType = {
    id: number
    productId: number
    oldPrice: number
    newPrice: number
    changedAt: number
    _all: number
  }


  export type PriceHistoryAvgAggregateInputType = {
    id?: true
    oldPrice?: true
    newPrice?: true
  }

  export type PriceHistorySumAggregateInputType = {
    id?: true
    oldPrice?: true
    newPrice?: true
  }

  export type PriceHistoryMinAggregateInputType = {
    id?: true
    productId?: true
    oldPrice?: true
    newPrice?: true
    changedAt?: true
  }

  export type PriceHistoryMaxAggregateInputType = {
    id?: true
    productId?: true
    oldPrice?: true
    newPrice?: true
    changedAt?: true
  }

  export type PriceHistoryCountAggregateInputType = {
    id?: true
    productId?: true
    oldPrice?: true
    newPrice?: true
    changedAt?: true
    _all?: true
  }

  export type PriceHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceHistory to aggregate.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceHistories
    **/
    _count?: true | PriceHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriceHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PriceHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceHistoryMaxAggregateInputType
  }

  export type GetPriceHistoryAggregateType<T extends PriceHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceHistory[P]>
      : GetScalarType<T[P], AggregatePriceHistory[P]>
  }




  export type PriceHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceHistoryWhereInput
    orderBy?: PriceHistoryOrderByWithAggregationInput | PriceHistoryOrderByWithAggregationInput[]
    by: PriceHistoryScalarFieldEnum[] | PriceHistoryScalarFieldEnum
    having?: PriceHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceHistoryCountAggregateInputType | true
    _avg?: PriceHistoryAvgAggregateInputType
    _sum?: PriceHistorySumAggregateInputType
    _min?: PriceHistoryMinAggregateInputType
    _max?: PriceHistoryMaxAggregateInputType
  }

  export type PriceHistoryGroupByOutputType = {
    id: number
    productId: string
    oldPrice: number
    newPrice: number
    changedAt: Date
    _count: PriceHistoryCountAggregateOutputType | null
    _avg: PriceHistoryAvgAggregateOutputType | null
    _sum: PriceHistorySumAggregateOutputType | null
    _min: PriceHistoryMinAggregateOutputType | null
    _max: PriceHistoryMaxAggregateOutputType | null
  }

  type GetPriceHistoryGroupByPayload<T extends PriceHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], PriceHistoryGroupByOutputType[P]>
        }
      >
    >


  export type PriceHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    oldPrice?: boolean
    newPrice?: boolean
    changedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceHistory"]>



  export type PriceHistorySelectScalar = {
    id?: boolean
    productId?: boolean
    oldPrice?: boolean
    newPrice?: boolean
    changedAt?: boolean
  }

  export type PriceHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "oldPrice" | "newPrice" | "changedAt", ExtArgs["result"]["priceHistory"]>
  export type PriceHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $PriceHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceHistory"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: string
      oldPrice: number
      newPrice: number
      changedAt: Date
    }, ExtArgs["result"]["priceHistory"]>
    composites: {}
  }

  type PriceHistoryGetPayload<S extends boolean | null | undefined | PriceHistoryDefaultArgs> = $Result.GetResult<Prisma.$PriceHistoryPayload, S>

  type PriceHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PriceHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PriceHistoryCountAggregateInputType | true
    }

  export interface PriceHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceHistory'], meta: { name: 'PriceHistory' } }
    /**
     * Find zero or one PriceHistory that matches the filter.
     * @param {PriceHistoryFindUniqueArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PriceHistoryFindUniqueArgs>(args: SelectSubset<T, PriceHistoryFindUniqueArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PriceHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PriceHistoryFindUniqueOrThrowArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PriceHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PriceHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindFirstArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PriceHistoryFindFirstArgs>(args?: SelectSubset<T, PriceHistoryFindFirstArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindFirstOrThrowArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PriceHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PriceHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PriceHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceHistories
     * const priceHistories = await prisma.priceHistory.findMany()
     * 
     * // Get first 10 PriceHistories
     * const priceHistories = await prisma.priceHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceHistoryWithIdOnly = await prisma.priceHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PriceHistoryFindManyArgs>(args?: SelectSubset<T, PriceHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PriceHistory.
     * @param {PriceHistoryCreateArgs} args - Arguments to create a PriceHistory.
     * @example
     * // Create one PriceHistory
     * const PriceHistory = await prisma.priceHistory.create({
     *   data: {
     *     // ... data to create a PriceHistory
     *   }
     * })
     * 
     */
    create<T extends PriceHistoryCreateArgs>(args: SelectSubset<T, PriceHistoryCreateArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PriceHistories.
     * @param {PriceHistoryCreateManyArgs} args - Arguments to create many PriceHistories.
     * @example
     * // Create many PriceHistories
     * const priceHistory = await prisma.priceHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PriceHistoryCreateManyArgs>(args?: SelectSubset<T, PriceHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PriceHistory.
     * @param {PriceHistoryDeleteArgs} args - Arguments to delete one PriceHistory.
     * @example
     * // Delete one PriceHistory
     * const PriceHistory = await prisma.priceHistory.delete({
     *   where: {
     *     // ... filter to delete one PriceHistory
     *   }
     * })
     * 
     */
    delete<T extends PriceHistoryDeleteArgs>(args: SelectSubset<T, PriceHistoryDeleteArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PriceHistory.
     * @param {PriceHistoryUpdateArgs} args - Arguments to update one PriceHistory.
     * @example
     * // Update one PriceHistory
     * const priceHistory = await prisma.priceHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PriceHistoryUpdateArgs>(args: SelectSubset<T, PriceHistoryUpdateArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PriceHistories.
     * @param {PriceHistoryDeleteManyArgs} args - Arguments to filter PriceHistories to delete.
     * @example
     * // Delete a few PriceHistories
     * const { count } = await prisma.priceHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PriceHistoryDeleteManyArgs>(args?: SelectSubset<T, PriceHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceHistories
     * const priceHistory = await prisma.priceHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PriceHistoryUpdateManyArgs>(args: SelectSubset<T, PriceHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PriceHistory.
     * @param {PriceHistoryUpsertArgs} args - Arguments to update or create a PriceHistory.
     * @example
     * // Update or create a PriceHistory
     * const priceHistory = await prisma.priceHistory.upsert({
     *   create: {
     *     // ... data to create a PriceHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceHistory we want to update
     *   }
     * })
     */
    upsert<T extends PriceHistoryUpsertArgs>(args: SelectSubset<T, PriceHistoryUpsertArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PriceHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryCountArgs} args - Arguments to filter PriceHistories to count.
     * @example
     * // Count the number of PriceHistories
     * const count = await prisma.priceHistory.count({
     *   where: {
     *     // ... the filter for the PriceHistories we want to count
     *   }
     * })
    **/
    count<T extends PriceHistoryCountArgs>(
      args?: Subset<T, PriceHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceHistoryAggregateArgs>(args: Subset<T, PriceHistoryAggregateArgs>): Prisma.PrismaPromise<GetPriceHistoryAggregateType<T>>

    /**
     * Group by PriceHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceHistoryGroupByArgs['orderBy'] }
        : { orderBy?: PriceHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceHistory model
   */
  readonly fields: PriceHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PriceHistory model
   */
  interface PriceHistoryFieldRefs {
    readonly id: FieldRef<"PriceHistory", 'Int'>
    readonly productId: FieldRef<"PriceHistory", 'String'>
    readonly oldPrice: FieldRef<"PriceHistory", 'Float'>
    readonly newPrice: FieldRef<"PriceHistory", 'Float'>
    readonly changedAt: FieldRef<"PriceHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PriceHistory findUnique
   */
  export type PriceHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory findUniqueOrThrow
   */
  export type PriceHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory findFirst
   */
  export type PriceHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceHistories.
     */
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory findFirstOrThrow
   */
  export type PriceHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceHistories.
     */
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory findMany
   */
  export type PriceHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistories to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory create
   */
  export type PriceHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceHistory.
     */
    data: XOR<PriceHistoryCreateInput, PriceHistoryUncheckedCreateInput>
  }

  /**
   * PriceHistory createMany
   */
  export type PriceHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceHistories.
     */
    data: PriceHistoryCreateManyInput | PriceHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PriceHistory update
   */
  export type PriceHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceHistory.
     */
    data: XOR<PriceHistoryUpdateInput, PriceHistoryUncheckedUpdateInput>
    /**
     * Choose, which PriceHistory to update.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory updateMany
   */
  export type PriceHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceHistories.
     */
    data: XOR<PriceHistoryUpdateManyMutationInput, PriceHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PriceHistories to update
     */
    where?: PriceHistoryWhereInput
    /**
     * Limit how many PriceHistories to update.
     */
    limit?: number
  }

  /**
   * PriceHistory upsert
   */
  export type PriceHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceHistory to update in case it exists.
     */
    where: PriceHistoryWhereUniqueInput
    /**
     * In case the PriceHistory found by the `where` argument doesn't exist, create a new PriceHistory with this data.
     */
    create: XOR<PriceHistoryCreateInput, PriceHistoryUncheckedCreateInput>
    /**
     * In case the PriceHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceHistoryUpdateInput, PriceHistoryUncheckedUpdateInput>
  }

  /**
   * PriceHistory delete
   */
  export type PriceHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter which PriceHistory to delete.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory deleteMany
   */
  export type PriceHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceHistories to delete
     */
    where?: PriceHistoryWhereInput
    /**
     * Limit how many PriceHistories to delete.
     */
    limit?: number
  }

  /**
   * PriceHistory without action
   */
  export type PriceHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
  }


  /**
   * Model ColorHistory
   */

  export type AggregateColorHistory = {
    _count: ColorHistoryCountAggregateOutputType | null
    _avg: ColorHistoryAvgAggregateOutputType | null
    _sum: ColorHistorySumAggregateOutputType | null
    _min: ColorHistoryMinAggregateOutputType | null
    _max: ColorHistoryMaxAggregateOutputType | null
  }

  export type ColorHistoryAvgAggregateOutputType = {
    id: number | null
  }

  export type ColorHistorySumAggregateOutputType = {
    id: number | null
  }

  export type ColorHistoryMinAggregateOutputType = {
    id: number | null
    productId: string | null
    action: string | null
    colorName: string | null
    colorCode: string | null
    hexColor: string | null
    changedAt: Date | null
  }

  export type ColorHistoryMaxAggregateOutputType = {
    id: number | null
    productId: string | null
    action: string | null
    colorName: string | null
    colorCode: string | null
    hexColor: string | null
    changedAt: Date | null
  }

  export type ColorHistoryCountAggregateOutputType = {
    id: number
    productId: number
    action: number
    colorName: number
    colorCode: number
    hexColor: number
    changedAt: number
    _all: number
  }


  export type ColorHistoryAvgAggregateInputType = {
    id?: true
  }

  export type ColorHistorySumAggregateInputType = {
    id?: true
  }

  export type ColorHistoryMinAggregateInputType = {
    id?: true
    productId?: true
    action?: true
    colorName?: true
    colorCode?: true
    hexColor?: true
    changedAt?: true
  }

  export type ColorHistoryMaxAggregateInputType = {
    id?: true
    productId?: true
    action?: true
    colorName?: true
    colorCode?: true
    hexColor?: true
    changedAt?: true
  }

  export type ColorHistoryCountAggregateInputType = {
    id?: true
    productId?: true
    action?: true
    colorName?: true
    colorCode?: true
    hexColor?: true
    changedAt?: true
    _all?: true
  }

  export type ColorHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ColorHistory to aggregate.
     */
    where?: ColorHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColorHistories to fetch.
     */
    orderBy?: ColorHistoryOrderByWithRelationInput | ColorHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColorHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColorHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColorHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ColorHistories
    **/
    _count?: true | ColorHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ColorHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ColorHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColorHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColorHistoryMaxAggregateInputType
  }

  export type GetColorHistoryAggregateType<T extends ColorHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateColorHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColorHistory[P]>
      : GetScalarType<T[P], AggregateColorHistory[P]>
  }




  export type ColorHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColorHistoryWhereInput
    orderBy?: ColorHistoryOrderByWithAggregationInput | ColorHistoryOrderByWithAggregationInput[]
    by: ColorHistoryScalarFieldEnum[] | ColorHistoryScalarFieldEnum
    having?: ColorHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColorHistoryCountAggregateInputType | true
    _avg?: ColorHistoryAvgAggregateInputType
    _sum?: ColorHistorySumAggregateInputType
    _min?: ColorHistoryMinAggregateInputType
    _max?: ColorHistoryMaxAggregateInputType
  }

  export type ColorHistoryGroupByOutputType = {
    id: number
    productId: string
    action: string
    colorName: string
    colorCode: string | null
    hexColor: string | null
    changedAt: Date
    _count: ColorHistoryCountAggregateOutputType | null
    _avg: ColorHistoryAvgAggregateOutputType | null
    _sum: ColorHistorySumAggregateOutputType | null
    _min: ColorHistoryMinAggregateOutputType | null
    _max: ColorHistoryMaxAggregateOutputType | null
  }

  type GetColorHistoryGroupByPayload<T extends ColorHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColorHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColorHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColorHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ColorHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ColorHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    action?: boolean
    colorName?: boolean
    colorCode?: boolean
    hexColor?: boolean
    changedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["colorHistory"]>



  export type ColorHistorySelectScalar = {
    id?: boolean
    productId?: boolean
    action?: boolean
    colorName?: boolean
    colorCode?: boolean
    hexColor?: boolean
    changedAt?: boolean
  }

  export type ColorHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "action" | "colorName" | "colorCode" | "hexColor" | "changedAt", ExtArgs["result"]["colorHistory"]>
  export type ColorHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ColorHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ColorHistory"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: string
      action: string
      colorName: string
      colorCode: string | null
      hexColor: string | null
      changedAt: Date
    }, ExtArgs["result"]["colorHistory"]>
    composites: {}
  }

  type ColorHistoryGetPayload<S extends boolean | null | undefined | ColorHistoryDefaultArgs> = $Result.GetResult<Prisma.$ColorHistoryPayload, S>

  type ColorHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ColorHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ColorHistoryCountAggregateInputType | true
    }

  export interface ColorHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ColorHistory'], meta: { name: 'ColorHistory' } }
    /**
     * Find zero or one ColorHistory that matches the filter.
     * @param {ColorHistoryFindUniqueArgs} args - Arguments to find a ColorHistory
     * @example
     * // Get one ColorHistory
     * const colorHistory = await prisma.colorHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ColorHistoryFindUniqueArgs>(args: SelectSubset<T, ColorHistoryFindUniqueArgs<ExtArgs>>): Prisma__ColorHistoryClient<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ColorHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ColorHistoryFindUniqueOrThrowArgs} args - Arguments to find a ColorHistory
     * @example
     * // Get one ColorHistory
     * const colorHistory = await prisma.colorHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ColorHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ColorHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ColorHistoryClient<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ColorHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorHistoryFindFirstArgs} args - Arguments to find a ColorHistory
     * @example
     * // Get one ColorHistory
     * const colorHistory = await prisma.colorHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ColorHistoryFindFirstArgs>(args?: SelectSubset<T, ColorHistoryFindFirstArgs<ExtArgs>>): Prisma__ColorHistoryClient<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ColorHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorHistoryFindFirstOrThrowArgs} args - Arguments to find a ColorHistory
     * @example
     * // Get one ColorHistory
     * const colorHistory = await prisma.colorHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ColorHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ColorHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ColorHistoryClient<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ColorHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ColorHistories
     * const colorHistories = await prisma.colorHistory.findMany()
     * 
     * // Get first 10 ColorHistories
     * const colorHistories = await prisma.colorHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colorHistoryWithIdOnly = await prisma.colorHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ColorHistoryFindManyArgs>(args?: SelectSubset<T, ColorHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ColorHistory.
     * @param {ColorHistoryCreateArgs} args - Arguments to create a ColorHistory.
     * @example
     * // Create one ColorHistory
     * const ColorHistory = await prisma.colorHistory.create({
     *   data: {
     *     // ... data to create a ColorHistory
     *   }
     * })
     * 
     */
    create<T extends ColorHistoryCreateArgs>(args: SelectSubset<T, ColorHistoryCreateArgs<ExtArgs>>): Prisma__ColorHistoryClient<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ColorHistories.
     * @param {ColorHistoryCreateManyArgs} args - Arguments to create many ColorHistories.
     * @example
     * // Create many ColorHistories
     * const colorHistory = await prisma.colorHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ColorHistoryCreateManyArgs>(args?: SelectSubset<T, ColorHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ColorHistory.
     * @param {ColorHistoryDeleteArgs} args - Arguments to delete one ColorHistory.
     * @example
     * // Delete one ColorHistory
     * const ColorHistory = await prisma.colorHistory.delete({
     *   where: {
     *     // ... filter to delete one ColorHistory
     *   }
     * })
     * 
     */
    delete<T extends ColorHistoryDeleteArgs>(args: SelectSubset<T, ColorHistoryDeleteArgs<ExtArgs>>): Prisma__ColorHistoryClient<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ColorHistory.
     * @param {ColorHistoryUpdateArgs} args - Arguments to update one ColorHistory.
     * @example
     * // Update one ColorHistory
     * const colorHistory = await prisma.colorHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ColorHistoryUpdateArgs>(args: SelectSubset<T, ColorHistoryUpdateArgs<ExtArgs>>): Prisma__ColorHistoryClient<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ColorHistories.
     * @param {ColorHistoryDeleteManyArgs} args - Arguments to filter ColorHistories to delete.
     * @example
     * // Delete a few ColorHistories
     * const { count } = await prisma.colorHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ColorHistoryDeleteManyArgs>(args?: SelectSubset<T, ColorHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ColorHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ColorHistories
     * const colorHistory = await prisma.colorHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ColorHistoryUpdateManyArgs>(args: SelectSubset<T, ColorHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ColorHistory.
     * @param {ColorHistoryUpsertArgs} args - Arguments to update or create a ColorHistory.
     * @example
     * // Update or create a ColorHistory
     * const colorHistory = await prisma.colorHistory.upsert({
     *   create: {
     *     // ... data to create a ColorHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ColorHistory we want to update
     *   }
     * })
     */
    upsert<T extends ColorHistoryUpsertArgs>(args: SelectSubset<T, ColorHistoryUpsertArgs<ExtArgs>>): Prisma__ColorHistoryClient<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ColorHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorHistoryCountArgs} args - Arguments to filter ColorHistories to count.
     * @example
     * // Count the number of ColorHistories
     * const count = await prisma.colorHistory.count({
     *   where: {
     *     // ... the filter for the ColorHistories we want to count
     *   }
     * })
    **/
    count<T extends ColorHistoryCountArgs>(
      args?: Subset<T, ColorHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColorHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ColorHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColorHistoryAggregateArgs>(args: Subset<T, ColorHistoryAggregateArgs>): Prisma.PrismaPromise<GetColorHistoryAggregateType<T>>

    /**
     * Group by ColorHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColorHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColorHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ColorHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColorHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColorHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ColorHistory model
   */
  readonly fields: ColorHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ColorHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ColorHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ColorHistory model
   */
  interface ColorHistoryFieldRefs {
    readonly id: FieldRef<"ColorHistory", 'Int'>
    readonly productId: FieldRef<"ColorHistory", 'String'>
    readonly action: FieldRef<"ColorHistory", 'String'>
    readonly colorName: FieldRef<"ColorHistory", 'String'>
    readonly colorCode: FieldRef<"ColorHistory", 'String'>
    readonly hexColor: FieldRef<"ColorHistory", 'String'>
    readonly changedAt: FieldRef<"ColorHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ColorHistory findUnique
   */
  export type ColorHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ColorHistory to fetch.
     */
    where: ColorHistoryWhereUniqueInput
  }

  /**
   * ColorHistory findUniqueOrThrow
   */
  export type ColorHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ColorHistory to fetch.
     */
    where: ColorHistoryWhereUniqueInput
  }

  /**
   * ColorHistory findFirst
   */
  export type ColorHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ColorHistory to fetch.
     */
    where?: ColorHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColorHistories to fetch.
     */
    orderBy?: ColorHistoryOrderByWithRelationInput | ColorHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ColorHistories.
     */
    cursor?: ColorHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColorHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColorHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ColorHistories.
     */
    distinct?: ColorHistoryScalarFieldEnum | ColorHistoryScalarFieldEnum[]
  }

  /**
   * ColorHistory findFirstOrThrow
   */
  export type ColorHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ColorHistory to fetch.
     */
    where?: ColorHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColorHistories to fetch.
     */
    orderBy?: ColorHistoryOrderByWithRelationInput | ColorHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ColorHistories.
     */
    cursor?: ColorHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColorHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColorHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ColorHistories.
     */
    distinct?: ColorHistoryScalarFieldEnum | ColorHistoryScalarFieldEnum[]
  }

  /**
   * ColorHistory findMany
   */
  export type ColorHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ColorHistories to fetch.
     */
    where?: ColorHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColorHistories to fetch.
     */
    orderBy?: ColorHistoryOrderByWithRelationInput | ColorHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ColorHistories.
     */
    cursor?: ColorHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColorHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColorHistories.
     */
    skip?: number
    distinct?: ColorHistoryScalarFieldEnum | ColorHistoryScalarFieldEnum[]
  }

  /**
   * ColorHistory create
   */
  export type ColorHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ColorHistory.
     */
    data: XOR<ColorHistoryCreateInput, ColorHistoryUncheckedCreateInput>
  }

  /**
   * ColorHistory createMany
   */
  export type ColorHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ColorHistories.
     */
    data: ColorHistoryCreateManyInput | ColorHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ColorHistory update
   */
  export type ColorHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ColorHistory.
     */
    data: XOR<ColorHistoryUpdateInput, ColorHistoryUncheckedUpdateInput>
    /**
     * Choose, which ColorHistory to update.
     */
    where: ColorHistoryWhereUniqueInput
  }

  /**
   * ColorHistory updateMany
   */
  export type ColorHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ColorHistories.
     */
    data: XOR<ColorHistoryUpdateManyMutationInput, ColorHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ColorHistories to update
     */
    where?: ColorHistoryWhereInput
    /**
     * Limit how many ColorHistories to update.
     */
    limit?: number
  }

  /**
   * ColorHistory upsert
   */
  export type ColorHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ColorHistory to update in case it exists.
     */
    where: ColorHistoryWhereUniqueInput
    /**
     * In case the ColorHistory found by the `where` argument doesn't exist, create a new ColorHistory with this data.
     */
    create: XOR<ColorHistoryCreateInput, ColorHistoryUncheckedCreateInput>
    /**
     * In case the ColorHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColorHistoryUpdateInput, ColorHistoryUncheckedUpdateInput>
  }

  /**
   * ColorHistory delete
   */
  export type ColorHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    /**
     * Filter which ColorHistory to delete.
     */
    where: ColorHistoryWhereUniqueInput
  }

  /**
   * ColorHistory deleteMany
   */
  export type ColorHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ColorHistories to delete
     */
    where?: ColorHistoryWhereInput
    /**
     * Limit how many ColorHistories to delete.
     */
    limit?: number
  }

  /**
   * ColorHistory without action
   */
  export type ColorHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
  }


  /**
   * Model SizeHistory
   */

  export type AggregateSizeHistory = {
    _count: SizeHistoryCountAggregateOutputType | null
    _avg: SizeHistoryAvgAggregateOutputType | null
    _sum: SizeHistorySumAggregateOutputType | null
    _min: SizeHistoryMinAggregateOutputType | null
    _max: SizeHistoryMaxAggregateOutputType | null
  }

  export type SizeHistoryAvgAggregateOutputType = {
    id: number | null
  }

  export type SizeHistorySumAggregateOutputType = {
    id: number | null
  }

  export type SizeHistoryMinAggregateOutputType = {
    id: number | null
    productId: string | null
    colorId: string | null
    action: string | null
    size: string | null
    availability: string | null
    changedAt: Date | null
  }

  export type SizeHistoryMaxAggregateOutputType = {
    id: number | null
    productId: string | null
    colorId: string | null
    action: string | null
    size: string | null
    availability: string | null
    changedAt: Date | null
  }

  export type SizeHistoryCountAggregateOutputType = {
    id: number
    productId: number
    colorId: number
    action: number
    size: number
    availability: number
    changedAt: number
    _all: number
  }


  export type SizeHistoryAvgAggregateInputType = {
    id?: true
  }

  export type SizeHistorySumAggregateInputType = {
    id?: true
  }

  export type SizeHistoryMinAggregateInputType = {
    id?: true
    productId?: true
    colorId?: true
    action?: true
    size?: true
    availability?: true
    changedAt?: true
  }

  export type SizeHistoryMaxAggregateInputType = {
    id?: true
    productId?: true
    colorId?: true
    action?: true
    size?: true
    availability?: true
    changedAt?: true
  }

  export type SizeHistoryCountAggregateInputType = {
    id?: true
    productId?: true
    colorId?: true
    action?: true
    size?: true
    availability?: true
    changedAt?: true
    _all?: true
  }

  export type SizeHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeHistory to aggregate.
     */
    where?: SizeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeHistories to fetch.
     */
    orderBy?: SizeHistoryOrderByWithRelationInput | SizeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SizeHistories
    **/
    _count?: true | SizeHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SizeHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SizeHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeHistoryMaxAggregateInputType
  }

  export type GetSizeHistoryAggregateType<T extends SizeHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSizeHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSizeHistory[P]>
      : GetScalarType<T[P], AggregateSizeHistory[P]>
  }




  export type SizeHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeHistoryWhereInput
    orderBy?: SizeHistoryOrderByWithAggregationInput | SizeHistoryOrderByWithAggregationInput[]
    by: SizeHistoryScalarFieldEnum[] | SizeHistoryScalarFieldEnum
    having?: SizeHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeHistoryCountAggregateInputType | true
    _avg?: SizeHistoryAvgAggregateInputType
    _sum?: SizeHistorySumAggregateInputType
    _min?: SizeHistoryMinAggregateInputType
    _max?: SizeHistoryMaxAggregateInputType
  }

  export type SizeHistoryGroupByOutputType = {
    id: number
    productId: string
    colorId: string | null
    action: string
    size: string
    availability: string | null
    changedAt: Date
    _count: SizeHistoryCountAggregateOutputType | null
    _avg: SizeHistoryAvgAggregateOutputType | null
    _sum: SizeHistorySumAggregateOutputType | null
    _min: SizeHistoryMinAggregateOutputType | null
    _max: SizeHistoryMaxAggregateOutputType | null
  }

  type GetSizeHistoryGroupByPayload<T extends SizeHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], SizeHistoryGroupByOutputType[P]>
        }
      >
    >


  export type SizeHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    colorId?: boolean
    action?: boolean
    size?: boolean
    availability?: boolean
    changedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizeHistory"]>



  export type SizeHistorySelectScalar = {
    id?: boolean
    productId?: boolean
    colorId?: boolean
    action?: boolean
    size?: boolean
    availability?: boolean
    changedAt?: boolean
  }

  export type SizeHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "colorId" | "action" | "size" | "availability" | "changedAt", ExtArgs["result"]["sizeHistory"]>
  export type SizeHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $SizeHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SizeHistory"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: string
      colorId: string | null
      action: string
      size: string
      availability: string | null
      changedAt: Date
    }, ExtArgs["result"]["sizeHistory"]>
    composites: {}
  }

  type SizeHistoryGetPayload<S extends boolean | null | undefined | SizeHistoryDefaultArgs> = $Result.GetResult<Prisma.$SizeHistoryPayload, S>

  type SizeHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeHistoryCountAggregateInputType | true
    }

  export interface SizeHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SizeHistory'], meta: { name: 'SizeHistory' } }
    /**
     * Find zero or one SizeHistory that matches the filter.
     * @param {SizeHistoryFindUniqueArgs} args - Arguments to find a SizeHistory
     * @example
     * // Get one SizeHistory
     * const sizeHistory = await prisma.sizeHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeHistoryFindUniqueArgs>(args: SelectSubset<T, SizeHistoryFindUniqueArgs<ExtArgs>>): Prisma__SizeHistoryClient<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SizeHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeHistoryFindUniqueOrThrowArgs} args - Arguments to find a SizeHistory
     * @example
     * // Get one SizeHistory
     * const sizeHistory = await prisma.sizeHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeHistoryClient<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeHistoryFindFirstArgs} args - Arguments to find a SizeHistory
     * @example
     * // Get one SizeHistory
     * const sizeHistory = await prisma.sizeHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeHistoryFindFirstArgs>(args?: SelectSubset<T, SizeHistoryFindFirstArgs<ExtArgs>>): Prisma__SizeHistoryClient<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeHistoryFindFirstOrThrowArgs} args - Arguments to find a SizeHistory
     * @example
     * // Get one SizeHistory
     * const sizeHistory = await prisma.sizeHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeHistoryClient<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SizeHistories
     * const sizeHistories = await prisma.sizeHistory.findMany()
     * 
     * // Get first 10 SizeHistories
     * const sizeHistories = await prisma.sizeHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeHistoryWithIdOnly = await prisma.sizeHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeHistoryFindManyArgs>(args?: SelectSubset<T, SizeHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SizeHistory.
     * @param {SizeHistoryCreateArgs} args - Arguments to create a SizeHistory.
     * @example
     * // Create one SizeHistory
     * const SizeHistory = await prisma.sizeHistory.create({
     *   data: {
     *     // ... data to create a SizeHistory
     *   }
     * })
     * 
     */
    create<T extends SizeHistoryCreateArgs>(args: SelectSubset<T, SizeHistoryCreateArgs<ExtArgs>>): Prisma__SizeHistoryClient<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SizeHistories.
     * @param {SizeHistoryCreateManyArgs} args - Arguments to create many SizeHistories.
     * @example
     * // Create many SizeHistories
     * const sizeHistory = await prisma.sizeHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeHistoryCreateManyArgs>(args?: SelectSubset<T, SizeHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SizeHistory.
     * @param {SizeHistoryDeleteArgs} args - Arguments to delete one SizeHistory.
     * @example
     * // Delete one SizeHistory
     * const SizeHistory = await prisma.sizeHistory.delete({
     *   where: {
     *     // ... filter to delete one SizeHistory
     *   }
     * })
     * 
     */
    delete<T extends SizeHistoryDeleteArgs>(args: SelectSubset<T, SizeHistoryDeleteArgs<ExtArgs>>): Prisma__SizeHistoryClient<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SizeHistory.
     * @param {SizeHistoryUpdateArgs} args - Arguments to update one SizeHistory.
     * @example
     * // Update one SizeHistory
     * const sizeHistory = await prisma.sizeHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeHistoryUpdateArgs>(args: SelectSubset<T, SizeHistoryUpdateArgs<ExtArgs>>): Prisma__SizeHistoryClient<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SizeHistories.
     * @param {SizeHistoryDeleteManyArgs} args - Arguments to filter SizeHistories to delete.
     * @example
     * // Delete a few SizeHistories
     * const { count } = await prisma.sizeHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeHistoryDeleteManyArgs>(args?: SelectSubset<T, SizeHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SizeHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SizeHistories
     * const sizeHistory = await prisma.sizeHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeHistoryUpdateManyArgs>(args: SelectSubset<T, SizeHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SizeHistory.
     * @param {SizeHistoryUpsertArgs} args - Arguments to update or create a SizeHistory.
     * @example
     * // Update or create a SizeHistory
     * const sizeHistory = await prisma.sizeHistory.upsert({
     *   create: {
     *     // ... data to create a SizeHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SizeHistory we want to update
     *   }
     * })
     */
    upsert<T extends SizeHistoryUpsertArgs>(args: SelectSubset<T, SizeHistoryUpsertArgs<ExtArgs>>): Prisma__SizeHistoryClient<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SizeHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeHistoryCountArgs} args - Arguments to filter SizeHistories to count.
     * @example
     * // Count the number of SizeHistories
     * const count = await prisma.sizeHistory.count({
     *   where: {
     *     // ... the filter for the SizeHistories we want to count
     *   }
     * })
    **/
    count<T extends SizeHistoryCountArgs>(
      args?: Subset<T, SizeHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SizeHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeHistoryAggregateArgs>(args: Subset<T, SizeHistoryAggregateArgs>): Prisma.PrismaPromise<GetSizeHistoryAggregateType<T>>

    /**
     * Group by SizeHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeHistoryGroupByArgs['orderBy'] }
        : { orderBy?: SizeHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SizeHistory model
   */
  readonly fields: SizeHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SizeHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SizeHistory model
   */
  interface SizeHistoryFieldRefs {
    readonly id: FieldRef<"SizeHistory", 'Int'>
    readonly productId: FieldRef<"SizeHistory", 'String'>
    readonly colorId: FieldRef<"SizeHistory", 'String'>
    readonly action: FieldRef<"SizeHistory", 'String'>
    readonly size: FieldRef<"SizeHistory", 'String'>
    readonly availability: FieldRef<"SizeHistory", 'String'>
    readonly changedAt: FieldRef<"SizeHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SizeHistory findUnique
   */
  export type SizeHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SizeHistory to fetch.
     */
    where: SizeHistoryWhereUniqueInput
  }

  /**
   * SizeHistory findUniqueOrThrow
   */
  export type SizeHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SizeHistory to fetch.
     */
    where: SizeHistoryWhereUniqueInput
  }

  /**
   * SizeHistory findFirst
   */
  export type SizeHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SizeHistory to fetch.
     */
    where?: SizeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeHistories to fetch.
     */
    orderBy?: SizeHistoryOrderByWithRelationInput | SizeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeHistories.
     */
    cursor?: SizeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeHistories.
     */
    distinct?: SizeHistoryScalarFieldEnum | SizeHistoryScalarFieldEnum[]
  }

  /**
   * SizeHistory findFirstOrThrow
   */
  export type SizeHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SizeHistory to fetch.
     */
    where?: SizeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeHistories to fetch.
     */
    orderBy?: SizeHistoryOrderByWithRelationInput | SizeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeHistories.
     */
    cursor?: SizeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeHistories.
     */
    distinct?: SizeHistoryScalarFieldEnum | SizeHistoryScalarFieldEnum[]
  }

  /**
   * SizeHistory findMany
   */
  export type SizeHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SizeHistories to fetch.
     */
    where?: SizeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeHistories to fetch.
     */
    orderBy?: SizeHistoryOrderByWithRelationInput | SizeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SizeHistories.
     */
    cursor?: SizeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeHistories.
     */
    skip?: number
    distinct?: SizeHistoryScalarFieldEnum | SizeHistoryScalarFieldEnum[]
  }

  /**
   * SizeHistory create
   */
  export type SizeHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a SizeHistory.
     */
    data: XOR<SizeHistoryCreateInput, SizeHistoryUncheckedCreateInput>
  }

  /**
   * SizeHistory createMany
   */
  export type SizeHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SizeHistories.
     */
    data: SizeHistoryCreateManyInput | SizeHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SizeHistory update
   */
  export type SizeHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a SizeHistory.
     */
    data: XOR<SizeHistoryUpdateInput, SizeHistoryUncheckedUpdateInput>
    /**
     * Choose, which SizeHistory to update.
     */
    where: SizeHistoryWhereUniqueInput
  }

  /**
   * SizeHistory updateMany
   */
  export type SizeHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SizeHistories.
     */
    data: XOR<SizeHistoryUpdateManyMutationInput, SizeHistoryUncheckedUpdateManyInput>
    /**
     * Filter which SizeHistories to update
     */
    where?: SizeHistoryWhereInput
    /**
     * Limit how many SizeHistories to update.
     */
    limit?: number
  }

  /**
   * SizeHistory upsert
   */
  export type SizeHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the SizeHistory to update in case it exists.
     */
    where: SizeHistoryWhereUniqueInput
    /**
     * In case the SizeHistory found by the `where` argument doesn't exist, create a new SizeHistory with this data.
     */
    create: XOR<SizeHistoryCreateInput, SizeHistoryUncheckedCreateInput>
    /**
     * In case the SizeHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeHistoryUpdateInput, SizeHistoryUncheckedUpdateInput>
  }

  /**
   * SizeHistory delete
   */
  export type SizeHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    /**
     * Filter which SizeHistory to delete.
     */
    where: SizeHistoryWhereUniqueInput
  }

  /**
   * SizeHistory deleteMany
   */
  export type SizeHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeHistories to delete
     */
    where?: SizeHistoryWhereInput
    /**
     * Limit how many SizeHistories to delete.
     */
    limit?: number
  }

  /**
   * SizeHistory without action
   */
  export type SizeHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    brandId: number | null
  }

  export type ProductSumAggregateOutputType = {
    brandId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    basePrice: string | null
    primaryImage: string | null
    currencyCode: string | null
    url: string | null
    description: string | null
    metaTitle: string | null
    metaDescription: string | null
    productCode: string | null
    composition: string | null
    careInstructions: string | null
    brandId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    basePrice: string | null
    primaryImage: string | null
    currencyCode: string | null
    url: string | null
    description: string | null
    metaTitle: string | null
    metaDescription: string | null
    productCode: string | null
    composition: string | null
    careInstructions: string | null
    brandId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    basePrice: number
    primaryImage: number
    currencyCode: number
    url: number
    description: number
    metaTitle: number
    metaDescription: number
    productCode: number
    composition: number
    careInstructions: number
    brandId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    brandId?: true
  }

  export type ProductSumAggregateInputType = {
    brandId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    basePrice?: true
    primaryImage?: true
    currencyCode?: true
    url?: true
    description?: true
    metaTitle?: true
    metaDescription?: true
    productCode?: true
    composition?: true
    careInstructions?: true
    brandId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    basePrice?: true
    primaryImage?: true
    currencyCode?: true
    url?: true
    description?: true
    metaTitle?: true
    metaDescription?: true
    productCode?: true
    composition?: true
    careInstructions?: true
    brandId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    basePrice?: true
    primaryImage?: true
    currencyCode?: true
    url?: true
    description?: true
    metaTitle?: true
    metaDescription?: true
    productCode?: true
    composition?: true
    careInstructions?: true
    brandId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    slug: string
    basePrice: string | null
    primaryImage: string | null
    currencyCode: string | null
    url: string | null
    description: string | null
    metaTitle: string | null
    metaDescription: string | null
    productCode: string | null
    composition: string | null
    careInstructions: string | null
    brandId: number
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    basePrice?: boolean
    primaryImage?: boolean
    currencyCode?: boolean
    url?: boolean
    description?: boolean
    metaTitle?: boolean
    metaDescription?: boolean
    productCode?: boolean
    composition?: boolean
    careInstructions?: boolean
    brandId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    colorVariants?: boolean | Product$colorVariantsArgs<ExtArgs>
    priceHistory?: boolean | Product$priceHistoryArgs<ExtArgs>
    colorHistory?: boolean | Product$colorHistoryArgs<ExtArgs>
    sizeHistory?: boolean | Product$sizeHistoryArgs<ExtArgs>
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    productCategories?: boolean | Product$productCategoriesArgs<ExtArgs>
    mediaItems?: boolean | Product$mediaItemsArgs<ExtArgs>
    createdBy?: boolean | Product$createdByArgs<ExtArgs>
    updatedBy?: boolean | Product$updatedByArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>



  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    basePrice?: boolean
    primaryImage?: boolean
    currencyCode?: boolean
    url?: boolean
    description?: boolean
    metaTitle?: boolean
    metaDescription?: boolean
    productCode?: boolean
    composition?: boolean
    careInstructions?: boolean
    brandId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "basePrice" | "primaryImage" | "currencyCode" | "url" | "description" | "metaTitle" | "metaDescription" | "productCode" | "composition" | "careInstructions" | "brandId" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colorVariants?: boolean | Product$colorVariantsArgs<ExtArgs>
    priceHistory?: boolean | Product$priceHistoryArgs<ExtArgs>
    colorHistory?: boolean | Product$colorHistoryArgs<ExtArgs>
    sizeHistory?: boolean | Product$sizeHistoryArgs<ExtArgs>
    brand?: boolean | BrandDefaultArgs<ExtArgs>
    productCategories?: boolean | Product$productCategoriesArgs<ExtArgs>
    mediaItems?: boolean | Product$mediaItemsArgs<ExtArgs>
    createdBy?: boolean | Product$createdByArgs<ExtArgs>
    updatedBy?: boolean | Product$updatedByArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      colorVariants: Prisma.$ColorVariantsPayload<ExtArgs>[]
      priceHistory: Prisma.$PriceHistoryPayload<ExtArgs>[]
      colorHistory: Prisma.$ColorHistoryPayload<ExtArgs>[]
      sizeHistory: Prisma.$SizeHistoryPayload<ExtArgs>[]
      brand: Prisma.$BrandPayload<ExtArgs>
      productCategories: Prisma.$ProductCategoryPayload<ExtArgs>[]
      mediaItems: Prisma.$MediaItemPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      basePrice: string | null
      primaryImage: string | null
      currencyCode: string | null
      url: string | null
      description: string | null
      metaTitle: string | null
      metaDescription: string | null
      productCode: string | null
      composition: string | null
      careInstructions: string | null
      brandId: number
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    colorVariants<T extends Product$colorVariantsArgs<ExtArgs> = {}>(args?: Subset<T, Product$colorVariantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColorVariantsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    priceHistory<T extends Product$priceHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Product$priceHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    colorHistory<T extends Product$colorHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Product$colorHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColorHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sizeHistory<T extends Product$sizeHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Product$sizeHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    brand<T extends BrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BrandDefaultArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    productCategories<T extends Product$productCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Product$productCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mediaItems<T extends Product$mediaItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$mediaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends Product$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Product$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Product$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Product$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly slug: FieldRef<"Product", 'String'>
    readonly basePrice: FieldRef<"Product", 'String'>
    readonly primaryImage: FieldRef<"Product", 'String'>
    readonly currencyCode: FieldRef<"Product", 'String'>
    readonly url: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly metaTitle: FieldRef<"Product", 'String'>
    readonly metaDescription: FieldRef<"Product", 'String'>
    readonly productCode: FieldRef<"Product", 'String'>
    readonly composition: FieldRef<"Product", 'String'>
    readonly careInstructions: FieldRef<"Product", 'String'>
    readonly brandId: FieldRef<"Product", 'Int'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly createdById: FieldRef<"Product", 'String'>
    readonly updatedById: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.colorVariants
   */
  export type Product$colorVariantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorVariants
     */
    select?: ColorVariantsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorVariants
     */
    omit?: ColorVariantsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorVariantsInclude<ExtArgs> | null
    where?: ColorVariantsWhereInput
    orderBy?: ColorVariantsOrderByWithRelationInput | ColorVariantsOrderByWithRelationInput[]
    cursor?: ColorVariantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColorVariantsScalarFieldEnum | ColorVariantsScalarFieldEnum[]
  }

  /**
   * Product.priceHistory
   */
  export type Product$priceHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    where?: PriceHistoryWhereInput
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    cursor?: PriceHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * Product.colorHistory
   */
  export type Product$colorHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorHistory
     */
    select?: ColorHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColorHistory
     */
    omit?: ColorHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColorHistoryInclude<ExtArgs> | null
    where?: ColorHistoryWhereInput
    orderBy?: ColorHistoryOrderByWithRelationInput | ColorHistoryOrderByWithRelationInput[]
    cursor?: ColorHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColorHistoryScalarFieldEnum | ColorHistoryScalarFieldEnum[]
  }

  /**
   * Product.sizeHistory
   */
  export type Product$sizeHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeHistory
     */
    select?: SizeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeHistory
     */
    omit?: SizeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeHistoryInclude<ExtArgs> | null
    where?: SizeHistoryWhereInput
    orderBy?: SizeHistoryOrderByWithRelationInput | SizeHistoryOrderByWithRelationInput[]
    cursor?: SizeHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizeHistoryScalarFieldEnum | SizeHistoryScalarFieldEnum[]
  }

  /**
   * Product.productCategories
   */
  export type Product$productCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    where?: ProductCategoryWhereInput
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    cursor?: ProductCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * Product.mediaItems
   */
  export type Product$mediaItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaItem
     */
    select?: MediaItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MediaItem
     */
    omit?: MediaItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MediaItemInclude<ExtArgs> | null
    where?: MediaItemWhereInput
    orderBy?: MediaItemOrderByWithRelationInput | MediaItemOrderByWithRelationInput[]
    cursor?: MediaItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaItemScalarFieldEnum | MediaItemScalarFieldEnum[]
  }

  /**
   * Product.createdBy
   */
  export type Product$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Product.updatedBy
   */
  export type Product$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductCategory
   */

  export type AggregateProductCategory = {
    _count: ProductCategoryCountAggregateOutputType | null
    _avg: ProductCategoryAvgAggregateOutputType | null
    _sum: ProductCategorySumAggregateOutputType | null
    _min: ProductCategoryMinAggregateOutputType | null
    _max: ProductCategoryMaxAggregateOutputType | null
  }

  export type ProductCategoryAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type ProductCategorySumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type ProductCategoryMinAggregateOutputType = {
    id: number | null
    productId: string | null
    categoryId: number | null
  }

  export type ProductCategoryMaxAggregateOutputType = {
    id: number | null
    productId: string | null
    categoryId: number | null
  }

  export type ProductCategoryCountAggregateOutputType = {
    id: number
    productId: number
    categoryId: number
    _all: number
  }


  export type ProductCategoryAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type ProductCategorySumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type ProductCategoryMinAggregateInputType = {
    id?: true
    productId?: true
    categoryId?: true
  }

  export type ProductCategoryMaxAggregateInputType = {
    id?: true
    productId?: true
    categoryId?: true
  }

  export type ProductCategoryCountAggregateInputType = {
    id?: true
    productId?: true
    categoryId?: true
    _all?: true
  }

  export type ProductCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCategory to aggregate.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductCategories
    **/
    _count?: true | ProductCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductCategoryMaxAggregateInputType
  }

  export type GetProductCategoryAggregateType<T extends ProductCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProductCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductCategory[P]>
      : GetScalarType<T[P], AggregateProductCategory[P]>
  }




  export type ProductCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductCategoryWhereInput
    orderBy?: ProductCategoryOrderByWithAggregationInput | ProductCategoryOrderByWithAggregationInput[]
    by: ProductCategoryScalarFieldEnum[] | ProductCategoryScalarFieldEnum
    having?: ProductCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCategoryCountAggregateInputType | true
    _avg?: ProductCategoryAvgAggregateInputType
    _sum?: ProductCategorySumAggregateInputType
    _min?: ProductCategoryMinAggregateInputType
    _max?: ProductCategoryMaxAggregateInputType
  }

  export type ProductCategoryGroupByOutputType = {
    id: number
    productId: string
    categoryId: number
    _count: ProductCategoryCountAggregateOutputType | null
    _avg: ProductCategoryAvgAggregateOutputType | null
    _sum: ProductCategorySumAggregateOutputType | null
    _min: ProductCategoryMinAggregateOutputType | null
    _max: ProductCategoryMaxAggregateOutputType | null
  }

  type GetProductCategoryGroupByPayload<T extends ProductCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ProductCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ProductCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productCategory"]>



  export type ProductCategorySelectScalar = {
    id?: boolean
    productId?: boolean
    categoryId?: boolean
  }

  export type ProductCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "categoryId", ExtArgs["result"]["productCategory"]>
  export type ProductCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductCategory"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: string
      categoryId: number
    }, ExtArgs["result"]["productCategory"]>
    composites: {}
  }

  type ProductCategoryGetPayload<S extends boolean | null | undefined | ProductCategoryDefaultArgs> = $Result.GetResult<Prisma.$ProductCategoryPayload, S>

  type ProductCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCategoryCountAggregateInputType | true
    }

  export interface ProductCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductCategory'], meta: { name: 'ProductCategory' } }
    /**
     * Find zero or one ProductCategory that matches the filter.
     * @param {ProductCategoryFindUniqueArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductCategoryFindUniqueArgs>(args: SelectSubset<T, ProductCategoryFindUniqueArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductCategoryFindUniqueOrThrowArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindFirstArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductCategoryFindFirstArgs>(args?: SelectSubset<T, ProductCategoryFindFirstArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindFirstOrThrowArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductCategories
     * const productCategories = await prisma.productCategory.findMany()
     * 
     * // Get first 10 ProductCategories
     * const productCategories = await prisma.productCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productCategoryWithIdOnly = await prisma.productCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductCategoryFindManyArgs>(args?: SelectSubset<T, ProductCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductCategory.
     * @param {ProductCategoryCreateArgs} args - Arguments to create a ProductCategory.
     * @example
     * // Create one ProductCategory
     * const ProductCategory = await prisma.productCategory.create({
     *   data: {
     *     // ... data to create a ProductCategory
     *   }
     * })
     * 
     */
    create<T extends ProductCategoryCreateArgs>(args: SelectSubset<T, ProductCategoryCreateArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductCategories.
     * @param {ProductCategoryCreateManyArgs} args - Arguments to create many ProductCategories.
     * @example
     * // Create many ProductCategories
     * const productCategory = await prisma.productCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCategoryCreateManyArgs>(args?: SelectSubset<T, ProductCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductCategory.
     * @param {ProductCategoryDeleteArgs} args - Arguments to delete one ProductCategory.
     * @example
     * // Delete one ProductCategory
     * const ProductCategory = await prisma.productCategory.delete({
     *   where: {
     *     // ... filter to delete one ProductCategory
     *   }
     * })
     * 
     */
    delete<T extends ProductCategoryDeleteArgs>(args: SelectSubset<T, ProductCategoryDeleteArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductCategory.
     * @param {ProductCategoryUpdateArgs} args - Arguments to update one ProductCategory.
     * @example
     * // Update one ProductCategory
     * const productCategory = await prisma.productCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductCategoryUpdateArgs>(args: SelectSubset<T, ProductCategoryUpdateArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductCategories.
     * @param {ProductCategoryDeleteManyArgs} args - Arguments to filter ProductCategories to delete.
     * @example
     * // Delete a few ProductCategories
     * const { count } = await prisma.productCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductCategoryDeleteManyArgs>(args?: SelectSubset<T, ProductCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductCategories
     * const productCategory = await prisma.productCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductCategoryUpdateManyArgs>(args: SelectSubset<T, ProductCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductCategory.
     * @param {ProductCategoryUpsertArgs} args - Arguments to update or create a ProductCategory.
     * @example
     * // Update or create a ProductCategory
     * const productCategory = await prisma.productCategory.upsert({
     *   create: {
     *     // ... data to create a ProductCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductCategory we want to update
     *   }
     * })
     */
    upsert<T extends ProductCategoryUpsertArgs>(args: SelectSubset<T, ProductCategoryUpsertArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryCountArgs} args - Arguments to filter ProductCategories to count.
     * @example
     * // Count the number of ProductCategories
     * const count = await prisma.productCategory.count({
     *   where: {
     *     // ... the filter for the ProductCategories we want to count
     *   }
     * })
    **/
    count<T extends ProductCategoryCountArgs>(
      args?: Subset<T, ProductCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductCategoryAggregateArgs>(args: Subset<T, ProductCategoryAggregateArgs>): Prisma.PrismaPromise<GetProductCategoryAggregateType<T>>

    /**
     * Group by ProductCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ProductCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductCategory model
   */
  readonly fields: ProductCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductCategory model
   */
  interface ProductCategoryFieldRefs {
    readonly id: FieldRef<"ProductCategory", 'Int'>
    readonly productId: FieldRef<"ProductCategory", 'String'>
    readonly categoryId: FieldRef<"ProductCategory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductCategory findUnique
   */
  export type ProductCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory findUniqueOrThrow
   */
  export type ProductCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory findFirst
   */
  export type ProductCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCategories.
     */
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory findFirstOrThrow
   */
  export type ProductCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCategories.
     */
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory findMany
   */
  export type ProductCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategories to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory create
   */
  export type ProductCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductCategory.
     */
    data: XOR<ProductCategoryCreateInput, ProductCategoryUncheckedCreateInput>
  }

  /**
   * ProductCategory createMany
   */
  export type ProductCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductCategories.
     */
    data: ProductCategoryCreateManyInput | ProductCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductCategory update
   */
  export type ProductCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductCategory.
     */
    data: XOR<ProductCategoryUpdateInput, ProductCategoryUncheckedUpdateInput>
    /**
     * Choose, which ProductCategory to update.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory updateMany
   */
  export type ProductCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductCategories.
     */
    data: XOR<ProductCategoryUpdateManyMutationInput, ProductCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ProductCategories to update
     */
    where?: ProductCategoryWhereInput
    /**
     * Limit how many ProductCategories to update.
     */
    limit?: number
  }

  /**
   * ProductCategory upsert
   */
  export type ProductCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductCategory to update in case it exists.
     */
    where: ProductCategoryWhereUniqueInput
    /**
     * In case the ProductCategory found by the `where` argument doesn't exist, create a new ProductCategory with this data.
     */
    create: XOR<ProductCategoryCreateInput, ProductCategoryUncheckedCreateInput>
    /**
     * In case the ProductCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductCategoryUpdateInput, ProductCategoryUncheckedUpdateInput>
  }

  /**
   * ProductCategory delete
   */
  export type ProductCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter which ProductCategory to delete.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory deleteMany
   */
  export type ProductCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCategories to delete
     */
    where?: ProductCategoryWhereInput
    /**
     * Limit how many ProductCategories to delete.
     */
    limit?: number
  }

  /**
   * ProductCategory without action
   */
  export type ProductCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PasswordResetTokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires: 'expires',
    used: 'used',
    createdAt: 'createdAt'
  };

  export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    expires: 'expires',
    email: 'email'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    url: 'url',
    apiProductsUrl: 'apiProductsUrl',
    apiProductDetailsUrl: 'apiProductDetailsUrl',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    level: 'level',
    sortOrder: 'sortOrder',
    isActive: 'isActive',
    gender: 'gender',
    brandId: 'brandId',
    parentId: 'parentId',
    apiId: 'apiId',
    isLeaf: 'isLeaf',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ColorVariantsScalarFieldEnum: {
    id: 'id',
    colorName: 'colorName',
    colorCode: 'colorCode',
    price: 'price',
    hexColor: 'hexColor',
    availability: 'availability',
    sku: 'sku',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ColorVariantsScalarFieldEnum = (typeof ColorVariantsScalarFieldEnum)[keyof typeof ColorVariantsScalarFieldEnum]


  export const SizeVariantsScalarFieldEnum: {
    id: 'id',
    size: 'size',
    availability: 'availability',
    isSelected: 'isSelected',
    originalOrder: 'originalOrder',
    colorVariantId: 'colorVariantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SizeVariantsScalarFieldEnum = (typeof SizeVariantsScalarFieldEnum)[keyof typeof SizeVariantsScalarFieldEnum]


  export const MediaItemScalarFieldEnum: {
    id: 'id',
    url: 'url',
    fileName: 'fileName',
    type: 'type',
    apiId: 'apiId',
    brandId: 'brandId',
    categoryId: 'categoryId',
    productId: 'productId',
    createdById: 'createdById',
    updatedById: 'updatedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MediaItemScalarFieldEnum = (typeof MediaItemScalarFieldEnum)[keyof typeof MediaItemScalarFieldEnum]


  export const ScrapingJobScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status',
    type: 'type',
    targetId: 'targetId',
    targetName: 'targetName',
    progress: 'progress',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScrapingJobScalarFieldEnum = (typeof ScrapingJobScalarFieldEnum)[keyof typeof ScrapingJobScalarFieldEnum]


  export const PriceHistoryScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    oldPrice: 'oldPrice',
    newPrice: 'newPrice',
    changedAt: 'changedAt'
  };

  export type PriceHistoryScalarFieldEnum = (typeof PriceHistoryScalarFieldEnum)[keyof typeof PriceHistoryScalarFieldEnum]


  export const ColorHistoryScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    action: 'action',
    colorName: 'colorName',
    colorCode: 'colorCode',
    hexColor: 'hexColor',
    changedAt: 'changedAt'
  };

  export type ColorHistoryScalarFieldEnum = (typeof ColorHistoryScalarFieldEnum)[keyof typeof ColorHistoryScalarFieldEnum]


  export const SizeHistoryScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    colorId: 'colorId',
    action: 'action',
    size: 'size',
    availability: 'availability',
    changedAt: 'changedAt'
  };

  export type SizeHistoryScalarFieldEnum = (typeof SizeHistoryScalarFieldEnum)[keyof typeof SizeHistoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    basePrice: 'basePrice',
    primaryImage: 'primaryImage',
    currencyCode: 'currencyCode',
    url: 'url',
    description: 'description',
    metaTitle: 'metaTitle',
    metaDescription: 'metaDescription',
    productCode: 'productCode',
    composition: 'composition',
    careInstructions: 'careInstructions',
    brandId: 'brandId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductCategoryScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    categoryId: 'categoryId'
  };

  export type ProductCategoryScalarFieldEnum = (typeof ProductCategoryScalarFieldEnum)[keyof typeof ProductCategoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    image: 'image'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const PasswordResetTokenOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token'
  };

  export type PasswordResetTokenOrderByRelevanceFieldEnum = (typeof PasswordResetTokenOrderByRelevanceFieldEnum)[keyof typeof PasswordResetTokenOrderByRelevanceFieldEnum]


  export const VerificationTokenOrderByRelevanceFieldEnum: {
    id: 'id',
    token: 'token',
    email: 'email'
  };

  export type VerificationTokenOrderByRelevanceFieldEnum = (typeof VerificationTokenOrderByRelevanceFieldEnum)[keyof typeof VerificationTokenOrderByRelevanceFieldEnum]


  export const AccountOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const BrandOrderByRelevanceFieldEnum: {
    name: 'name',
    slug: 'slug',
    description: 'description',
    url: 'url',
    apiProductsUrl: 'apiProductsUrl',
    apiProductDetailsUrl: 'apiProductDetailsUrl',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type BrandOrderByRelevanceFieldEnum = (typeof BrandOrderByRelevanceFieldEnum)[keyof typeof BrandOrderByRelevanceFieldEnum]


  export const CategoryOrderByRelevanceFieldEnum: {
    name: 'name',
    slug: 'slug',
    gender: 'gender',
    apiId: 'apiId',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type CategoryOrderByRelevanceFieldEnum = (typeof CategoryOrderByRelevanceFieldEnum)[keyof typeof CategoryOrderByRelevanceFieldEnum]


  export const ColorVariantsOrderByRelevanceFieldEnum: {
    id: 'id',
    colorName: 'colorName',
    colorCode: 'colorCode',
    price: 'price',
    hexColor: 'hexColor',
    sku: 'sku',
    productId: 'productId'
  };

  export type ColorVariantsOrderByRelevanceFieldEnum = (typeof ColorVariantsOrderByRelevanceFieldEnum)[keyof typeof ColorVariantsOrderByRelevanceFieldEnum]


  export const SizeVariantsOrderByRelevanceFieldEnum: {
    id: 'id',
    size: 'size',
    colorVariantId: 'colorVariantId'
  };

  export type SizeVariantsOrderByRelevanceFieldEnum = (typeof SizeVariantsOrderByRelevanceFieldEnum)[keyof typeof SizeVariantsOrderByRelevanceFieldEnum]


  export const MediaItemOrderByRelevanceFieldEnum: {
    id: 'id',
    url: 'url',
    fileName: 'fileName',
    type: 'type',
    apiId: 'apiId',
    productId: 'productId',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type MediaItemOrderByRelevanceFieldEnum = (typeof MediaItemOrderByRelevanceFieldEnum)[keyof typeof MediaItemOrderByRelevanceFieldEnum]


  export const ScrapingJobOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    targetId: 'targetId',
    targetName: 'targetName',
    userId: 'userId'
  };

  export type ScrapingJobOrderByRelevanceFieldEnum = (typeof ScrapingJobOrderByRelevanceFieldEnum)[keyof typeof ScrapingJobOrderByRelevanceFieldEnum]


  export const PriceHistoryOrderByRelevanceFieldEnum: {
    productId: 'productId'
  };

  export type PriceHistoryOrderByRelevanceFieldEnum = (typeof PriceHistoryOrderByRelevanceFieldEnum)[keyof typeof PriceHistoryOrderByRelevanceFieldEnum]


  export const ColorHistoryOrderByRelevanceFieldEnum: {
    productId: 'productId',
    action: 'action',
    colorName: 'colorName',
    colorCode: 'colorCode',
    hexColor: 'hexColor'
  };

  export type ColorHistoryOrderByRelevanceFieldEnum = (typeof ColorHistoryOrderByRelevanceFieldEnum)[keyof typeof ColorHistoryOrderByRelevanceFieldEnum]


  export const SizeHistoryOrderByRelevanceFieldEnum: {
    productId: 'productId',
    colorId: 'colorId',
    action: 'action',
    size: 'size',
    availability: 'availability'
  };

  export type SizeHistoryOrderByRelevanceFieldEnum = (typeof SizeHistoryOrderByRelevanceFieldEnum)[keyof typeof SizeHistoryOrderByRelevanceFieldEnum]


  export const ProductOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    basePrice: 'basePrice',
    primaryImage: 'primaryImage',
    currencyCode: 'currencyCode',
    url: 'url',
    description: 'description',
    metaTitle: 'metaTitle',
    metaDescription: 'metaDescription',
    productCode: 'productCode',
    composition: 'composition',
    careInstructions: 'careInstructions',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type ProductOrderByRelevanceFieldEnum = (typeof ProductOrderByRelevanceFieldEnum)[keyof typeof ProductOrderByRelevanceFieldEnum]


  export const ProductCategoryOrderByRelevanceFieldEnum: {
    productId: 'productId'
  };

  export type ProductCategoryOrderByRelevanceFieldEnum = (typeof ProductCategoryOrderByRelevanceFieldEnum)[keyof typeof ProductCategoryOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'ColorVariantsAvailability'
   */
  export type EnumColorVariantsAvailabilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ColorVariantsAvailability'>
    


  /**
   * Reference to a field of type 'SizeVariantsAvailability'
   */
  export type EnumSizeVariantsAvailabilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SizeVariantsAvailability'>
    


  /**
   * Reference to a field of type 'ScrapingjobStatus'
   */
  export type EnumScrapingjobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScrapingjobStatus'>
    


  /**
   * Reference to a field of type 'ScrapingjobType'
   */
  export type EnumScrapingjobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScrapingjobType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    account?: XOR<AccountNullableScalarRelationFilter, AccountWhereInput> | null
    createdBrands?: BrandListRelationFilter
    updatedBrands?: BrandListRelationFilter
    createdCategories?: CategoryListRelationFilter
    updatedCategories?: CategoryListRelationFilter
    createdProducts?: ProductListRelationFilter
    updatedProducts?: ProductListRelationFilter
    createdMediaItems?: MediaItemListRelationFilter
    updatedMediaItems?: MediaItemListRelationFilter
    scrapingJobs?: ScrapingJobListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account?: AccountOrderByWithRelationInput
    createdBrands?: BrandOrderByRelationAggregateInput
    updatedBrands?: BrandOrderByRelationAggregateInput
    createdCategories?: CategoryOrderByRelationAggregateInput
    updatedCategories?: CategoryOrderByRelationAggregateInput
    createdProducts?: ProductOrderByRelationAggregateInput
    updatedProducts?: ProductOrderByRelationAggregateInput
    createdMediaItems?: MediaItemOrderByRelationAggregateInput
    updatedMediaItems?: MediaItemOrderByRelationAggregateInput
    scrapingJobs?: ScrapingJobOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    account?: XOR<AccountNullableScalarRelationFilter, AccountWhereInput> | null
    createdBrands?: BrandListRelationFilter
    updatedBrands?: BrandListRelationFilter
    createdCategories?: CategoryListRelationFilter
    updatedCategories?: CategoryListRelationFilter
    createdProducts?: ProductListRelationFilter
    updatedProducts?: ProductListRelationFilter
    createdMediaItems?: MediaItemListRelationFilter
    updatedMediaItems?: MediaItemListRelationFilter
    scrapingJobs?: ScrapingJobListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PasswordResetTokenWhereInput = {
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    email?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
    used?: BoolFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }

  export type PasswordResetTokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    _relevance?: PasswordResetTokenOrderByRelevanceInput
  }

  export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: PasswordResetTokenEmailTokenCompoundUniqueInput
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    email?: StringFilter<"PasswordResetToken"> | string
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
    used?: BoolFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }, "id" | "token" | "email_token">

  export type PasswordResetTokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    _count?: PasswordResetTokenCountOrderByAggregateInput
    _max?: PasswordResetTokenMaxOrderByAggregateInput
    _min?: PasswordResetTokenMinOrderByAggregateInput
  }

  export type PasswordResetTokenScalarWhereWithAggregatesInput = {
    AND?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    OR?: PasswordResetTokenScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    email?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    token?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    expires?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
    used?: BoolWithAggregatesFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    id?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    email?: StringFilter<"VerificationToken"> | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    email?: SortOrder
    _relevance?: VerificationTokenOrderByRelevanceInput
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    email_token?: VerificationTokenEmailTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    email?: StringFilter<"VerificationToken"> | string
  }, "id" | "token" | "email_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    email?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
    email?: StringWithAggregatesFilter<"VerificationToken"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: IntFilter<"Brand"> | number
    name?: StringFilter<"Brand"> | string
    slug?: StringFilter<"Brand"> | string
    description?: StringNullableFilter<"Brand"> | string | null
    isActive?: BoolFilter<"Brand"> | boolean
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    url?: StringNullableFilter<"Brand"> | string | null
    apiProductsUrl?: StringNullableFilter<"Brand"> | string | null
    apiProductDetailsUrl?: StringNullableFilter<"Brand"> | string | null
    createdById?: StringNullableFilter<"Brand"> | string | null
    updatedById?: StringNullableFilter<"Brand"> | string | null
    categories?: CategoryListRelationFilter
    products?: ProductListRelationFilter
    mediaItems?: MediaItemListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrderInput | SortOrder
    apiProductsUrl?: SortOrderInput | SortOrder
    apiProductDetailsUrl?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
    mediaItems?: MediaItemOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    _relevance?: BrandOrderByRelevanceInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    slug?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    description?: StringNullableFilter<"Brand"> | string | null
    isActive?: BoolFilter<"Brand"> | boolean
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    url?: StringNullableFilter<"Brand"> | string | null
    apiProductsUrl?: StringNullableFilter<"Brand"> | string | null
    apiProductDetailsUrl?: StringNullableFilter<"Brand"> | string | null
    createdById?: StringNullableFilter<"Brand"> | string | null
    updatedById?: StringNullableFilter<"Brand"> | string | null
    categories?: CategoryListRelationFilter
    products?: ProductListRelationFilter
    mediaItems?: MediaItemListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "name" | "slug">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrderInput | SortOrder
    apiProductsUrl?: SortOrderInput | SortOrder
    apiProductDetailsUrl?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: BrandCountOrderByAggregateInput
    _avg?: BrandAvgOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
    _sum?: BrandSumOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Brand"> | number
    name?: StringWithAggregatesFilter<"Brand"> | string
    slug?: StringWithAggregatesFilter<"Brand"> | string
    description?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    isActive?: BoolWithAggregatesFilter<"Brand"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    url?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    apiProductsUrl?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    apiProductDetailsUrl?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Brand"> | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    level?: IntFilter<"Category"> | number
    sortOrder?: IntFilter<"Category"> | number
    isActive?: BoolFilter<"Category"> | boolean
    gender?: StringNullableFilter<"Category"> | string | null
    brandId?: IntFilter<"Category"> | number
    parentId?: IntNullableFilter<"Category"> | number | null
    apiId?: StringNullableFilter<"Category"> | string | null
    isLeaf?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    createdById?: StringNullableFilter<"Category"> | string | null
    updatedById?: StringNullableFilter<"Category"> | string | null
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    subCategories?: CategoryListRelationFilter
    productCategories?: ProductCategoryListRelationFilter
    mediaItems?: MediaItemListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    level?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    gender?: SortOrderInput | SortOrder
    brandId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    apiId?: SortOrderInput | SortOrder
    isLeaf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    brand?: BrandOrderByWithRelationInput
    parent?: CategoryOrderByWithRelationInput
    subCategories?: CategoryOrderByRelationAggregateInput
    productCategories?: ProductCategoryOrderByRelationAggregateInput
    mediaItems?: MediaItemOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    _relevance?: CategoryOrderByRelevanceInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug_brandId?: CategorySlugBrandIdCompoundUniqueInput
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    level?: IntFilter<"Category"> | number
    sortOrder?: IntFilter<"Category"> | number
    isActive?: BoolFilter<"Category"> | boolean
    gender?: StringNullableFilter<"Category"> | string | null
    brandId?: IntFilter<"Category"> | number
    parentId?: IntNullableFilter<"Category"> | number | null
    apiId?: StringNullableFilter<"Category"> | string | null
    isLeaf?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    createdById?: StringNullableFilter<"Category"> | string | null
    updatedById?: StringNullableFilter<"Category"> | string | null
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    subCategories?: CategoryListRelationFilter
    productCategories?: ProductCategoryListRelationFilter
    mediaItems?: MediaItemListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "slug_brandId">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    level?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    gender?: SortOrderInput | SortOrder
    brandId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    apiId?: SortOrderInput | SortOrder
    isLeaf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    level?: IntWithAggregatesFilter<"Category"> | number
    sortOrder?: IntWithAggregatesFilter<"Category"> | number
    isActive?: BoolWithAggregatesFilter<"Category"> | boolean
    gender?: StringNullableWithAggregatesFilter<"Category"> | string | null
    brandId?: IntWithAggregatesFilter<"Category"> | number
    parentId?: IntNullableWithAggregatesFilter<"Category"> | number | null
    apiId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    isLeaf?: BoolWithAggregatesFilter<"Category"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Category"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type ColorVariantsWhereInput = {
    AND?: ColorVariantsWhereInput | ColorVariantsWhereInput[]
    OR?: ColorVariantsWhereInput[]
    NOT?: ColorVariantsWhereInput | ColorVariantsWhereInput[]
    id?: StringFilter<"ColorVariants"> | string
    colorName?: StringFilter<"ColorVariants"> | string
    colorCode?: StringNullableFilter<"ColorVariants"> | string | null
    price?: StringNullableFilter<"ColorVariants"> | string | null
    hexColor?: StringNullableFilter<"ColorVariants"> | string | null
    availability?: EnumColorVariantsAvailabilityFilter<"ColorVariants"> | $Enums.ColorVariantsAvailability
    sku?: StringNullableFilter<"ColorVariants"> | string | null
    productId?: StringFilter<"ColorVariants"> | string
    createdAt?: DateTimeFilter<"ColorVariants"> | Date | string
    updatedAt?: DateTimeFilter<"ColorVariants"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    sizes?: SizeVariantsListRelationFilter
  }

  export type ColorVariantsOrderByWithRelationInput = {
    id?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    hexColor?: SortOrderInput | SortOrder
    availability?: SortOrder
    sku?: SortOrderInput | SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    sizes?: SizeVariantsOrderByRelationAggregateInput
    _relevance?: ColorVariantsOrderByRelevanceInput
  }

  export type ColorVariantsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ColorVariantsWhereInput | ColorVariantsWhereInput[]
    OR?: ColorVariantsWhereInput[]
    NOT?: ColorVariantsWhereInput | ColorVariantsWhereInput[]
    colorName?: StringFilter<"ColorVariants"> | string
    colorCode?: StringNullableFilter<"ColorVariants"> | string | null
    price?: StringNullableFilter<"ColorVariants"> | string | null
    hexColor?: StringNullableFilter<"ColorVariants"> | string | null
    availability?: EnumColorVariantsAvailabilityFilter<"ColorVariants"> | $Enums.ColorVariantsAvailability
    sku?: StringNullableFilter<"ColorVariants"> | string | null
    productId?: StringFilter<"ColorVariants"> | string
    createdAt?: DateTimeFilter<"ColorVariants"> | Date | string
    updatedAt?: DateTimeFilter<"ColorVariants"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    sizes?: SizeVariantsListRelationFilter
  }, "id">

  export type ColorVariantsOrderByWithAggregationInput = {
    id?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    hexColor?: SortOrderInput | SortOrder
    availability?: SortOrder
    sku?: SortOrderInput | SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ColorVariantsCountOrderByAggregateInput
    _max?: ColorVariantsMaxOrderByAggregateInput
    _min?: ColorVariantsMinOrderByAggregateInput
  }

  export type ColorVariantsScalarWhereWithAggregatesInput = {
    AND?: ColorVariantsScalarWhereWithAggregatesInput | ColorVariantsScalarWhereWithAggregatesInput[]
    OR?: ColorVariantsScalarWhereWithAggregatesInput[]
    NOT?: ColorVariantsScalarWhereWithAggregatesInput | ColorVariantsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ColorVariants"> | string
    colorName?: StringWithAggregatesFilter<"ColorVariants"> | string
    colorCode?: StringNullableWithAggregatesFilter<"ColorVariants"> | string | null
    price?: StringNullableWithAggregatesFilter<"ColorVariants"> | string | null
    hexColor?: StringNullableWithAggregatesFilter<"ColorVariants"> | string | null
    availability?: EnumColorVariantsAvailabilityWithAggregatesFilter<"ColorVariants"> | $Enums.ColorVariantsAvailability
    sku?: StringNullableWithAggregatesFilter<"ColorVariants"> | string | null
    productId?: StringWithAggregatesFilter<"ColorVariants"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ColorVariants"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ColorVariants"> | Date | string
  }

  export type SizeVariantsWhereInput = {
    AND?: SizeVariantsWhereInput | SizeVariantsWhereInput[]
    OR?: SizeVariantsWhereInput[]
    NOT?: SizeVariantsWhereInput | SizeVariantsWhereInput[]
    id?: StringFilter<"SizeVariants"> | string
    size?: StringFilter<"SizeVariants"> | string
    availability?: EnumSizeVariantsAvailabilityFilter<"SizeVariants"> | $Enums.SizeVariantsAvailability
    isSelected?: BoolFilter<"SizeVariants"> | boolean
    originalOrder?: IntNullableFilter<"SizeVariants"> | number | null
    colorVariantId?: StringFilter<"SizeVariants"> | string
    createdAt?: DateTimeFilter<"SizeVariants"> | Date | string
    updatedAt?: DateTimeFilter<"SizeVariants"> | Date | string
    colorVariant?: XOR<ColorVariantsScalarRelationFilter, ColorVariantsWhereInput>
  }

  export type SizeVariantsOrderByWithRelationInput = {
    id?: SortOrder
    size?: SortOrder
    availability?: SortOrder
    isSelected?: SortOrder
    originalOrder?: SortOrderInput | SortOrder
    colorVariantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    colorVariant?: ColorVariantsOrderByWithRelationInput
    _relevance?: SizeVariantsOrderByRelevanceInput
  }

  export type SizeVariantsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeVariantsWhereInput | SizeVariantsWhereInput[]
    OR?: SizeVariantsWhereInput[]
    NOT?: SizeVariantsWhereInput | SizeVariantsWhereInput[]
    size?: StringFilter<"SizeVariants"> | string
    availability?: EnumSizeVariantsAvailabilityFilter<"SizeVariants"> | $Enums.SizeVariantsAvailability
    isSelected?: BoolFilter<"SizeVariants"> | boolean
    originalOrder?: IntNullableFilter<"SizeVariants"> | number | null
    colorVariantId?: StringFilter<"SizeVariants"> | string
    createdAt?: DateTimeFilter<"SizeVariants"> | Date | string
    updatedAt?: DateTimeFilter<"SizeVariants"> | Date | string
    colorVariant?: XOR<ColorVariantsScalarRelationFilter, ColorVariantsWhereInput>
  }, "id">

  export type SizeVariantsOrderByWithAggregationInput = {
    id?: SortOrder
    size?: SortOrder
    availability?: SortOrder
    isSelected?: SortOrder
    originalOrder?: SortOrderInput | SortOrder
    colorVariantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SizeVariantsCountOrderByAggregateInput
    _avg?: SizeVariantsAvgOrderByAggregateInput
    _max?: SizeVariantsMaxOrderByAggregateInput
    _min?: SizeVariantsMinOrderByAggregateInput
    _sum?: SizeVariantsSumOrderByAggregateInput
  }

  export type SizeVariantsScalarWhereWithAggregatesInput = {
    AND?: SizeVariantsScalarWhereWithAggregatesInput | SizeVariantsScalarWhereWithAggregatesInput[]
    OR?: SizeVariantsScalarWhereWithAggregatesInput[]
    NOT?: SizeVariantsScalarWhereWithAggregatesInput | SizeVariantsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SizeVariants"> | string
    size?: StringWithAggregatesFilter<"SizeVariants"> | string
    availability?: EnumSizeVariantsAvailabilityWithAggregatesFilter<"SizeVariants"> | $Enums.SizeVariantsAvailability
    isSelected?: BoolWithAggregatesFilter<"SizeVariants"> | boolean
    originalOrder?: IntNullableWithAggregatesFilter<"SizeVariants"> | number | null
    colorVariantId?: StringWithAggregatesFilter<"SizeVariants"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SizeVariants"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SizeVariants"> | Date | string
  }

  export type MediaItemWhereInput = {
    AND?: MediaItemWhereInput | MediaItemWhereInput[]
    OR?: MediaItemWhereInput[]
    NOT?: MediaItemWhereInput | MediaItemWhereInput[]
    id?: StringFilter<"MediaItem"> | string
    url?: StringFilter<"MediaItem"> | string
    fileName?: StringFilter<"MediaItem"> | string
    type?: StringFilter<"MediaItem"> | string
    apiId?: StringNullableFilter<"MediaItem"> | string | null
    brandId?: IntNullableFilter<"MediaItem"> | number | null
    categoryId?: IntNullableFilter<"MediaItem"> | number | null
    productId?: StringNullableFilter<"MediaItem"> | string | null
    createdById?: StringNullableFilter<"MediaItem"> | string | null
    updatedById?: StringNullableFilter<"MediaItem"> | string | null
    createdAt?: DateTimeFilter<"MediaItem"> | Date | string
    updatedAt?: DateTimeFilter<"MediaItem"> | Date | string
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type MediaItemOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    fileName?: SortOrder
    type?: SortOrder
    apiId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brand?: BrandOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    _relevance?: MediaItemOrderByRelevanceInput
  }

  export type MediaItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MediaItemWhereInput | MediaItemWhereInput[]
    OR?: MediaItemWhereInput[]
    NOT?: MediaItemWhereInput | MediaItemWhereInput[]
    url?: StringFilter<"MediaItem"> | string
    fileName?: StringFilter<"MediaItem"> | string
    type?: StringFilter<"MediaItem"> | string
    apiId?: StringNullableFilter<"MediaItem"> | string | null
    brandId?: IntNullableFilter<"MediaItem"> | number | null
    categoryId?: IntNullableFilter<"MediaItem"> | number | null
    productId?: StringNullableFilter<"MediaItem"> | string | null
    createdById?: StringNullableFilter<"MediaItem"> | string | null
    updatedById?: StringNullableFilter<"MediaItem"> | string | null
    createdAt?: DateTimeFilter<"MediaItem"> | Date | string
    updatedAt?: DateTimeFilter<"MediaItem"> | Date | string
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type MediaItemOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    fileName?: SortOrder
    type?: SortOrder
    apiId?: SortOrderInput | SortOrder
    brandId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MediaItemCountOrderByAggregateInput
    _avg?: MediaItemAvgOrderByAggregateInput
    _max?: MediaItemMaxOrderByAggregateInput
    _min?: MediaItemMinOrderByAggregateInput
    _sum?: MediaItemSumOrderByAggregateInput
  }

  export type MediaItemScalarWhereWithAggregatesInput = {
    AND?: MediaItemScalarWhereWithAggregatesInput | MediaItemScalarWhereWithAggregatesInput[]
    OR?: MediaItemScalarWhereWithAggregatesInput[]
    NOT?: MediaItemScalarWhereWithAggregatesInput | MediaItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MediaItem"> | string
    url?: StringWithAggregatesFilter<"MediaItem"> | string
    fileName?: StringWithAggregatesFilter<"MediaItem"> | string
    type?: StringWithAggregatesFilter<"MediaItem"> | string
    apiId?: StringNullableWithAggregatesFilter<"MediaItem"> | string | null
    brandId?: IntNullableWithAggregatesFilter<"MediaItem"> | number | null
    categoryId?: IntNullableWithAggregatesFilter<"MediaItem"> | number | null
    productId?: StringNullableWithAggregatesFilter<"MediaItem"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"MediaItem"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"MediaItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MediaItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MediaItem"> | Date | string
  }

  export type ScrapingJobWhereInput = {
    AND?: ScrapingJobWhereInput | ScrapingJobWhereInput[]
    OR?: ScrapingJobWhereInput[]
    NOT?: ScrapingJobWhereInput | ScrapingJobWhereInput[]
    id?: StringFilter<"ScrapingJob"> | string
    name?: StringFilter<"ScrapingJob"> | string
    status?: EnumScrapingjobStatusFilter<"ScrapingJob"> | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFilter<"ScrapingJob"> | $Enums.ScrapingjobType
    targetId?: StringNullableFilter<"ScrapingJob"> | string | null
    targetName?: StringNullableFilter<"ScrapingJob"> | string | null
    progress?: FloatFilter<"ScrapingJob"> | number
    userId?: StringFilter<"ScrapingJob"> | string
    createdAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ScrapingJobOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    targetId?: SortOrderInput | SortOrder
    targetName?: SortOrderInput | SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: ScrapingJobOrderByRelevanceInput
  }

  export type ScrapingJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScrapingJobWhereInput | ScrapingJobWhereInput[]
    OR?: ScrapingJobWhereInput[]
    NOT?: ScrapingJobWhereInput | ScrapingJobWhereInput[]
    name?: StringFilter<"ScrapingJob"> | string
    status?: EnumScrapingjobStatusFilter<"ScrapingJob"> | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFilter<"ScrapingJob"> | $Enums.ScrapingjobType
    targetId?: StringNullableFilter<"ScrapingJob"> | string | null
    targetName?: StringNullableFilter<"ScrapingJob"> | string | null
    progress?: FloatFilter<"ScrapingJob"> | number
    userId?: StringFilter<"ScrapingJob"> | string
    createdAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ScrapingJobOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    targetId?: SortOrderInput | SortOrder
    targetName?: SortOrderInput | SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScrapingJobCountOrderByAggregateInput
    _avg?: ScrapingJobAvgOrderByAggregateInput
    _max?: ScrapingJobMaxOrderByAggregateInput
    _min?: ScrapingJobMinOrderByAggregateInput
    _sum?: ScrapingJobSumOrderByAggregateInput
  }

  export type ScrapingJobScalarWhereWithAggregatesInput = {
    AND?: ScrapingJobScalarWhereWithAggregatesInput | ScrapingJobScalarWhereWithAggregatesInput[]
    OR?: ScrapingJobScalarWhereWithAggregatesInput[]
    NOT?: ScrapingJobScalarWhereWithAggregatesInput | ScrapingJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScrapingJob"> | string
    name?: StringWithAggregatesFilter<"ScrapingJob"> | string
    status?: EnumScrapingjobStatusWithAggregatesFilter<"ScrapingJob"> | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeWithAggregatesFilter<"ScrapingJob"> | $Enums.ScrapingjobType
    targetId?: StringNullableWithAggregatesFilter<"ScrapingJob"> | string | null
    targetName?: StringNullableWithAggregatesFilter<"ScrapingJob"> | string | null
    progress?: FloatWithAggregatesFilter<"ScrapingJob"> | number
    userId?: StringWithAggregatesFilter<"ScrapingJob"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ScrapingJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScrapingJob"> | Date | string
  }

  export type PriceHistoryWhereInput = {
    AND?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    OR?: PriceHistoryWhereInput[]
    NOT?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    id?: IntFilter<"PriceHistory"> | number
    productId?: StringFilter<"PriceHistory"> | string
    oldPrice?: FloatFilter<"PriceHistory"> | number
    newPrice?: FloatFilter<"PriceHistory"> | number
    changedAt?: DateTimeFilter<"PriceHistory"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type PriceHistoryOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    oldPrice?: SortOrder
    newPrice?: SortOrder
    changedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    _relevance?: PriceHistoryOrderByRelevanceInput
  }

  export type PriceHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    OR?: PriceHistoryWhereInput[]
    NOT?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    productId?: StringFilter<"PriceHistory"> | string
    oldPrice?: FloatFilter<"PriceHistory"> | number
    newPrice?: FloatFilter<"PriceHistory"> | number
    changedAt?: DateTimeFilter<"PriceHistory"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type PriceHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    oldPrice?: SortOrder
    newPrice?: SortOrder
    changedAt?: SortOrder
    _count?: PriceHistoryCountOrderByAggregateInput
    _avg?: PriceHistoryAvgOrderByAggregateInput
    _max?: PriceHistoryMaxOrderByAggregateInput
    _min?: PriceHistoryMinOrderByAggregateInput
    _sum?: PriceHistorySumOrderByAggregateInput
  }

  export type PriceHistoryScalarWhereWithAggregatesInput = {
    AND?: PriceHistoryScalarWhereWithAggregatesInput | PriceHistoryScalarWhereWithAggregatesInput[]
    OR?: PriceHistoryScalarWhereWithAggregatesInput[]
    NOT?: PriceHistoryScalarWhereWithAggregatesInput | PriceHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PriceHistory"> | number
    productId?: StringWithAggregatesFilter<"PriceHistory"> | string
    oldPrice?: FloatWithAggregatesFilter<"PriceHistory"> | number
    newPrice?: FloatWithAggregatesFilter<"PriceHistory"> | number
    changedAt?: DateTimeWithAggregatesFilter<"PriceHistory"> | Date | string
  }

  export type ColorHistoryWhereInput = {
    AND?: ColorHistoryWhereInput | ColorHistoryWhereInput[]
    OR?: ColorHistoryWhereInput[]
    NOT?: ColorHistoryWhereInput | ColorHistoryWhereInput[]
    id?: IntFilter<"ColorHistory"> | number
    productId?: StringFilter<"ColorHistory"> | string
    action?: StringFilter<"ColorHistory"> | string
    colorName?: StringFilter<"ColorHistory"> | string
    colorCode?: StringNullableFilter<"ColorHistory"> | string | null
    hexColor?: StringNullableFilter<"ColorHistory"> | string | null
    changedAt?: DateTimeFilter<"ColorHistory"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ColorHistoryOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    action?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrderInput | SortOrder
    hexColor?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    _relevance?: ColorHistoryOrderByRelevanceInput
  }

  export type ColorHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ColorHistoryWhereInput | ColorHistoryWhereInput[]
    OR?: ColorHistoryWhereInput[]
    NOT?: ColorHistoryWhereInput | ColorHistoryWhereInput[]
    productId?: StringFilter<"ColorHistory"> | string
    action?: StringFilter<"ColorHistory"> | string
    colorName?: StringFilter<"ColorHistory"> | string
    colorCode?: StringNullableFilter<"ColorHistory"> | string | null
    hexColor?: StringNullableFilter<"ColorHistory"> | string | null
    changedAt?: DateTimeFilter<"ColorHistory"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ColorHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    action?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrderInput | SortOrder
    hexColor?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    _count?: ColorHistoryCountOrderByAggregateInput
    _avg?: ColorHistoryAvgOrderByAggregateInput
    _max?: ColorHistoryMaxOrderByAggregateInput
    _min?: ColorHistoryMinOrderByAggregateInput
    _sum?: ColorHistorySumOrderByAggregateInput
  }

  export type ColorHistoryScalarWhereWithAggregatesInput = {
    AND?: ColorHistoryScalarWhereWithAggregatesInput | ColorHistoryScalarWhereWithAggregatesInput[]
    OR?: ColorHistoryScalarWhereWithAggregatesInput[]
    NOT?: ColorHistoryScalarWhereWithAggregatesInput | ColorHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ColorHistory"> | number
    productId?: StringWithAggregatesFilter<"ColorHistory"> | string
    action?: StringWithAggregatesFilter<"ColorHistory"> | string
    colorName?: StringWithAggregatesFilter<"ColorHistory"> | string
    colorCode?: StringNullableWithAggregatesFilter<"ColorHistory"> | string | null
    hexColor?: StringNullableWithAggregatesFilter<"ColorHistory"> | string | null
    changedAt?: DateTimeWithAggregatesFilter<"ColorHistory"> | Date | string
  }

  export type SizeHistoryWhereInput = {
    AND?: SizeHistoryWhereInput | SizeHistoryWhereInput[]
    OR?: SizeHistoryWhereInput[]
    NOT?: SizeHistoryWhereInput | SizeHistoryWhereInput[]
    id?: IntFilter<"SizeHistory"> | number
    productId?: StringFilter<"SizeHistory"> | string
    colorId?: StringNullableFilter<"SizeHistory"> | string | null
    action?: StringFilter<"SizeHistory"> | string
    size?: StringFilter<"SizeHistory"> | string
    availability?: StringNullableFilter<"SizeHistory"> | string | null
    changedAt?: DateTimeFilter<"SizeHistory"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type SizeHistoryOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    colorId?: SortOrderInput | SortOrder
    action?: SortOrder
    size?: SortOrder
    availability?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    _relevance?: SizeHistoryOrderByRelevanceInput
  }

  export type SizeHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SizeHistoryWhereInput | SizeHistoryWhereInput[]
    OR?: SizeHistoryWhereInput[]
    NOT?: SizeHistoryWhereInput | SizeHistoryWhereInput[]
    productId?: StringFilter<"SizeHistory"> | string
    colorId?: StringNullableFilter<"SizeHistory"> | string | null
    action?: StringFilter<"SizeHistory"> | string
    size?: StringFilter<"SizeHistory"> | string
    availability?: StringNullableFilter<"SizeHistory"> | string | null
    changedAt?: DateTimeFilter<"SizeHistory"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type SizeHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    colorId?: SortOrderInput | SortOrder
    action?: SortOrder
    size?: SortOrder
    availability?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    _count?: SizeHistoryCountOrderByAggregateInput
    _avg?: SizeHistoryAvgOrderByAggregateInput
    _max?: SizeHistoryMaxOrderByAggregateInput
    _min?: SizeHistoryMinOrderByAggregateInput
    _sum?: SizeHistorySumOrderByAggregateInput
  }

  export type SizeHistoryScalarWhereWithAggregatesInput = {
    AND?: SizeHistoryScalarWhereWithAggregatesInput | SizeHistoryScalarWhereWithAggregatesInput[]
    OR?: SizeHistoryScalarWhereWithAggregatesInput[]
    NOT?: SizeHistoryScalarWhereWithAggregatesInput | SizeHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SizeHistory"> | number
    productId?: StringWithAggregatesFilter<"SizeHistory"> | string
    colorId?: StringNullableWithAggregatesFilter<"SizeHistory"> | string | null
    action?: StringWithAggregatesFilter<"SizeHistory"> | string
    size?: StringWithAggregatesFilter<"SizeHistory"> | string
    availability?: StringNullableWithAggregatesFilter<"SizeHistory"> | string | null
    changedAt?: DateTimeWithAggregatesFilter<"SizeHistory"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    slug?: StringFilter<"Product"> | string
    basePrice?: StringNullableFilter<"Product"> | string | null
    primaryImage?: StringNullableFilter<"Product"> | string | null
    currencyCode?: StringNullableFilter<"Product"> | string | null
    url?: StringNullableFilter<"Product"> | string | null
    description?: StringNullableFilter<"Product"> | string | null
    metaTitle?: StringNullableFilter<"Product"> | string | null
    metaDescription?: StringNullableFilter<"Product"> | string | null
    productCode?: StringNullableFilter<"Product"> | string | null
    composition?: StringNullableFilter<"Product"> | string | null
    careInstructions?: StringNullableFilter<"Product"> | string | null
    brandId?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: StringNullableFilter<"Product"> | string | null
    updatedById?: StringNullableFilter<"Product"> | string | null
    colorVariants?: ColorVariantsListRelationFilter
    priceHistory?: PriceHistoryListRelationFilter
    colorHistory?: ColorHistoryListRelationFilter
    sizeHistory?: SizeHistoryListRelationFilter
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    productCategories?: ProductCategoryListRelationFilter
    mediaItems?: MediaItemListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    basePrice?: SortOrderInput | SortOrder
    primaryImage?: SortOrderInput | SortOrder
    currencyCode?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    metaTitle?: SortOrderInput | SortOrder
    metaDescription?: SortOrderInput | SortOrder
    productCode?: SortOrderInput | SortOrder
    composition?: SortOrderInput | SortOrder
    careInstructions?: SortOrderInput | SortOrder
    brandId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    colorVariants?: ColorVariantsOrderByRelationAggregateInput
    priceHistory?: PriceHistoryOrderByRelationAggregateInput
    colorHistory?: ColorHistoryOrderByRelationAggregateInput
    sizeHistory?: SizeHistoryOrderByRelationAggregateInput
    brand?: BrandOrderByWithRelationInput
    productCategories?: ProductCategoryOrderByRelationAggregateInput
    mediaItems?: MediaItemOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    _relevance?: ProductOrderByRelevanceInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    productCode?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    basePrice?: StringNullableFilter<"Product"> | string | null
    primaryImage?: StringNullableFilter<"Product"> | string | null
    currencyCode?: StringNullableFilter<"Product"> | string | null
    url?: StringNullableFilter<"Product"> | string | null
    description?: StringNullableFilter<"Product"> | string | null
    metaTitle?: StringNullableFilter<"Product"> | string | null
    metaDescription?: StringNullableFilter<"Product"> | string | null
    composition?: StringNullableFilter<"Product"> | string | null
    careInstructions?: StringNullableFilter<"Product"> | string | null
    brandId?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: StringNullableFilter<"Product"> | string | null
    updatedById?: StringNullableFilter<"Product"> | string | null
    colorVariants?: ColorVariantsListRelationFilter
    priceHistory?: PriceHistoryListRelationFilter
    colorHistory?: ColorHistoryListRelationFilter
    sizeHistory?: SizeHistoryListRelationFilter
    brand?: XOR<BrandScalarRelationFilter, BrandWhereInput>
    productCategories?: ProductCategoryListRelationFilter
    mediaItems?: MediaItemListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "slug" | "productCode">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    basePrice?: SortOrderInput | SortOrder
    primaryImage?: SortOrderInput | SortOrder
    currencyCode?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    metaTitle?: SortOrderInput | SortOrder
    metaDescription?: SortOrderInput | SortOrder
    productCode?: SortOrderInput | SortOrder
    composition?: SortOrderInput | SortOrder
    careInstructions?: SortOrderInput | SortOrder
    brandId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    slug?: StringWithAggregatesFilter<"Product"> | string
    basePrice?: StringNullableWithAggregatesFilter<"Product"> | string | null
    primaryImage?: StringNullableWithAggregatesFilter<"Product"> | string | null
    currencyCode?: StringNullableWithAggregatesFilter<"Product"> | string | null
    url?: StringNullableWithAggregatesFilter<"Product"> | string | null
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    metaTitle?: StringNullableWithAggregatesFilter<"Product"> | string | null
    metaDescription?: StringNullableWithAggregatesFilter<"Product"> | string | null
    productCode?: StringNullableWithAggregatesFilter<"Product"> | string | null
    composition?: StringNullableWithAggregatesFilter<"Product"> | string | null
    careInstructions?: StringNullableWithAggregatesFilter<"Product"> | string | null
    brandId?: IntWithAggregatesFilter<"Product"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Product"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Product"> | string | null
  }

  export type ProductCategoryWhereInput = {
    AND?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    OR?: ProductCategoryWhereInput[]
    NOT?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    id?: IntFilter<"ProductCategory"> | number
    productId?: StringFilter<"ProductCategory"> | string
    categoryId?: IntFilter<"ProductCategory"> | number
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductCategoryOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    categoryId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    _relevance?: ProductCategoryOrderByRelevanceInput
  }

  export type ProductCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    productId_categoryId?: ProductCategoryProductIdCategoryIdCompoundUniqueInput
    AND?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    OR?: ProductCategoryWhereInput[]
    NOT?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    productId?: StringFilter<"ProductCategory"> | string
    categoryId?: IntFilter<"ProductCategory"> | number
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "productId_categoryId">

  export type ProductCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    categoryId?: SortOrder
    _count?: ProductCategoryCountOrderByAggregateInput
    _avg?: ProductCategoryAvgOrderByAggregateInput
    _max?: ProductCategoryMaxOrderByAggregateInput
    _min?: ProductCategoryMinOrderByAggregateInput
    _sum?: ProductCategorySumOrderByAggregateInput
  }

  export type ProductCategoryScalarWhereWithAggregatesInput = {
    AND?: ProductCategoryScalarWhereWithAggregatesInput | ProductCategoryScalarWhereWithAggregatesInput[]
    OR?: ProductCategoryScalarWhereWithAggregatesInput[]
    NOT?: ProductCategoryScalarWhereWithAggregatesInput | ProductCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductCategory"> | number
    productId?: StringWithAggregatesFilter<"ProductCategory"> | string
    categoryId?: IntWithAggregatesFilter<"ProductCategory"> | number
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateManyInput = {
    id?: string
    email: string
    token: string
    expires: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    id?: string
    token: string
    expires: Date | string
    email: string
  }

  export type VerificationTokenUncheckedCreateInput = {
    id?: string
    token: string
    expires: Date | string
    email: string
  }

  export type VerificationTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenCreateManyInput = {
    id?: string
    token: string
    expires: Date | string
    email: string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandCreateInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    categories?: CategoryCreateNestedManyWithoutBrandInput
    products?: ProductCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemCreateNestedManyWithoutBrandInput
    createdBy?: UserCreateNestedOneWithoutCreatedBrandsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedBrandsInput
  }

  export type BrandUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    createdById?: string | null
    updatedById?: string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutBrandInput
    products?: ProductUncheckedCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUpdateManyWithoutBrandNestedInput
    products?: ProductUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUpdateManyWithoutBrandNestedInput
    createdBy?: UserUpdateOneWithoutCreatedBrandsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedBrandsNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUncheckedUpdateManyWithoutBrandNestedInput
    products?: ProductUncheckedUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    createdById?: string | null
    updatedById?: string | null
  }

  export type BrandUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutCategoriesInput
    parent?: CategoryCreateNestedOneWithoutSubCategoriesInput
    subCategories?: CategoryCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemCreateNestedManyWithoutCategoryInput
    createdBy?: UserCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    subCategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutCategoriesNestedInput
    parent?: CategoryUpdateOneWithoutSubCategoriesNestedInput
    subCategories?: CategoryUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUpdateManyWithoutCategoryNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCategoriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    subCategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ColorVariantsCreateInput = {
    id: string
    colorName: string
    colorCode?: string | null
    price?: string | null
    hexColor?: string | null
    availability?: $Enums.ColorVariantsAvailability
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutColorVariantsInput
    sizes?: SizeVariantsCreateNestedManyWithoutColorVariantInput
  }

  export type ColorVariantsUncheckedCreateInput = {
    id: string
    colorName: string
    colorCode?: string | null
    price?: string | null
    hexColor?: string | null
    availability?: $Enums.ColorVariantsAvailability
    sku?: string | null
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sizes?: SizeVariantsUncheckedCreateNestedManyWithoutColorVariantInput
  }

  export type ColorVariantsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutColorVariantsNestedInput
    sizes?: SizeVariantsUpdateManyWithoutColorVariantNestedInput
  }

  export type ColorVariantsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizes?: SizeVariantsUncheckedUpdateManyWithoutColorVariantNestedInput
  }

  export type ColorVariantsCreateManyInput = {
    id: string
    colorName: string
    colorCode?: string | null
    price?: string | null
    hexColor?: string | null
    availability?: $Enums.ColorVariantsAvailability
    sku?: string | null
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColorVariantsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorVariantsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeVariantsCreateInput = {
    id: string
    size: string
    availability?: $Enums.SizeVariantsAvailability
    isSelected?: boolean
    originalOrder?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariant: ColorVariantsCreateNestedOneWithoutSizesInput
  }

  export type SizeVariantsUncheckedCreateInput = {
    id: string
    size: string
    availability?: $Enums.SizeVariantsAvailability
    isSelected?: boolean
    originalOrder?: number | null
    colorVariantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeVariantsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: EnumSizeVariantsAvailabilityFieldUpdateOperationsInput | $Enums.SizeVariantsAvailability
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    originalOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariant?: ColorVariantsUpdateOneRequiredWithoutSizesNestedInput
  }

  export type SizeVariantsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: EnumSizeVariantsAvailabilityFieldUpdateOperationsInput | $Enums.SizeVariantsAvailability
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    originalOrder?: NullableIntFieldUpdateOperationsInput | number | null
    colorVariantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeVariantsCreateManyInput = {
    id: string
    size: string
    availability?: $Enums.SizeVariantsAvailability
    isSelected?: boolean
    originalOrder?: number | null
    colorVariantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeVariantsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: EnumSizeVariantsAvailabilityFieldUpdateOperationsInput | $Enums.SizeVariantsAvailability
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    originalOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeVariantsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: EnumSizeVariantsAvailabilityFieldUpdateOperationsInput | $Enums.SizeVariantsAvailability
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    originalOrder?: NullableIntFieldUpdateOperationsInput | number | null
    colorVariantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemCreateInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutMediaItemsInput
    category?: CategoryCreateNestedOneWithoutMediaItemsInput
    product?: ProductCreateNestedOneWithoutMediaItemsInput
    createdBy?: UserCreateNestedOneWithoutCreatedMediaItemsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedMediaItemsInput
  }

  export type MediaItemUncheckedCreateInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    categoryId?: number | null
    productId?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutMediaItemsNestedInput
    category?: CategoryUpdateOneWithoutMediaItemsNestedInput
    product?: ProductUpdateOneWithoutMediaItemsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedMediaItemsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedMediaItemsNestedInput
  }

  export type MediaItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemCreateManyInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    categoryId?: number | null
    productId?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobCreateInput = {
    id?: string
    name: string
    status?: $Enums.ScrapingjobStatus
    type: $Enums.ScrapingjobType
    targetId?: string | null
    targetName?: string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutScrapingJobsInput
  }

  export type ScrapingJobUncheckedCreateInput = {
    id?: string
    name: string
    status?: $Enums.ScrapingjobStatus
    type: $Enums.ScrapingjobType
    targetId?: string | null
    targetName?: string | null
    progress?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumScrapingjobStatusFieldUpdateOperationsInput | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFieldUpdateOperationsInput | $Enums.ScrapingjobType
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetName?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutScrapingJobsNestedInput
  }

  export type ScrapingJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumScrapingjobStatusFieldUpdateOperationsInput | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFieldUpdateOperationsInput | $Enums.ScrapingjobType
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetName?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobCreateManyInput = {
    id?: string
    name: string
    status?: $Enums.ScrapingjobStatus
    type: $Enums.ScrapingjobType
    targetId?: string | null
    targetName?: string | null
    progress?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumScrapingjobStatusFieldUpdateOperationsInput | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFieldUpdateOperationsInput | $Enums.ScrapingjobType
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetName?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumScrapingjobStatusFieldUpdateOperationsInput | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFieldUpdateOperationsInput | $Enums.ScrapingjobType
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetName?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryCreateInput = {
    oldPrice: number
    newPrice: number
    changedAt?: Date | string
    product: ProductCreateNestedOneWithoutPriceHistoryInput
  }

  export type PriceHistoryUncheckedCreateInput = {
    id?: number
    productId: string
    oldPrice: number
    newPrice: number
    changedAt?: Date | string
  }

  export type PriceHistoryUpdateInput = {
    oldPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutPriceHistoryNestedInput
  }

  export type PriceHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    oldPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryCreateManyInput = {
    id?: number
    productId: string
    oldPrice: number
    newPrice: number
    changedAt?: Date | string
  }

  export type PriceHistoryUpdateManyMutationInput = {
    oldPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    oldPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorHistoryCreateInput = {
    action: string
    colorName: string
    colorCode?: string | null
    hexColor?: string | null
    changedAt?: Date | string
    product: ProductCreateNestedOneWithoutColorHistoryInput
  }

  export type ColorHistoryUncheckedCreateInput = {
    id?: number
    productId: string
    action: string
    colorName: string
    colorCode?: string | null
    hexColor?: string | null
    changedAt?: Date | string
  }

  export type ColorHistoryUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutColorHistoryNestedInput
  }

  export type ColorHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorHistoryCreateManyInput = {
    id?: number
    productId: string
    action: string
    colorName: string
    colorCode?: string | null
    hexColor?: string | null
    changedAt?: Date | string
  }

  export type ColorHistoryUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeHistoryCreateInput = {
    colorId?: string | null
    action: string
    size: string
    availability?: string | null
    changedAt?: Date | string
    product: ProductCreateNestedOneWithoutSizeHistoryInput
  }

  export type SizeHistoryUncheckedCreateInput = {
    id?: number
    productId: string
    colorId?: string | null
    action: string
    size: string
    availability?: string | null
    changedAt?: Date | string
  }

  export type SizeHistoryUpdateInput = {
    colorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSizeHistoryNestedInput
  }

  export type SizeHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    colorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeHistoryCreateManyInput = {
    id?: number
    productId: string
    colorId?: string | null
    action: string
    size: string
    availability?: string | null
    changedAt?: Date | string
  }

  export type SizeHistoryUpdateManyMutationInput = {
    colorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    colorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCategoryCreateInput = {
    category: CategoryCreateNestedOneWithoutProductCategoriesInput
    product: ProductCreateNestedOneWithoutProductCategoriesInput
  }

  export type ProductCategoryUncheckedCreateInput = {
    id?: number
    productId: string
    categoryId: number
  }

  export type ProductCategoryUpdateInput = {
    category?: CategoryUpdateOneRequiredWithoutProductCategoriesNestedInput
    product?: ProductUpdateOneRequiredWithoutProductCategoriesNestedInput
  }

  export type ProductCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCategoryCreateManyInput = {
    id?: number
    productId: string
    categoryId: number
  }

  export type ProductCategoryUpdateManyMutationInput = {

  }

  export type ProductCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountNullableScalarRelationFilter = {
    is?: AccountWhereInput | null
    isNot?: AccountWhereInput | null
  }

  export type BrandListRelationFilter = {
    every?: BrandWhereInput
    some?: BrandWhereInput
    none?: BrandWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type MediaItemListRelationFilter = {
    every?: MediaItemWhereInput
    some?: MediaItemWhereInput
    none?: MediaItemWhereInput
  }

  export type ScrapingJobListRelationFilter = {
    every?: ScrapingJobWhereInput
    some?: ScrapingJobWhereInput
    none?: ScrapingJobWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BrandOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MediaItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScrapingJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PasswordResetTokenOrderByRelevanceInput = {
    fields: PasswordResetTokenOrderByRelevanceFieldEnum | PasswordResetTokenOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PasswordResetTokenEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type PasswordResetTokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type VerificationTokenOrderByRelevanceInput = {
    fields: VerificationTokenOrderByRelevanceFieldEnum | VerificationTokenOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VerificationTokenEmailTokenCompoundUniqueInput = {
    email: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    email?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    email?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    email?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountOrderByRelevanceInput = {
    fields: AccountOrderByRelevanceFieldEnum | AccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type BrandOrderByRelevanceInput = {
    fields: BrandOrderByRelevanceFieldEnum | BrandOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrder
    apiProductsUrl?: SortOrder
    apiProductDetailsUrl?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type BrandAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrder
    apiProductsUrl?: SortOrder
    apiProductDetailsUrl?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    url?: SortOrder
    apiProductsUrl?: SortOrder
    apiProductDetailsUrl?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type BrandSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BrandScalarRelationFilter = {
    is?: BrandWhereInput
    isNot?: BrandWhereInput
  }

  export type CategoryNullableScalarRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type ProductCategoryListRelationFilter = {
    every?: ProductCategoryWhereInput
    some?: ProductCategoryWhereInput
    none?: ProductCategoryWhereInput
  }

  export type ProductCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelevanceInput = {
    fields: CategoryOrderByRelevanceFieldEnum | CategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategorySlugBrandIdCompoundUniqueInput = {
    slug: string
    brandId: number
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    level?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    gender?: SortOrder
    brandId?: SortOrder
    parentId?: SortOrder
    apiId?: SortOrder
    isLeaf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    sortOrder?: SortOrder
    brandId?: SortOrder
    parentId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    level?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    gender?: SortOrder
    brandId?: SortOrder
    parentId?: SortOrder
    apiId?: SortOrder
    isLeaf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    level?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    gender?: SortOrder
    brandId?: SortOrder
    parentId?: SortOrder
    apiId?: SortOrder
    isLeaf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    sortOrder?: SortOrder
    brandId?: SortOrder
    parentId?: SortOrder
  }

  export type EnumColorVariantsAvailabilityFilter<$PrismaModel = never> = {
    equals?: $Enums.ColorVariantsAvailability | EnumColorVariantsAvailabilityFieldRefInput<$PrismaModel>
    in?: $Enums.ColorVariantsAvailability[]
    notIn?: $Enums.ColorVariantsAvailability[]
    not?: NestedEnumColorVariantsAvailabilityFilter<$PrismaModel> | $Enums.ColorVariantsAvailability
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type SizeVariantsListRelationFilter = {
    every?: SizeVariantsWhereInput
    some?: SizeVariantsWhereInput
    none?: SizeVariantsWhereInput
  }

  export type SizeVariantsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ColorVariantsOrderByRelevanceInput = {
    fields: ColorVariantsOrderByRelevanceFieldEnum | ColorVariantsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ColorVariantsCountOrderByAggregateInput = {
    id?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrder
    price?: SortOrder
    hexColor?: SortOrder
    availability?: SortOrder
    sku?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColorVariantsMaxOrderByAggregateInput = {
    id?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrder
    price?: SortOrder
    hexColor?: SortOrder
    availability?: SortOrder
    sku?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColorVariantsMinOrderByAggregateInput = {
    id?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrder
    price?: SortOrder
    hexColor?: SortOrder
    availability?: SortOrder
    sku?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumColorVariantsAvailabilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ColorVariantsAvailability | EnumColorVariantsAvailabilityFieldRefInput<$PrismaModel>
    in?: $Enums.ColorVariantsAvailability[]
    notIn?: $Enums.ColorVariantsAvailability[]
    not?: NestedEnumColorVariantsAvailabilityWithAggregatesFilter<$PrismaModel> | $Enums.ColorVariantsAvailability
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumColorVariantsAvailabilityFilter<$PrismaModel>
    _max?: NestedEnumColorVariantsAvailabilityFilter<$PrismaModel>
  }

  export type EnumSizeVariantsAvailabilityFilter<$PrismaModel = never> = {
    equals?: $Enums.SizeVariantsAvailability | EnumSizeVariantsAvailabilityFieldRefInput<$PrismaModel>
    in?: $Enums.SizeVariantsAvailability[]
    notIn?: $Enums.SizeVariantsAvailability[]
    not?: NestedEnumSizeVariantsAvailabilityFilter<$PrismaModel> | $Enums.SizeVariantsAvailability
  }

  export type ColorVariantsScalarRelationFilter = {
    is?: ColorVariantsWhereInput
    isNot?: ColorVariantsWhereInput
  }

  export type SizeVariantsOrderByRelevanceInput = {
    fields: SizeVariantsOrderByRelevanceFieldEnum | SizeVariantsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SizeVariantsCountOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    availability?: SortOrder
    isSelected?: SortOrder
    originalOrder?: SortOrder
    colorVariantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeVariantsAvgOrderByAggregateInput = {
    originalOrder?: SortOrder
  }

  export type SizeVariantsMaxOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    availability?: SortOrder
    isSelected?: SortOrder
    originalOrder?: SortOrder
    colorVariantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeVariantsMinOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    availability?: SortOrder
    isSelected?: SortOrder
    originalOrder?: SortOrder
    colorVariantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeVariantsSumOrderByAggregateInput = {
    originalOrder?: SortOrder
  }

  export type EnumSizeVariantsAvailabilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SizeVariantsAvailability | EnumSizeVariantsAvailabilityFieldRefInput<$PrismaModel>
    in?: $Enums.SizeVariantsAvailability[]
    notIn?: $Enums.SizeVariantsAvailability[]
    not?: NestedEnumSizeVariantsAvailabilityWithAggregatesFilter<$PrismaModel> | $Enums.SizeVariantsAvailability
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSizeVariantsAvailabilityFilter<$PrismaModel>
    _max?: NestedEnumSizeVariantsAvailabilityFilter<$PrismaModel>
  }

  export type BrandNullableScalarRelationFilter = {
    is?: BrandWhereInput | null
    isNot?: BrandWhereInput | null
  }

  export type ProductNullableScalarRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type MediaItemOrderByRelevanceInput = {
    fields: MediaItemOrderByRelevanceFieldEnum | MediaItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MediaItemCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fileName?: SortOrder
    type?: SortOrder
    apiId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    productId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaItemAvgOrderByAggregateInput = {
    brandId?: SortOrder
    categoryId?: SortOrder
  }

  export type MediaItemMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fileName?: SortOrder
    type?: SortOrder
    apiId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    productId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaItemMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fileName?: SortOrder
    type?: SortOrder
    apiId?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    productId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaItemSumOrderByAggregateInput = {
    brandId?: SortOrder
    categoryId?: SortOrder
  }

  export type EnumScrapingjobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingjobStatus | EnumScrapingjobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingjobStatus[]
    notIn?: $Enums.ScrapingjobStatus[]
    not?: NestedEnumScrapingjobStatusFilter<$PrismaModel> | $Enums.ScrapingjobStatus
  }

  export type EnumScrapingjobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingjobType | EnumScrapingjobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingjobType[]
    notIn?: $Enums.ScrapingjobType[]
    not?: NestedEnumScrapingjobTypeFilter<$PrismaModel> | $Enums.ScrapingjobType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ScrapingJobOrderByRelevanceInput = {
    fields: ScrapingJobOrderByRelevanceFieldEnum | ScrapingJobOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ScrapingJobCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    targetId?: SortOrder
    targetName?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingJobAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type ScrapingJobMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    targetId?: SortOrder
    targetName?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingJobMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    type?: SortOrder
    targetId?: SortOrder
    targetName?: SortOrder
    progress?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingJobSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type EnumScrapingjobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingjobStatus | EnumScrapingjobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingjobStatus[]
    notIn?: $Enums.ScrapingjobStatus[]
    not?: NestedEnumScrapingjobStatusWithAggregatesFilter<$PrismaModel> | $Enums.ScrapingjobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScrapingjobStatusFilter<$PrismaModel>
    _max?: NestedEnumScrapingjobStatusFilter<$PrismaModel>
  }

  export type EnumScrapingjobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingjobType | EnumScrapingjobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingjobType[]
    notIn?: $Enums.ScrapingjobType[]
    not?: NestedEnumScrapingjobTypeWithAggregatesFilter<$PrismaModel> | $Enums.ScrapingjobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScrapingjobTypeFilter<$PrismaModel>
    _max?: NestedEnumScrapingjobTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PriceHistoryOrderByRelevanceInput = {
    fields: PriceHistoryOrderByRelevanceFieldEnum | PriceHistoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PriceHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    oldPrice?: SortOrder
    newPrice?: SortOrder
    changedAt?: SortOrder
  }

  export type PriceHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    oldPrice?: SortOrder
    newPrice?: SortOrder
  }

  export type PriceHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    oldPrice?: SortOrder
    newPrice?: SortOrder
    changedAt?: SortOrder
  }

  export type PriceHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    oldPrice?: SortOrder
    newPrice?: SortOrder
    changedAt?: SortOrder
  }

  export type PriceHistorySumOrderByAggregateInput = {
    id?: SortOrder
    oldPrice?: SortOrder
    newPrice?: SortOrder
  }

  export type ColorHistoryOrderByRelevanceInput = {
    fields: ColorHistoryOrderByRelevanceFieldEnum | ColorHistoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ColorHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    action?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrder
    hexColor?: SortOrder
    changedAt?: SortOrder
  }

  export type ColorHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ColorHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    action?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrder
    hexColor?: SortOrder
    changedAt?: SortOrder
  }

  export type ColorHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    action?: SortOrder
    colorName?: SortOrder
    colorCode?: SortOrder
    hexColor?: SortOrder
    changedAt?: SortOrder
  }

  export type ColorHistorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SizeHistoryOrderByRelevanceInput = {
    fields: SizeHistoryOrderByRelevanceFieldEnum | SizeHistoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SizeHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    colorId?: SortOrder
    action?: SortOrder
    size?: SortOrder
    availability?: SortOrder
    changedAt?: SortOrder
  }

  export type SizeHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SizeHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    colorId?: SortOrder
    action?: SortOrder
    size?: SortOrder
    availability?: SortOrder
    changedAt?: SortOrder
  }

  export type SizeHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    colorId?: SortOrder
    action?: SortOrder
    size?: SortOrder
    availability?: SortOrder
    changedAt?: SortOrder
  }

  export type SizeHistorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ColorVariantsListRelationFilter = {
    every?: ColorVariantsWhereInput
    some?: ColorVariantsWhereInput
    none?: ColorVariantsWhereInput
  }

  export type PriceHistoryListRelationFilter = {
    every?: PriceHistoryWhereInput
    some?: PriceHistoryWhereInput
    none?: PriceHistoryWhereInput
  }

  export type ColorHistoryListRelationFilter = {
    every?: ColorHistoryWhereInput
    some?: ColorHistoryWhereInput
    none?: ColorHistoryWhereInput
  }

  export type SizeHistoryListRelationFilter = {
    every?: SizeHistoryWhereInput
    some?: SizeHistoryWhereInput
    none?: SizeHistoryWhereInput
  }

  export type ColorVariantsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PriceHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ColorHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SizeHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelevanceInput = {
    fields: ProductOrderByRelevanceFieldEnum | ProductOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    basePrice?: SortOrder
    primaryImage?: SortOrder
    currencyCode?: SortOrder
    url?: SortOrder
    description?: SortOrder
    metaTitle?: SortOrder
    metaDescription?: SortOrder
    productCode?: SortOrder
    composition?: SortOrder
    careInstructions?: SortOrder
    brandId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    brandId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    basePrice?: SortOrder
    primaryImage?: SortOrder
    currencyCode?: SortOrder
    url?: SortOrder
    description?: SortOrder
    metaTitle?: SortOrder
    metaDescription?: SortOrder
    productCode?: SortOrder
    composition?: SortOrder
    careInstructions?: SortOrder
    brandId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    basePrice?: SortOrder
    primaryImage?: SortOrder
    currencyCode?: SortOrder
    url?: SortOrder
    description?: SortOrder
    metaTitle?: SortOrder
    metaDescription?: SortOrder
    productCode?: SortOrder
    composition?: SortOrder
    careInstructions?: SortOrder
    brandId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    brandId?: SortOrder
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ProductCategoryOrderByRelevanceInput = {
    fields: ProductCategoryOrderByRelevanceFieldEnum | ProductCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProductCategoryProductIdCategoryIdCompoundUniqueInput = {
    productId: string
    categoryId: number
  }

  export type ProductCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    categoryId?: SortOrder
  }

  export type ProductCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type ProductCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    categoryId?: SortOrder
  }

  export type ProductCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    categoryId?: SortOrder
  }

  export type ProductCategorySumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type AccountCreateNestedOneWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    connect?: AccountWhereUniqueInput
  }

  export type BrandCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BrandCreateWithoutCreatedByInput, BrandUncheckedCreateWithoutCreatedByInput> | BrandCreateWithoutCreatedByInput[] | BrandUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCreatedByInput | BrandCreateOrConnectWithoutCreatedByInput[]
    createMany?: BrandCreateManyCreatedByInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type BrandCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<BrandCreateWithoutUpdatedByInput, BrandUncheckedCreateWithoutUpdatedByInput> | BrandCreateWithoutUpdatedByInput[] | BrandUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutUpdatedByInput | BrandCreateOrConnectWithoutUpdatedByInput[]
    createMany?: BrandCreateManyUpdatedByInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput> | CategoryCreateWithoutCreatedByInput[] | CategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByInput | CategoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: CategoryCreateManyCreatedByInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput> | CategoryCreateWithoutUpdatedByInput[] | CategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByInput | CategoryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CategoryCreateManyUpdatedByInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput> | ProductCreateWithoutUpdatedByInput[] | ProductUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUpdatedByInput | ProductCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProductCreateManyUpdatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type MediaItemCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MediaItemCreateWithoutCreatedByInput, MediaItemUncheckedCreateWithoutCreatedByInput> | MediaItemCreateWithoutCreatedByInput[] | MediaItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutCreatedByInput | MediaItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: MediaItemCreateManyCreatedByInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type MediaItemCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<MediaItemCreateWithoutUpdatedByInput, MediaItemUncheckedCreateWithoutUpdatedByInput> | MediaItemCreateWithoutUpdatedByInput[] | MediaItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutUpdatedByInput | MediaItemCreateOrConnectWithoutUpdatedByInput[]
    createMany?: MediaItemCreateManyUpdatedByInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type ScrapingJobCreateNestedManyWithoutUserInput = {
    create?: XOR<ScrapingJobCreateWithoutUserInput, ScrapingJobUncheckedCreateWithoutUserInput> | ScrapingJobCreateWithoutUserInput[] | ScrapingJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScrapingJobCreateOrConnectWithoutUserInput | ScrapingJobCreateOrConnectWithoutUserInput[]
    createMany?: ScrapingJobCreateManyUserInputEnvelope
    connect?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    connect?: AccountWhereUniqueInput
  }

  export type BrandUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BrandCreateWithoutCreatedByInput, BrandUncheckedCreateWithoutCreatedByInput> | BrandCreateWithoutCreatedByInput[] | BrandUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCreatedByInput | BrandCreateOrConnectWithoutCreatedByInput[]
    createMany?: BrandCreateManyCreatedByInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type BrandUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<BrandCreateWithoutUpdatedByInput, BrandUncheckedCreateWithoutUpdatedByInput> | BrandCreateWithoutUpdatedByInput[] | BrandUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutUpdatedByInput | BrandCreateOrConnectWithoutUpdatedByInput[]
    createMany?: BrandCreateManyUpdatedByInputEnvelope
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput> | CategoryCreateWithoutCreatedByInput[] | CategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByInput | CategoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: CategoryCreateManyCreatedByInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput> | CategoryCreateWithoutUpdatedByInput[] | CategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByInput | CategoryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CategoryCreateManyUpdatedByInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput> | ProductCreateWithoutUpdatedByInput[] | ProductUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUpdatedByInput | ProductCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProductCreateManyUpdatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MediaItemCreateWithoutCreatedByInput, MediaItemUncheckedCreateWithoutCreatedByInput> | MediaItemCreateWithoutCreatedByInput[] | MediaItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutCreatedByInput | MediaItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: MediaItemCreateManyCreatedByInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<MediaItemCreateWithoutUpdatedByInput, MediaItemUncheckedCreateWithoutUpdatedByInput> | MediaItemCreateWithoutUpdatedByInput[] | MediaItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutUpdatedByInput | MediaItemCreateOrConnectWithoutUpdatedByInput[]
    createMany?: MediaItemCreateManyUpdatedByInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type ScrapingJobUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScrapingJobCreateWithoutUserInput, ScrapingJobUncheckedCreateWithoutUserInput> | ScrapingJobCreateWithoutUserInput[] | ScrapingJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScrapingJobCreateOrConnectWithoutUserInput | ScrapingJobCreateOrConnectWithoutUserInput[]
    createMany?: ScrapingJobCreateManyUserInputEnvelope
    connect?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateOneWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    upsert?: AccountUpsertWithoutUserInput
    disconnect?: AccountWhereInput | boolean
    delete?: AccountWhereInput | boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutUserInput, AccountUpdateWithoutUserInput>, AccountUncheckedUpdateWithoutUserInput>
  }

  export type BrandUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BrandCreateWithoutCreatedByInput, BrandUncheckedCreateWithoutCreatedByInput> | BrandCreateWithoutCreatedByInput[] | BrandUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCreatedByInput | BrandCreateOrConnectWithoutCreatedByInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutCreatedByInput | BrandUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BrandCreateManyCreatedByInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutCreatedByInput | BrandUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutCreatedByInput | BrandUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type BrandUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<BrandCreateWithoutUpdatedByInput, BrandUncheckedCreateWithoutUpdatedByInput> | BrandCreateWithoutUpdatedByInput[] | BrandUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutUpdatedByInput | BrandCreateOrConnectWithoutUpdatedByInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutUpdatedByInput | BrandUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: BrandCreateManyUpdatedByInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutUpdatedByInput | BrandUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutUpdatedByInput | BrandUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput> | CategoryCreateWithoutCreatedByInput[] | CategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByInput | CategoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutCreatedByInput | CategoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CategoryCreateManyCreatedByInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutCreatedByInput | CategoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutCreatedByInput | CategoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput> | CategoryCreateWithoutUpdatedByInput[] | CategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByInput | CategoryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUpdatedByInput | CategoryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CategoryCreateManyUpdatedByInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUpdatedByInput | CategoryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUpdatedByInput | CategoryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCreatedByInput | ProductUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCreatedByInput | ProductUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCreatedByInput | ProductUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput> | ProductCreateWithoutUpdatedByInput[] | ProductUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUpdatedByInput | ProductCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUpdatedByInput | ProductUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProductCreateManyUpdatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUpdatedByInput | ProductUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUpdatedByInput | ProductUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type MediaItemUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MediaItemCreateWithoutCreatedByInput, MediaItemUncheckedCreateWithoutCreatedByInput> | MediaItemCreateWithoutCreatedByInput[] | MediaItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutCreatedByInput | MediaItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutCreatedByInput | MediaItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MediaItemCreateManyCreatedByInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutCreatedByInput | MediaItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutCreatedByInput | MediaItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type MediaItemUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<MediaItemCreateWithoutUpdatedByInput, MediaItemUncheckedCreateWithoutUpdatedByInput> | MediaItemCreateWithoutUpdatedByInput[] | MediaItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutUpdatedByInput | MediaItemCreateOrConnectWithoutUpdatedByInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutUpdatedByInput | MediaItemUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: MediaItemCreateManyUpdatedByInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutUpdatedByInput | MediaItemUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutUpdatedByInput | MediaItemUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type ScrapingJobUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScrapingJobCreateWithoutUserInput, ScrapingJobUncheckedCreateWithoutUserInput> | ScrapingJobCreateWithoutUserInput[] | ScrapingJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScrapingJobCreateOrConnectWithoutUserInput | ScrapingJobCreateOrConnectWithoutUserInput[]
    upsert?: ScrapingJobUpsertWithWhereUniqueWithoutUserInput | ScrapingJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScrapingJobCreateManyUserInputEnvelope
    set?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
    disconnect?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
    delete?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
    connect?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
    update?: ScrapingJobUpdateWithWhereUniqueWithoutUserInput | ScrapingJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScrapingJobUpdateManyWithWhereWithoutUserInput | ScrapingJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScrapingJobScalarWhereInput | ScrapingJobScalarWhereInput[]
  }

  export type AccountUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput
    upsert?: AccountUpsertWithoutUserInput
    disconnect?: AccountWhereInput | boolean
    delete?: AccountWhereInput | boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutUserInput, AccountUpdateWithoutUserInput>, AccountUncheckedUpdateWithoutUserInput>
  }

  export type BrandUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BrandCreateWithoutCreatedByInput, BrandUncheckedCreateWithoutCreatedByInput> | BrandCreateWithoutCreatedByInput[] | BrandUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutCreatedByInput | BrandCreateOrConnectWithoutCreatedByInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutCreatedByInput | BrandUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BrandCreateManyCreatedByInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutCreatedByInput | BrandUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutCreatedByInput | BrandUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type BrandUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<BrandCreateWithoutUpdatedByInput, BrandUncheckedCreateWithoutUpdatedByInput> | BrandCreateWithoutUpdatedByInput[] | BrandUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: BrandCreateOrConnectWithoutUpdatedByInput | BrandCreateOrConnectWithoutUpdatedByInput[]
    upsert?: BrandUpsertWithWhereUniqueWithoutUpdatedByInput | BrandUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: BrandCreateManyUpdatedByInputEnvelope
    set?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    disconnect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    delete?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    connect?: BrandWhereUniqueInput | BrandWhereUniqueInput[]
    update?: BrandUpdateWithWhereUniqueWithoutUpdatedByInput | BrandUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: BrandUpdateManyWithWhereWithoutUpdatedByInput | BrandUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: BrandScalarWhereInput | BrandScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput> | CategoryCreateWithoutCreatedByInput[] | CategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByInput | CategoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutCreatedByInput | CategoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CategoryCreateManyCreatedByInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutCreatedByInput | CategoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutCreatedByInput | CategoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput> | CategoryCreateWithoutUpdatedByInput[] | CategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByInput | CategoryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUpdatedByInput | CategoryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CategoryCreateManyUpdatedByInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUpdatedByInput | CategoryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUpdatedByInput | CategoryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCreatedByInput | ProductUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCreatedByInput | ProductUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCreatedByInput | ProductUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput> | ProductCreateWithoutUpdatedByInput[] | ProductUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUpdatedByInput | ProductCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUpdatedByInput | ProductUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProductCreateManyUpdatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUpdatedByInput | ProductUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUpdatedByInput | ProductUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MediaItemCreateWithoutCreatedByInput, MediaItemUncheckedCreateWithoutCreatedByInput> | MediaItemCreateWithoutCreatedByInput[] | MediaItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutCreatedByInput | MediaItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutCreatedByInput | MediaItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MediaItemCreateManyCreatedByInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutCreatedByInput | MediaItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutCreatedByInput | MediaItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<MediaItemCreateWithoutUpdatedByInput, MediaItemUncheckedCreateWithoutUpdatedByInput> | MediaItemCreateWithoutUpdatedByInput[] | MediaItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutUpdatedByInput | MediaItemCreateOrConnectWithoutUpdatedByInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutUpdatedByInput | MediaItemUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: MediaItemCreateManyUpdatedByInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutUpdatedByInput | MediaItemUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutUpdatedByInput | MediaItemUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type ScrapingJobUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScrapingJobCreateWithoutUserInput, ScrapingJobUncheckedCreateWithoutUserInput> | ScrapingJobCreateWithoutUserInput[] | ScrapingJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScrapingJobCreateOrConnectWithoutUserInput | ScrapingJobCreateOrConnectWithoutUserInput[]
    upsert?: ScrapingJobUpsertWithWhereUniqueWithoutUserInput | ScrapingJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScrapingJobCreateManyUserInputEnvelope
    set?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
    disconnect?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
    delete?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
    connect?: ScrapingJobWhereUniqueInput | ScrapingJobWhereUniqueInput[]
    update?: ScrapingJobUpdateWithWhereUniqueWithoutUserInput | ScrapingJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScrapingJobUpdateManyWithWhereWithoutUserInput | ScrapingJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScrapingJobScalarWhereInput | ScrapingJobScalarWhereInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserCreateNestedOneWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    upsert?: UserUpsertWithoutAccountInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountInput, UserUpdateWithoutAccountInput>, UserUncheckedUpdateWithoutAccountInput>
  }

  export type CategoryCreateNestedManyWithoutBrandInput = {
    create?: XOR<CategoryCreateWithoutBrandInput, CategoryUncheckedCreateWithoutBrandInput> | CategoryCreateWithoutBrandInput[] | CategoryUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutBrandInput | CategoryCreateOrConnectWithoutBrandInput[]
    createMany?: CategoryCreateManyBrandInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutBrandInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type MediaItemCreateNestedManyWithoutBrandInput = {
    create?: XOR<MediaItemCreateWithoutBrandInput, MediaItemUncheckedCreateWithoutBrandInput> | MediaItemCreateWithoutBrandInput[] | MediaItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutBrandInput | MediaItemCreateOrConnectWithoutBrandInput[]
    createMany?: MediaItemCreateManyBrandInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedBrandsInput = {
    create?: XOR<UserCreateWithoutCreatedBrandsInput, UserUncheckedCreateWithoutCreatedBrandsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedBrandsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedBrandsInput = {
    create?: XOR<UserCreateWithoutUpdatedBrandsInput, UserUncheckedCreateWithoutUpdatedBrandsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedBrandsInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<CategoryCreateWithoutBrandInput, CategoryUncheckedCreateWithoutBrandInput> | CategoryCreateWithoutBrandInput[] | CategoryUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutBrandInput | CategoryCreateOrConnectWithoutBrandInput[]
    createMany?: CategoryCreateManyBrandInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<MediaItemCreateWithoutBrandInput, MediaItemUncheckedCreateWithoutBrandInput> | MediaItemCreateWithoutBrandInput[] | MediaItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutBrandInput | MediaItemCreateOrConnectWithoutBrandInput[]
    createMany?: MediaItemCreateManyBrandInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutBrandNestedInput = {
    create?: XOR<CategoryCreateWithoutBrandInput, CategoryUncheckedCreateWithoutBrandInput> | CategoryCreateWithoutBrandInput[] | CategoryUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutBrandInput | CategoryCreateOrConnectWithoutBrandInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutBrandInput | CategoryUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: CategoryCreateManyBrandInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutBrandInput | CategoryUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutBrandInput | CategoryUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutBrandInput | ProductUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutBrandInput | ProductUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutBrandInput | ProductUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type MediaItemUpdateManyWithoutBrandNestedInput = {
    create?: XOR<MediaItemCreateWithoutBrandInput, MediaItemUncheckedCreateWithoutBrandInput> | MediaItemCreateWithoutBrandInput[] | MediaItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutBrandInput | MediaItemCreateOrConnectWithoutBrandInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutBrandInput | MediaItemUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: MediaItemCreateManyBrandInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutBrandInput | MediaItemUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutBrandInput | MediaItemUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCreatedBrandsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedBrandsInput, UserUncheckedCreateWithoutCreatedBrandsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedBrandsInput
    upsert?: UserUpsertWithoutCreatedBrandsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedBrandsInput, UserUpdateWithoutCreatedBrandsInput>, UserUncheckedUpdateWithoutCreatedBrandsInput>
  }

  export type UserUpdateOneWithoutUpdatedBrandsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedBrandsInput, UserUncheckedCreateWithoutUpdatedBrandsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedBrandsInput
    upsert?: UserUpsertWithoutUpdatedBrandsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedBrandsInput, UserUpdateWithoutUpdatedBrandsInput>, UserUncheckedUpdateWithoutUpdatedBrandsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<CategoryCreateWithoutBrandInput, CategoryUncheckedCreateWithoutBrandInput> | CategoryCreateWithoutBrandInput[] | CategoryUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutBrandInput | CategoryCreateOrConnectWithoutBrandInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutBrandInput | CategoryUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: CategoryCreateManyBrandInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutBrandInput | CategoryUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutBrandInput | CategoryUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutBrandInput | ProductUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutBrandInput | ProductUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutBrandInput | ProductUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<MediaItemCreateWithoutBrandInput, MediaItemUncheckedCreateWithoutBrandInput> | MediaItemCreateWithoutBrandInput[] | MediaItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutBrandInput | MediaItemCreateOrConnectWithoutBrandInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutBrandInput | MediaItemUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: MediaItemCreateManyBrandInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutBrandInput | MediaItemUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutBrandInput | MediaItemUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type BrandCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<BrandCreateWithoutCategoriesInput, BrandUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: BrandCreateOrConnectWithoutCategoriesInput
    connect?: BrandWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutSubCategoriesInput = {
    create?: XOR<CategoryCreateWithoutSubCategoriesInput, CategoryUncheckedCreateWithoutSubCategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSubCategoriesInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCategoryCreateWithoutCategoryInput, ProductCategoryUncheckedCreateWithoutCategoryInput> | ProductCategoryCreateWithoutCategoryInput[] | ProductCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutCategoryInput | ProductCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCategoryCreateManyCategoryInputEnvelope
    connect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
  }

  export type MediaItemCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MediaItemCreateWithoutCategoryInput, MediaItemUncheckedCreateWithoutCategoryInput> | MediaItemCreateWithoutCategoryInput[] | MediaItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutCategoryInput | MediaItemCreateOrConnectWithoutCategoryInput[]
    createMany?: MediaItemCreateManyCategoryInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedCategoriesInput = {
    create?: XOR<UserCreateWithoutCreatedCategoriesInput, UserUncheckedCreateWithoutCreatedCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCategoriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedCategoriesInput = {
    create?: XOR<UserCreateWithoutUpdatedCategoriesInput, UserUncheckedCreateWithoutUpdatedCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedCategoriesInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCategoryCreateWithoutCategoryInput, ProductCategoryUncheckedCreateWithoutCategoryInput> | ProductCategoryCreateWithoutCategoryInput[] | ProductCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutCategoryInput | ProductCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCategoryCreateManyCategoryInputEnvelope
    connect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MediaItemCreateWithoutCategoryInput, MediaItemUncheckedCreateWithoutCategoryInput> | MediaItemCreateWithoutCategoryInput[] | MediaItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutCategoryInput | MediaItemCreateOrConnectWithoutCategoryInput[]
    createMany?: MediaItemCreateManyCategoryInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type BrandUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<BrandCreateWithoutCategoriesInput, BrandUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: BrandCreateOrConnectWithoutCategoriesInput
    upsert?: BrandUpsertWithoutCategoriesInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutCategoriesInput, BrandUpdateWithoutCategoriesInput>, BrandUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneWithoutSubCategoriesNestedInput = {
    create?: XOR<CategoryCreateWithoutSubCategoriesInput, CategoryUncheckedCreateWithoutSubCategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSubCategoriesInput
    upsert?: CategoryUpsertWithoutSubCategoriesInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSubCategoriesInput, CategoryUpdateWithoutSubCategoriesInput>, CategoryUncheckedUpdateWithoutSubCategoriesInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCategoryCreateWithoutCategoryInput, ProductCategoryUncheckedCreateWithoutCategoryInput> | ProductCategoryCreateWithoutCategoryInput[] | ProductCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutCategoryInput | ProductCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductCategoryUpsertWithWhereUniqueWithoutCategoryInput | ProductCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCategoryCreateManyCategoryInputEnvelope
    set?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    disconnect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    delete?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    connect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    update?: ProductCategoryUpdateWithWhereUniqueWithoutCategoryInput | ProductCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductCategoryUpdateManyWithWhereWithoutCategoryInput | ProductCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductCategoryScalarWhereInput | ProductCategoryScalarWhereInput[]
  }

  export type MediaItemUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MediaItemCreateWithoutCategoryInput, MediaItemUncheckedCreateWithoutCategoryInput> | MediaItemCreateWithoutCategoryInput[] | MediaItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutCategoryInput | MediaItemCreateOrConnectWithoutCategoryInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutCategoryInput | MediaItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MediaItemCreateManyCategoryInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutCategoryInput | MediaItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutCategoryInput | MediaItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCreatedCategoriesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCategoriesInput, UserUncheckedCreateWithoutCreatedCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCategoriesInput
    upsert?: UserUpsertWithoutCreatedCategoriesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCategoriesInput, UserUpdateWithoutCreatedCategoriesInput>, UserUncheckedUpdateWithoutCreatedCategoriesInput>
  }

  export type UserUpdateOneWithoutUpdatedCategoriesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedCategoriesInput, UserUncheckedCreateWithoutUpdatedCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedCategoriesInput
    upsert?: UserUpsertWithoutUpdatedCategoriesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedCategoriesInput, UserUpdateWithoutUpdatedCategoriesInput>, UserUncheckedUpdateWithoutUpdatedCategoriesInput>
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCategoryCreateWithoutCategoryInput, ProductCategoryUncheckedCreateWithoutCategoryInput> | ProductCategoryCreateWithoutCategoryInput[] | ProductCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutCategoryInput | ProductCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductCategoryUpsertWithWhereUniqueWithoutCategoryInput | ProductCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCategoryCreateManyCategoryInputEnvelope
    set?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    disconnect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    delete?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    connect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    update?: ProductCategoryUpdateWithWhereUniqueWithoutCategoryInput | ProductCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductCategoryUpdateManyWithWhereWithoutCategoryInput | ProductCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductCategoryScalarWhereInput | ProductCategoryScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MediaItemCreateWithoutCategoryInput, MediaItemUncheckedCreateWithoutCategoryInput> | MediaItemCreateWithoutCategoryInput[] | MediaItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutCategoryInput | MediaItemCreateOrConnectWithoutCategoryInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutCategoryInput | MediaItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MediaItemCreateManyCategoryInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutCategoryInput | MediaItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutCategoryInput | MediaItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutColorVariantsInput = {
    create?: XOR<ProductCreateWithoutColorVariantsInput, ProductUncheckedCreateWithoutColorVariantsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutColorVariantsInput
    connect?: ProductWhereUniqueInput
  }

  export type SizeVariantsCreateNestedManyWithoutColorVariantInput = {
    create?: XOR<SizeVariantsCreateWithoutColorVariantInput, SizeVariantsUncheckedCreateWithoutColorVariantInput> | SizeVariantsCreateWithoutColorVariantInput[] | SizeVariantsUncheckedCreateWithoutColorVariantInput[]
    connectOrCreate?: SizeVariantsCreateOrConnectWithoutColorVariantInput | SizeVariantsCreateOrConnectWithoutColorVariantInput[]
    createMany?: SizeVariantsCreateManyColorVariantInputEnvelope
    connect?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
  }

  export type SizeVariantsUncheckedCreateNestedManyWithoutColorVariantInput = {
    create?: XOR<SizeVariantsCreateWithoutColorVariantInput, SizeVariantsUncheckedCreateWithoutColorVariantInput> | SizeVariantsCreateWithoutColorVariantInput[] | SizeVariantsUncheckedCreateWithoutColorVariantInput[]
    connectOrCreate?: SizeVariantsCreateOrConnectWithoutColorVariantInput | SizeVariantsCreateOrConnectWithoutColorVariantInput[]
    createMany?: SizeVariantsCreateManyColorVariantInputEnvelope
    connect?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
  }

  export type EnumColorVariantsAvailabilityFieldUpdateOperationsInput = {
    set?: $Enums.ColorVariantsAvailability
  }

  export type ProductUpdateOneRequiredWithoutColorVariantsNestedInput = {
    create?: XOR<ProductCreateWithoutColorVariantsInput, ProductUncheckedCreateWithoutColorVariantsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutColorVariantsInput
    upsert?: ProductUpsertWithoutColorVariantsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutColorVariantsInput, ProductUpdateWithoutColorVariantsInput>, ProductUncheckedUpdateWithoutColorVariantsInput>
  }

  export type SizeVariantsUpdateManyWithoutColorVariantNestedInput = {
    create?: XOR<SizeVariantsCreateWithoutColorVariantInput, SizeVariantsUncheckedCreateWithoutColorVariantInput> | SizeVariantsCreateWithoutColorVariantInput[] | SizeVariantsUncheckedCreateWithoutColorVariantInput[]
    connectOrCreate?: SizeVariantsCreateOrConnectWithoutColorVariantInput | SizeVariantsCreateOrConnectWithoutColorVariantInput[]
    upsert?: SizeVariantsUpsertWithWhereUniqueWithoutColorVariantInput | SizeVariantsUpsertWithWhereUniqueWithoutColorVariantInput[]
    createMany?: SizeVariantsCreateManyColorVariantInputEnvelope
    set?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
    disconnect?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
    delete?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
    connect?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
    update?: SizeVariantsUpdateWithWhereUniqueWithoutColorVariantInput | SizeVariantsUpdateWithWhereUniqueWithoutColorVariantInput[]
    updateMany?: SizeVariantsUpdateManyWithWhereWithoutColorVariantInput | SizeVariantsUpdateManyWithWhereWithoutColorVariantInput[]
    deleteMany?: SizeVariantsScalarWhereInput | SizeVariantsScalarWhereInput[]
  }

  export type SizeVariantsUncheckedUpdateManyWithoutColorVariantNestedInput = {
    create?: XOR<SizeVariantsCreateWithoutColorVariantInput, SizeVariantsUncheckedCreateWithoutColorVariantInput> | SizeVariantsCreateWithoutColorVariantInput[] | SizeVariantsUncheckedCreateWithoutColorVariantInput[]
    connectOrCreate?: SizeVariantsCreateOrConnectWithoutColorVariantInput | SizeVariantsCreateOrConnectWithoutColorVariantInput[]
    upsert?: SizeVariantsUpsertWithWhereUniqueWithoutColorVariantInput | SizeVariantsUpsertWithWhereUniqueWithoutColorVariantInput[]
    createMany?: SizeVariantsCreateManyColorVariantInputEnvelope
    set?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
    disconnect?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
    delete?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
    connect?: SizeVariantsWhereUniqueInput | SizeVariantsWhereUniqueInput[]
    update?: SizeVariantsUpdateWithWhereUniqueWithoutColorVariantInput | SizeVariantsUpdateWithWhereUniqueWithoutColorVariantInput[]
    updateMany?: SizeVariantsUpdateManyWithWhereWithoutColorVariantInput | SizeVariantsUpdateManyWithWhereWithoutColorVariantInput[]
    deleteMany?: SizeVariantsScalarWhereInput | SizeVariantsScalarWhereInput[]
  }

  export type ColorVariantsCreateNestedOneWithoutSizesInput = {
    create?: XOR<ColorVariantsCreateWithoutSizesInput, ColorVariantsUncheckedCreateWithoutSizesInput>
    connectOrCreate?: ColorVariantsCreateOrConnectWithoutSizesInput
    connect?: ColorVariantsWhereUniqueInput
  }

  export type EnumSizeVariantsAvailabilityFieldUpdateOperationsInput = {
    set?: $Enums.SizeVariantsAvailability
  }

  export type ColorVariantsUpdateOneRequiredWithoutSizesNestedInput = {
    create?: XOR<ColorVariantsCreateWithoutSizesInput, ColorVariantsUncheckedCreateWithoutSizesInput>
    connectOrCreate?: ColorVariantsCreateOrConnectWithoutSizesInput
    upsert?: ColorVariantsUpsertWithoutSizesInput
    connect?: ColorVariantsWhereUniqueInput
    update?: XOR<XOR<ColorVariantsUpdateToOneWithWhereWithoutSizesInput, ColorVariantsUpdateWithoutSizesInput>, ColorVariantsUncheckedUpdateWithoutSizesInput>
  }

  export type BrandCreateNestedOneWithoutMediaItemsInput = {
    create?: XOR<BrandCreateWithoutMediaItemsInput, BrandUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutMediaItemsInput
    connect?: BrandWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutMediaItemsInput = {
    create?: XOR<CategoryCreateWithoutMediaItemsInput, CategoryUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMediaItemsInput
    connect?: CategoryWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutMediaItemsInput = {
    create?: XOR<ProductCreateWithoutMediaItemsInput, ProductUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMediaItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedMediaItemsInput = {
    create?: XOR<UserCreateWithoutCreatedMediaItemsInput, UserUncheckedCreateWithoutCreatedMediaItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMediaItemsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedMediaItemsInput = {
    create?: XOR<UserCreateWithoutUpdatedMediaItemsInput, UserUncheckedCreateWithoutUpdatedMediaItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedMediaItemsInput
    connect?: UserWhereUniqueInput
  }

  export type BrandUpdateOneWithoutMediaItemsNestedInput = {
    create?: XOR<BrandCreateWithoutMediaItemsInput, BrandUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutMediaItemsInput
    upsert?: BrandUpsertWithoutMediaItemsInput
    disconnect?: BrandWhereInput | boolean
    delete?: BrandWhereInput | boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutMediaItemsInput, BrandUpdateWithoutMediaItemsInput>, BrandUncheckedUpdateWithoutMediaItemsInput>
  }

  export type CategoryUpdateOneWithoutMediaItemsNestedInput = {
    create?: XOR<CategoryCreateWithoutMediaItemsInput, CategoryUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMediaItemsInput
    upsert?: CategoryUpsertWithoutMediaItemsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutMediaItemsInput, CategoryUpdateWithoutMediaItemsInput>, CategoryUncheckedUpdateWithoutMediaItemsInput>
  }

  export type ProductUpdateOneWithoutMediaItemsNestedInput = {
    create?: XOR<ProductCreateWithoutMediaItemsInput, ProductUncheckedCreateWithoutMediaItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMediaItemsInput
    upsert?: ProductUpsertWithoutMediaItemsInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutMediaItemsInput, ProductUpdateWithoutMediaItemsInput>, ProductUncheckedUpdateWithoutMediaItemsInput>
  }

  export type UserUpdateOneWithoutCreatedMediaItemsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedMediaItemsInput, UserUncheckedCreateWithoutCreatedMediaItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMediaItemsInput
    upsert?: UserUpsertWithoutCreatedMediaItemsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedMediaItemsInput, UserUpdateWithoutCreatedMediaItemsInput>, UserUncheckedUpdateWithoutCreatedMediaItemsInput>
  }

  export type UserUpdateOneWithoutUpdatedMediaItemsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedMediaItemsInput, UserUncheckedCreateWithoutUpdatedMediaItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedMediaItemsInput
    upsert?: UserUpsertWithoutUpdatedMediaItemsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedMediaItemsInput, UserUpdateWithoutUpdatedMediaItemsInput>, UserUncheckedUpdateWithoutUpdatedMediaItemsInput>
  }

  export type UserCreateNestedOneWithoutScrapingJobsInput = {
    create?: XOR<UserCreateWithoutScrapingJobsInput, UserUncheckedCreateWithoutScrapingJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutScrapingJobsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumScrapingjobStatusFieldUpdateOperationsInput = {
    set?: $Enums.ScrapingjobStatus
  }

  export type EnumScrapingjobTypeFieldUpdateOperationsInput = {
    set?: $Enums.ScrapingjobType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutScrapingJobsNestedInput = {
    create?: XOR<UserCreateWithoutScrapingJobsInput, UserUncheckedCreateWithoutScrapingJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutScrapingJobsInput
    upsert?: UserUpsertWithoutScrapingJobsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScrapingJobsInput, UserUpdateWithoutScrapingJobsInput>, UserUncheckedUpdateWithoutScrapingJobsInput>
  }

  export type ProductCreateNestedOneWithoutPriceHistoryInput = {
    create?: XOR<ProductCreateWithoutPriceHistoryInput, ProductUncheckedCreateWithoutPriceHistoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPriceHistoryInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutPriceHistoryNestedInput = {
    create?: XOR<ProductCreateWithoutPriceHistoryInput, ProductUncheckedCreateWithoutPriceHistoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPriceHistoryInput
    upsert?: ProductUpsertWithoutPriceHistoryInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutPriceHistoryInput, ProductUpdateWithoutPriceHistoryInput>, ProductUncheckedUpdateWithoutPriceHistoryInput>
  }

  export type ProductCreateNestedOneWithoutColorHistoryInput = {
    create?: XOR<ProductCreateWithoutColorHistoryInput, ProductUncheckedCreateWithoutColorHistoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutColorHistoryInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutColorHistoryNestedInput = {
    create?: XOR<ProductCreateWithoutColorHistoryInput, ProductUncheckedCreateWithoutColorHistoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutColorHistoryInput
    upsert?: ProductUpsertWithoutColorHistoryInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutColorHistoryInput, ProductUpdateWithoutColorHistoryInput>, ProductUncheckedUpdateWithoutColorHistoryInput>
  }

  export type ProductCreateNestedOneWithoutSizeHistoryInput = {
    create?: XOR<ProductCreateWithoutSizeHistoryInput, ProductUncheckedCreateWithoutSizeHistoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSizeHistoryInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutSizeHistoryNestedInput = {
    create?: XOR<ProductCreateWithoutSizeHistoryInput, ProductUncheckedCreateWithoutSizeHistoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSizeHistoryInput
    upsert?: ProductUpsertWithoutSizeHistoryInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSizeHistoryInput, ProductUpdateWithoutSizeHistoryInput>, ProductUncheckedUpdateWithoutSizeHistoryInput>
  }

  export type ColorVariantsCreateNestedManyWithoutProductInput = {
    create?: XOR<ColorVariantsCreateWithoutProductInput, ColorVariantsUncheckedCreateWithoutProductInput> | ColorVariantsCreateWithoutProductInput[] | ColorVariantsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ColorVariantsCreateOrConnectWithoutProductInput | ColorVariantsCreateOrConnectWithoutProductInput[]
    createMany?: ColorVariantsCreateManyProductInputEnvelope
    connect?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
  }

  export type PriceHistoryCreateNestedManyWithoutProductInput = {
    create?: XOR<PriceHistoryCreateWithoutProductInput, PriceHistoryUncheckedCreateWithoutProductInput> | PriceHistoryCreateWithoutProductInput[] | PriceHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutProductInput | PriceHistoryCreateOrConnectWithoutProductInput[]
    createMany?: PriceHistoryCreateManyProductInputEnvelope
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
  }

  export type ColorHistoryCreateNestedManyWithoutProductInput = {
    create?: XOR<ColorHistoryCreateWithoutProductInput, ColorHistoryUncheckedCreateWithoutProductInput> | ColorHistoryCreateWithoutProductInput[] | ColorHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ColorHistoryCreateOrConnectWithoutProductInput | ColorHistoryCreateOrConnectWithoutProductInput[]
    createMany?: ColorHistoryCreateManyProductInputEnvelope
    connect?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
  }

  export type SizeHistoryCreateNestedManyWithoutProductInput = {
    create?: XOR<SizeHistoryCreateWithoutProductInput, SizeHistoryUncheckedCreateWithoutProductInput> | SizeHistoryCreateWithoutProductInput[] | SizeHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SizeHistoryCreateOrConnectWithoutProductInput | SizeHistoryCreateOrConnectWithoutProductInput[]
    createMany?: SizeHistoryCreateManyProductInputEnvelope
    connect?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
  }

  export type BrandCreateNestedOneWithoutProductsInput = {
    create?: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutProductsInput
    connect?: BrandWhereUniqueInput
  }

  export type ProductCategoryCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput> | ProductCategoryCreateWithoutProductInput[] | ProductCategoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutProductInput | ProductCategoryCreateOrConnectWithoutProductInput[]
    createMany?: ProductCategoryCreateManyProductInputEnvelope
    connect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
  }

  export type MediaItemCreateNestedManyWithoutProductInput = {
    create?: XOR<MediaItemCreateWithoutProductInput, MediaItemUncheckedCreateWithoutProductInput> | MediaItemCreateWithoutProductInput[] | MediaItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutProductInput | MediaItemCreateOrConnectWithoutProductInput[]
    createMany?: MediaItemCreateManyProductInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProductsInput = {
    create?: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedProductsInput = {
    create?: XOR<UserCreateWithoutUpdatedProductsInput, UserUncheckedCreateWithoutUpdatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProductsInput
    connect?: UserWhereUniqueInput
  }

  export type ColorVariantsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ColorVariantsCreateWithoutProductInput, ColorVariantsUncheckedCreateWithoutProductInput> | ColorVariantsCreateWithoutProductInput[] | ColorVariantsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ColorVariantsCreateOrConnectWithoutProductInput | ColorVariantsCreateOrConnectWithoutProductInput[]
    createMany?: ColorVariantsCreateManyProductInputEnvelope
    connect?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
  }

  export type PriceHistoryUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<PriceHistoryCreateWithoutProductInput, PriceHistoryUncheckedCreateWithoutProductInput> | PriceHistoryCreateWithoutProductInput[] | PriceHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutProductInput | PriceHistoryCreateOrConnectWithoutProductInput[]
    createMany?: PriceHistoryCreateManyProductInputEnvelope
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
  }

  export type ColorHistoryUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ColorHistoryCreateWithoutProductInput, ColorHistoryUncheckedCreateWithoutProductInput> | ColorHistoryCreateWithoutProductInput[] | ColorHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ColorHistoryCreateOrConnectWithoutProductInput | ColorHistoryCreateOrConnectWithoutProductInput[]
    createMany?: ColorHistoryCreateManyProductInputEnvelope
    connect?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
  }

  export type SizeHistoryUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<SizeHistoryCreateWithoutProductInput, SizeHistoryUncheckedCreateWithoutProductInput> | SizeHistoryCreateWithoutProductInput[] | SizeHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SizeHistoryCreateOrConnectWithoutProductInput | SizeHistoryCreateOrConnectWithoutProductInput[]
    createMany?: SizeHistoryCreateManyProductInputEnvelope
    connect?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
  }

  export type ProductCategoryUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput> | ProductCategoryCreateWithoutProductInput[] | ProductCategoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutProductInput | ProductCategoryCreateOrConnectWithoutProductInput[]
    createMany?: ProductCategoryCreateManyProductInputEnvelope
    connect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
  }

  export type MediaItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<MediaItemCreateWithoutProductInput, MediaItemUncheckedCreateWithoutProductInput> | MediaItemCreateWithoutProductInput[] | MediaItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutProductInput | MediaItemCreateOrConnectWithoutProductInput[]
    createMany?: MediaItemCreateManyProductInputEnvelope
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
  }

  export type ColorVariantsUpdateManyWithoutProductNestedInput = {
    create?: XOR<ColorVariantsCreateWithoutProductInput, ColorVariantsUncheckedCreateWithoutProductInput> | ColorVariantsCreateWithoutProductInput[] | ColorVariantsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ColorVariantsCreateOrConnectWithoutProductInput | ColorVariantsCreateOrConnectWithoutProductInput[]
    upsert?: ColorVariantsUpsertWithWhereUniqueWithoutProductInput | ColorVariantsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ColorVariantsCreateManyProductInputEnvelope
    set?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
    disconnect?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
    delete?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
    connect?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
    update?: ColorVariantsUpdateWithWhereUniqueWithoutProductInput | ColorVariantsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ColorVariantsUpdateManyWithWhereWithoutProductInput | ColorVariantsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ColorVariantsScalarWhereInput | ColorVariantsScalarWhereInput[]
  }

  export type PriceHistoryUpdateManyWithoutProductNestedInput = {
    create?: XOR<PriceHistoryCreateWithoutProductInput, PriceHistoryUncheckedCreateWithoutProductInput> | PriceHistoryCreateWithoutProductInput[] | PriceHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutProductInput | PriceHistoryCreateOrConnectWithoutProductInput[]
    upsert?: PriceHistoryUpsertWithWhereUniqueWithoutProductInput | PriceHistoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PriceHistoryCreateManyProductInputEnvelope
    set?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    disconnect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    delete?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    update?: PriceHistoryUpdateWithWhereUniqueWithoutProductInput | PriceHistoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PriceHistoryUpdateManyWithWhereWithoutProductInput | PriceHistoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
  }

  export type ColorHistoryUpdateManyWithoutProductNestedInput = {
    create?: XOR<ColorHistoryCreateWithoutProductInput, ColorHistoryUncheckedCreateWithoutProductInput> | ColorHistoryCreateWithoutProductInput[] | ColorHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ColorHistoryCreateOrConnectWithoutProductInput | ColorHistoryCreateOrConnectWithoutProductInput[]
    upsert?: ColorHistoryUpsertWithWhereUniqueWithoutProductInput | ColorHistoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ColorHistoryCreateManyProductInputEnvelope
    set?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
    disconnect?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
    delete?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
    connect?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
    update?: ColorHistoryUpdateWithWhereUniqueWithoutProductInput | ColorHistoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ColorHistoryUpdateManyWithWhereWithoutProductInput | ColorHistoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ColorHistoryScalarWhereInput | ColorHistoryScalarWhereInput[]
  }

  export type SizeHistoryUpdateManyWithoutProductNestedInput = {
    create?: XOR<SizeHistoryCreateWithoutProductInput, SizeHistoryUncheckedCreateWithoutProductInput> | SizeHistoryCreateWithoutProductInput[] | SizeHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SizeHistoryCreateOrConnectWithoutProductInput | SizeHistoryCreateOrConnectWithoutProductInput[]
    upsert?: SizeHistoryUpsertWithWhereUniqueWithoutProductInput | SizeHistoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SizeHistoryCreateManyProductInputEnvelope
    set?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
    disconnect?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
    delete?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
    connect?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
    update?: SizeHistoryUpdateWithWhereUniqueWithoutProductInput | SizeHistoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SizeHistoryUpdateManyWithWhereWithoutProductInput | SizeHistoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SizeHistoryScalarWhereInput | SizeHistoryScalarWhereInput[]
  }

  export type BrandUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutProductsInput
    upsert?: BrandUpsertWithoutProductsInput
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutProductsInput, BrandUpdateWithoutProductsInput>, BrandUncheckedUpdateWithoutProductsInput>
  }

  export type ProductCategoryUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput> | ProductCategoryCreateWithoutProductInput[] | ProductCategoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutProductInput | ProductCategoryCreateOrConnectWithoutProductInput[]
    upsert?: ProductCategoryUpsertWithWhereUniqueWithoutProductInput | ProductCategoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductCategoryCreateManyProductInputEnvelope
    set?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    disconnect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    delete?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    connect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    update?: ProductCategoryUpdateWithWhereUniqueWithoutProductInput | ProductCategoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductCategoryUpdateManyWithWhereWithoutProductInput | ProductCategoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductCategoryScalarWhereInput | ProductCategoryScalarWhereInput[]
  }

  export type MediaItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<MediaItemCreateWithoutProductInput, MediaItemUncheckedCreateWithoutProductInput> | MediaItemCreateWithoutProductInput[] | MediaItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutProductInput | MediaItemCreateOrConnectWithoutProductInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutProductInput | MediaItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MediaItemCreateManyProductInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutProductInput | MediaItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutProductInput | MediaItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCreatedProductsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductsInput
    upsert?: UserUpsertWithoutCreatedProductsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProductsInput, UserUpdateWithoutCreatedProductsInput>, UserUncheckedUpdateWithoutCreatedProductsInput>
  }

  export type UserUpdateOneWithoutUpdatedProductsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedProductsInput, UserUncheckedCreateWithoutUpdatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProductsInput
    upsert?: UserUpsertWithoutUpdatedProductsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedProductsInput, UserUpdateWithoutUpdatedProductsInput>, UserUncheckedUpdateWithoutUpdatedProductsInput>
  }

  export type ColorVariantsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ColorVariantsCreateWithoutProductInput, ColorVariantsUncheckedCreateWithoutProductInput> | ColorVariantsCreateWithoutProductInput[] | ColorVariantsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ColorVariantsCreateOrConnectWithoutProductInput | ColorVariantsCreateOrConnectWithoutProductInput[]
    upsert?: ColorVariantsUpsertWithWhereUniqueWithoutProductInput | ColorVariantsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ColorVariantsCreateManyProductInputEnvelope
    set?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
    disconnect?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
    delete?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
    connect?: ColorVariantsWhereUniqueInput | ColorVariantsWhereUniqueInput[]
    update?: ColorVariantsUpdateWithWhereUniqueWithoutProductInput | ColorVariantsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ColorVariantsUpdateManyWithWhereWithoutProductInput | ColorVariantsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ColorVariantsScalarWhereInput | ColorVariantsScalarWhereInput[]
  }

  export type PriceHistoryUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<PriceHistoryCreateWithoutProductInput, PriceHistoryUncheckedCreateWithoutProductInput> | PriceHistoryCreateWithoutProductInput[] | PriceHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutProductInput | PriceHistoryCreateOrConnectWithoutProductInput[]
    upsert?: PriceHistoryUpsertWithWhereUniqueWithoutProductInput | PriceHistoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PriceHistoryCreateManyProductInputEnvelope
    set?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    disconnect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    delete?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    update?: PriceHistoryUpdateWithWhereUniqueWithoutProductInput | PriceHistoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PriceHistoryUpdateManyWithWhereWithoutProductInput | PriceHistoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
  }

  export type ColorHistoryUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ColorHistoryCreateWithoutProductInput, ColorHistoryUncheckedCreateWithoutProductInput> | ColorHistoryCreateWithoutProductInput[] | ColorHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ColorHistoryCreateOrConnectWithoutProductInput | ColorHistoryCreateOrConnectWithoutProductInput[]
    upsert?: ColorHistoryUpsertWithWhereUniqueWithoutProductInput | ColorHistoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ColorHistoryCreateManyProductInputEnvelope
    set?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
    disconnect?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
    delete?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
    connect?: ColorHistoryWhereUniqueInput | ColorHistoryWhereUniqueInput[]
    update?: ColorHistoryUpdateWithWhereUniqueWithoutProductInput | ColorHistoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ColorHistoryUpdateManyWithWhereWithoutProductInput | ColorHistoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ColorHistoryScalarWhereInput | ColorHistoryScalarWhereInput[]
  }

  export type SizeHistoryUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<SizeHistoryCreateWithoutProductInput, SizeHistoryUncheckedCreateWithoutProductInput> | SizeHistoryCreateWithoutProductInput[] | SizeHistoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SizeHistoryCreateOrConnectWithoutProductInput | SizeHistoryCreateOrConnectWithoutProductInput[]
    upsert?: SizeHistoryUpsertWithWhereUniqueWithoutProductInput | SizeHistoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SizeHistoryCreateManyProductInputEnvelope
    set?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
    disconnect?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
    delete?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
    connect?: SizeHistoryWhereUniqueInput | SizeHistoryWhereUniqueInput[]
    update?: SizeHistoryUpdateWithWhereUniqueWithoutProductInput | SizeHistoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SizeHistoryUpdateManyWithWhereWithoutProductInput | SizeHistoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SizeHistoryScalarWhereInput | SizeHistoryScalarWhereInput[]
  }

  export type ProductCategoryUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput> | ProductCategoryCreateWithoutProductInput[] | ProductCategoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutProductInput | ProductCategoryCreateOrConnectWithoutProductInput[]
    upsert?: ProductCategoryUpsertWithWhereUniqueWithoutProductInput | ProductCategoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductCategoryCreateManyProductInputEnvelope
    set?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    disconnect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    delete?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    connect?: ProductCategoryWhereUniqueInput | ProductCategoryWhereUniqueInput[]
    update?: ProductCategoryUpdateWithWhereUniqueWithoutProductInput | ProductCategoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductCategoryUpdateManyWithWhereWithoutProductInput | ProductCategoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductCategoryScalarWhereInput | ProductCategoryScalarWhereInput[]
  }

  export type MediaItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<MediaItemCreateWithoutProductInput, MediaItemUncheckedCreateWithoutProductInput> | MediaItemCreateWithoutProductInput[] | MediaItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MediaItemCreateOrConnectWithoutProductInput | MediaItemCreateOrConnectWithoutProductInput[]
    upsert?: MediaItemUpsertWithWhereUniqueWithoutProductInput | MediaItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MediaItemCreateManyProductInputEnvelope
    set?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    disconnect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    delete?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    connect?: MediaItemWhereUniqueInput | MediaItemWhereUniqueInput[]
    update?: MediaItemUpdateWithWhereUniqueWithoutProductInput | MediaItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MediaItemUpdateManyWithWhereWithoutProductInput | MediaItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutProductCategoriesInput = {
    create?: XOR<CategoryCreateWithoutProductCategoriesInput, CategoryUncheckedCreateWithoutProductCategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductCategoriesInput
    connect?: CategoryWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProductCategoriesInput = {
    create?: XOR<ProductCreateWithoutProductCategoriesInput, ProductUncheckedCreateWithoutProductCategoriesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductCategoriesInput
    connect?: ProductWhereUniqueInput
  }

  export type CategoryUpdateOneRequiredWithoutProductCategoriesNestedInput = {
    create?: XOR<CategoryCreateWithoutProductCategoriesInput, CategoryUncheckedCreateWithoutProductCategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductCategoriesInput
    upsert?: CategoryUpsertWithoutProductCategoriesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductCategoriesInput, CategoryUpdateWithoutProductCategoriesInput>, CategoryUncheckedUpdateWithoutProductCategoriesInput>
  }

  export type ProductUpdateOneRequiredWithoutProductCategoriesNestedInput = {
    create?: XOR<ProductCreateWithoutProductCategoriesInput, ProductUncheckedCreateWithoutProductCategoriesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductCategoriesInput
    upsert?: ProductUpsertWithoutProductCategoriesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductCategoriesInput, ProductUpdateWithoutProductCategoriesInput>, ProductUncheckedUpdateWithoutProductCategoriesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumColorVariantsAvailabilityFilter<$PrismaModel = never> = {
    equals?: $Enums.ColorVariantsAvailability | EnumColorVariantsAvailabilityFieldRefInput<$PrismaModel>
    in?: $Enums.ColorVariantsAvailability[]
    notIn?: $Enums.ColorVariantsAvailability[]
    not?: NestedEnumColorVariantsAvailabilityFilter<$PrismaModel> | $Enums.ColorVariantsAvailability
  }

  export type NestedEnumColorVariantsAvailabilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ColorVariantsAvailability | EnumColorVariantsAvailabilityFieldRefInput<$PrismaModel>
    in?: $Enums.ColorVariantsAvailability[]
    notIn?: $Enums.ColorVariantsAvailability[]
    not?: NestedEnumColorVariantsAvailabilityWithAggregatesFilter<$PrismaModel> | $Enums.ColorVariantsAvailability
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumColorVariantsAvailabilityFilter<$PrismaModel>
    _max?: NestedEnumColorVariantsAvailabilityFilter<$PrismaModel>
  }

  export type NestedEnumSizeVariantsAvailabilityFilter<$PrismaModel = never> = {
    equals?: $Enums.SizeVariantsAvailability | EnumSizeVariantsAvailabilityFieldRefInput<$PrismaModel>
    in?: $Enums.SizeVariantsAvailability[]
    notIn?: $Enums.SizeVariantsAvailability[]
    not?: NestedEnumSizeVariantsAvailabilityFilter<$PrismaModel> | $Enums.SizeVariantsAvailability
  }

  export type NestedEnumSizeVariantsAvailabilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SizeVariantsAvailability | EnumSizeVariantsAvailabilityFieldRefInput<$PrismaModel>
    in?: $Enums.SizeVariantsAvailability[]
    notIn?: $Enums.SizeVariantsAvailability[]
    not?: NestedEnumSizeVariantsAvailabilityWithAggregatesFilter<$PrismaModel> | $Enums.SizeVariantsAvailability
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSizeVariantsAvailabilityFilter<$PrismaModel>
    _max?: NestedEnumSizeVariantsAvailabilityFilter<$PrismaModel>
  }

  export type NestedEnumScrapingjobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingjobStatus | EnumScrapingjobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingjobStatus[]
    notIn?: $Enums.ScrapingjobStatus[]
    not?: NestedEnumScrapingjobStatusFilter<$PrismaModel> | $Enums.ScrapingjobStatus
  }

  export type NestedEnumScrapingjobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingjobType | EnumScrapingjobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingjobType[]
    notIn?: $Enums.ScrapingjobType[]
    not?: NestedEnumScrapingjobTypeFilter<$PrismaModel> | $Enums.ScrapingjobType
  }

  export type NestedEnumScrapingjobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingjobStatus | EnumScrapingjobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingjobStatus[]
    notIn?: $Enums.ScrapingjobStatus[]
    not?: NestedEnumScrapingjobStatusWithAggregatesFilter<$PrismaModel> | $Enums.ScrapingjobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScrapingjobStatusFilter<$PrismaModel>
    _max?: NestedEnumScrapingjobStatusFilter<$PrismaModel>
  }

  export type NestedEnumScrapingjobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingjobType | EnumScrapingjobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingjobType[]
    notIn?: $Enums.ScrapingjobType[]
    not?: NestedEnumScrapingjobTypeWithAggregatesFilter<$PrismaModel> | $Enums.ScrapingjobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScrapingjobTypeFilter<$PrismaModel>
    _max?: NestedEnumScrapingjobTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type BrandCreateWithoutCreatedByInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    categories?: CategoryCreateNestedManyWithoutBrandInput
    products?: ProductCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemCreateNestedManyWithoutBrandInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedBrandsInput
  }

  export type BrandUncheckedCreateWithoutCreatedByInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    updatedById?: string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutBrandInput
    products?: ProductUncheckedCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutCreatedByInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutCreatedByInput, BrandUncheckedCreateWithoutCreatedByInput>
  }

  export type BrandCreateManyCreatedByInputEnvelope = {
    data: BrandCreateManyCreatedByInput | BrandCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type BrandCreateWithoutUpdatedByInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    categories?: CategoryCreateNestedManyWithoutBrandInput
    products?: ProductCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemCreateNestedManyWithoutBrandInput
    createdBy?: UserCreateNestedOneWithoutCreatedBrandsInput
  }

  export type BrandUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    createdById?: string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutBrandInput
    products?: ProductUncheckedCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutUpdatedByInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutUpdatedByInput, BrandUncheckedCreateWithoutUpdatedByInput>
  }

  export type BrandCreateManyUpdatedByInputEnvelope = {
    data: BrandCreateManyUpdatedByInput | BrandCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutCreatedByInput = {
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutCategoriesInput
    parent?: CategoryCreateNestedOneWithoutSubCategoriesInput
    subCategories?: CategoryCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemCreateNestedManyWithoutCategoryInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutCreatedByInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    subCategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutCreatedByInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput>
  }

  export type CategoryCreateManyCreatedByInputEnvelope = {
    data: CategoryCreateManyCreatedByInput | CategoryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutUpdatedByInput = {
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutCategoriesInput
    parent?: CategoryCreateNestedOneWithoutSubCategoriesInput
    subCategories?: CategoryCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemCreateNestedManyWithoutCategoryInput
    createdBy?: UserCreateNestedOneWithoutCreatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    subCategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutUpdatedByInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput>
  }

  export type CategoryCreateManyUpdatedByInputEnvelope = {
    data: CategoryCreateManyUpdatedByInput | CategoryCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutCreatedByInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateWithoutCreatedByInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductCreateManyCreatedByInputEnvelope = {
    data: ProductCreateManyCreatedByInput | ProductCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutUpdatedByInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
  }

  export type ProductUncheckedCreateWithoutUpdatedByInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutUpdatedByInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProductCreateManyUpdatedByInputEnvelope = {
    data: ProductCreateManyUpdatedByInput | ProductCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type MediaItemCreateWithoutCreatedByInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutMediaItemsInput
    category?: CategoryCreateNestedOneWithoutMediaItemsInput
    product?: ProductCreateNestedOneWithoutMediaItemsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedMediaItemsInput
  }

  export type MediaItemUncheckedCreateWithoutCreatedByInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    categoryId?: number | null
    productId?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemCreateOrConnectWithoutCreatedByInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutCreatedByInput, MediaItemUncheckedCreateWithoutCreatedByInput>
  }

  export type MediaItemCreateManyCreatedByInputEnvelope = {
    data: MediaItemCreateManyCreatedByInput | MediaItemCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type MediaItemCreateWithoutUpdatedByInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutMediaItemsInput
    category?: CategoryCreateNestedOneWithoutMediaItemsInput
    product?: ProductCreateNestedOneWithoutMediaItemsInput
    createdBy?: UserCreateNestedOneWithoutCreatedMediaItemsInput
  }

  export type MediaItemUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    categoryId?: number | null
    productId?: string | null
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemCreateOrConnectWithoutUpdatedByInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutUpdatedByInput, MediaItemUncheckedCreateWithoutUpdatedByInput>
  }

  export type MediaItemCreateManyUpdatedByInputEnvelope = {
    data: MediaItemCreateManyUpdatedByInput | MediaItemCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ScrapingJobCreateWithoutUserInput = {
    id?: string
    name: string
    status?: $Enums.ScrapingjobStatus
    type: $Enums.ScrapingjobType
    targetId?: string | null
    targetName?: string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingJobUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    status?: $Enums.ScrapingjobStatus
    type: $Enums.ScrapingjobType
    targetId?: string | null
    targetName?: string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingJobCreateOrConnectWithoutUserInput = {
    where: ScrapingJobWhereUniqueInput
    create: XOR<ScrapingJobCreateWithoutUserInput, ScrapingJobUncheckedCreateWithoutUserInput>
  }

  export type ScrapingJobCreateManyUserInputEnvelope = {
    data: ScrapingJobCreateManyUserInput | ScrapingJobCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutUserInput = {
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutUserInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutCreatedByInput, BrandUncheckedUpdateWithoutCreatedByInput>
    create: XOR<BrandCreateWithoutCreatedByInput, BrandUncheckedCreateWithoutCreatedByInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutCreatedByInput, BrandUncheckedUpdateWithoutCreatedByInput>
  }

  export type BrandUpdateManyWithWhereWithoutCreatedByInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type BrandScalarWhereInput = {
    AND?: BrandScalarWhereInput | BrandScalarWhereInput[]
    OR?: BrandScalarWhereInput[]
    NOT?: BrandScalarWhereInput | BrandScalarWhereInput[]
    id?: IntFilter<"Brand"> | number
    name?: StringFilter<"Brand"> | string
    slug?: StringFilter<"Brand"> | string
    description?: StringNullableFilter<"Brand"> | string | null
    isActive?: BoolFilter<"Brand"> | boolean
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    url?: StringNullableFilter<"Brand"> | string | null
    apiProductsUrl?: StringNullableFilter<"Brand"> | string | null
    apiProductDetailsUrl?: StringNullableFilter<"Brand"> | string | null
    createdById?: StringNullableFilter<"Brand"> | string | null
    updatedById?: StringNullableFilter<"Brand"> | string | null
  }

  export type BrandUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: BrandWhereUniqueInput
    update: XOR<BrandUpdateWithoutUpdatedByInput, BrandUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<BrandCreateWithoutUpdatedByInput, BrandUncheckedCreateWithoutUpdatedByInput>
  }

  export type BrandUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: BrandWhereUniqueInput
    data: XOR<BrandUpdateWithoutUpdatedByInput, BrandUncheckedUpdateWithoutUpdatedByInput>
  }

  export type BrandUpdateManyWithWhereWithoutUpdatedByInput = {
    where: BrandScalarWhereInput
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutCreatedByInput, CategoryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutCreatedByInput, CategoryUncheckedUpdateWithoutCreatedByInput>
  }

  export type CategoryUpdateManyWithWhereWithoutCreatedByInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    level?: IntFilter<"Category"> | number
    sortOrder?: IntFilter<"Category"> | number
    isActive?: BoolFilter<"Category"> | boolean
    gender?: StringNullableFilter<"Category"> | string | null
    brandId?: IntFilter<"Category"> | number
    parentId?: IntNullableFilter<"Category"> | number | null
    apiId?: StringNullableFilter<"Category"> | string | null
    isLeaf?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    createdById?: StringNullableFilter<"Category"> | string | null
    updatedById?: StringNullableFilter<"Category"> | string | null
  }

  export type CategoryUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutUpdatedByInput, CategoryUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutUpdatedByInput, CategoryUncheckedUpdateWithoutUpdatedByInput>
  }

  export type CategoryUpdateManyWithWhereWithoutUpdatedByInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCreatedByInput, ProductUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCreatedByInput, ProductUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProductUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    slug?: StringFilter<"Product"> | string
    basePrice?: StringNullableFilter<"Product"> | string | null
    primaryImage?: StringNullableFilter<"Product"> | string | null
    currencyCode?: StringNullableFilter<"Product"> | string | null
    url?: StringNullableFilter<"Product"> | string | null
    description?: StringNullableFilter<"Product"> | string | null
    metaTitle?: StringNullableFilter<"Product"> | string | null
    metaDescription?: StringNullableFilter<"Product"> | string | null
    productCode?: StringNullableFilter<"Product"> | string | null
    composition?: StringNullableFilter<"Product"> | string | null
    careInstructions?: StringNullableFilter<"Product"> | string | null
    brandId?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: StringNullableFilter<"Product"> | string | null
    updatedById?: StringNullableFilter<"Product"> | string | null
  }

  export type ProductUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutUpdatedByInput, ProductUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutUpdatedByInput, ProductUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ProductUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type MediaItemUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutCreatedByInput, MediaItemUncheckedUpdateWithoutCreatedByInput>
    create: XOR<MediaItemCreateWithoutCreatedByInput, MediaItemUncheckedCreateWithoutCreatedByInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutCreatedByInput, MediaItemUncheckedUpdateWithoutCreatedByInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutCreatedByInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type MediaItemScalarWhereInput = {
    AND?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
    OR?: MediaItemScalarWhereInput[]
    NOT?: MediaItemScalarWhereInput | MediaItemScalarWhereInput[]
    id?: StringFilter<"MediaItem"> | string
    url?: StringFilter<"MediaItem"> | string
    fileName?: StringFilter<"MediaItem"> | string
    type?: StringFilter<"MediaItem"> | string
    apiId?: StringNullableFilter<"MediaItem"> | string | null
    brandId?: IntNullableFilter<"MediaItem"> | number | null
    categoryId?: IntNullableFilter<"MediaItem"> | number | null
    productId?: StringNullableFilter<"MediaItem"> | string | null
    createdById?: StringNullableFilter<"MediaItem"> | string | null
    updatedById?: StringNullableFilter<"MediaItem"> | string | null
    createdAt?: DateTimeFilter<"MediaItem"> | Date | string
    updatedAt?: DateTimeFilter<"MediaItem"> | Date | string
  }

  export type MediaItemUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutUpdatedByInput, MediaItemUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<MediaItemCreateWithoutUpdatedByInput, MediaItemUncheckedCreateWithoutUpdatedByInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutUpdatedByInput, MediaItemUncheckedUpdateWithoutUpdatedByInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutUpdatedByInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ScrapingJobUpsertWithWhereUniqueWithoutUserInput = {
    where: ScrapingJobWhereUniqueInput
    update: XOR<ScrapingJobUpdateWithoutUserInput, ScrapingJobUncheckedUpdateWithoutUserInput>
    create: XOR<ScrapingJobCreateWithoutUserInput, ScrapingJobUncheckedCreateWithoutUserInput>
  }

  export type ScrapingJobUpdateWithWhereUniqueWithoutUserInput = {
    where: ScrapingJobWhereUniqueInput
    data: XOR<ScrapingJobUpdateWithoutUserInput, ScrapingJobUncheckedUpdateWithoutUserInput>
  }

  export type ScrapingJobUpdateManyWithWhereWithoutUserInput = {
    where: ScrapingJobScalarWhereInput
    data: XOR<ScrapingJobUpdateManyMutationInput, ScrapingJobUncheckedUpdateManyWithoutUserInput>
  }

  export type ScrapingJobScalarWhereInput = {
    AND?: ScrapingJobScalarWhereInput | ScrapingJobScalarWhereInput[]
    OR?: ScrapingJobScalarWhereInput[]
    NOT?: ScrapingJobScalarWhereInput | ScrapingJobScalarWhereInput[]
    id?: StringFilter<"ScrapingJob"> | string
    name?: StringFilter<"ScrapingJob"> | string
    status?: EnumScrapingjobStatusFilter<"ScrapingJob"> | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFilter<"ScrapingJob"> | $Enums.ScrapingjobType
    targetId?: StringNullableFilter<"ScrapingJob"> | string | null
    targetName?: StringNullableFilter<"ScrapingJob"> | string | null
    progress?: FloatFilter<"ScrapingJob"> | number
    userId?: StringFilter<"ScrapingJob"> | string
    createdAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapingJob"> | Date | string
  }

  export type UserCreateWithoutAccountInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserUpsertWithoutAccountInput = {
    update: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
  }

  export type UserUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryCreateWithoutBrandInput = {
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutSubCategoriesInput
    subCategories?: CategoryCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemCreateNestedManyWithoutCategoryInput
    createdBy?: UserCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutBrandInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    subCategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutBrandInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutBrandInput, CategoryUncheckedCreateWithoutBrandInput>
  }

  export type CategoryCreateManyBrandInputEnvelope = {
    data: CategoryCreateManyBrandInput | CategoryCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutBrandInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateWithoutBrandInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBrandInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput>
  }

  export type ProductCreateManyBrandInputEnvelope = {
    data: ProductCreateManyBrandInput | ProductCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type MediaItemCreateWithoutBrandInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutMediaItemsInput
    product?: ProductCreateNestedOneWithoutMediaItemsInput
    createdBy?: UserCreateNestedOneWithoutCreatedMediaItemsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedMediaItemsInput
  }

  export type MediaItemUncheckedCreateWithoutBrandInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    categoryId?: number | null
    productId?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemCreateOrConnectWithoutBrandInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutBrandInput, MediaItemUncheckedCreateWithoutBrandInput>
  }

  export type MediaItemCreateManyBrandInputEnvelope = {
    data: MediaItemCreateManyBrandInput | MediaItemCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedBrandsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedBrandsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedBrandsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedBrandsInput, UserUncheckedCreateWithoutCreatedBrandsInput>
  }

  export type UserCreateWithoutUpdatedBrandsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedBrandsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedBrandsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedBrandsInput, UserUncheckedCreateWithoutUpdatedBrandsInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutBrandInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutBrandInput, CategoryUncheckedUpdateWithoutBrandInput>
    create: XOR<CategoryCreateWithoutBrandInput, CategoryUncheckedCreateWithoutBrandInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutBrandInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutBrandInput, CategoryUncheckedUpdateWithoutBrandInput>
  }

  export type CategoryUpdateManyWithWhereWithoutBrandInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutBrandInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutBrandInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutBrandInput, ProductUncheckedUpdateWithoutBrandInput>
    create: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutBrandInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutBrandInput, ProductUncheckedUpdateWithoutBrandInput>
  }

  export type ProductUpdateManyWithWhereWithoutBrandInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutBrandInput>
  }

  export type MediaItemUpsertWithWhereUniqueWithoutBrandInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutBrandInput, MediaItemUncheckedUpdateWithoutBrandInput>
    create: XOR<MediaItemCreateWithoutBrandInput, MediaItemUncheckedCreateWithoutBrandInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutBrandInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutBrandInput, MediaItemUncheckedUpdateWithoutBrandInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutBrandInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutBrandInput>
  }

  export type UserUpsertWithoutCreatedBrandsInput = {
    update: XOR<UserUpdateWithoutCreatedBrandsInput, UserUncheckedUpdateWithoutCreatedBrandsInput>
    create: XOR<UserCreateWithoutCreatedBrandsInput, UserUncheckedCreateWithoutCreatedBrandsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedBrandsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedBrandsInput, UserUncheckedUpdateWithoutCreatedBrandsInput>
  }

  export type UserUpdateWithoutCreatedBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedBrandsInput = {
    update: XOR<UserUpdateWithoutUpdatedBrandsInput, UserUncheckedUpdateWithoutUpdatedBrandsInput>
    create: XOR<UserCreateWithoutUpdatedBrandsInput, UserUncheckedCreateWithoutUpdatedBrandsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedBrandsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedBrandsInput, UserUncheckedUpdateWithoutUpdatedBrandsInput>
  }

  export type UserUpdateWithoutUpdatedBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BrandCreateWithoutCategoriesInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    products?: ProductCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemCreateNestedManyWithoutBrandInput
    createdBy?: UserCreateNestedOneWithoutCreatedBrandsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedBrandsInput
  }

  export type BrandUncheckedCreateWithoutCategoriesInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    createdById?: string | null
    updatedById?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutCategoriesInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutCategoriesInput, BrandUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutSubCategoriesInput = {
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutCategoriesInput
    parent?: CategoryCreateNestedOneWithoutSubCategoriesInput
    productCategories?: ProductCategoryCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemCreateNestedManyWithoutCategoryInput
    createdBy?: UserCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutSubCategoriesInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutSubCategoriesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSubCategoriesInput, CategoryUncheckedCreateWithoutSubCategoriesInput>
  }

  export type CategoryCreateWithoutParentInput = {
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutCategoriesInput
    subCategories?: CategoryCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemCreateNestedManyWithoutCategoryInput
    createdBy?: UserCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    subCategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutCategoryInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type ProductCategoryCreateWithoutCategoryInput = {
    product: ProductCreateNestedOneWithoutProductCategoriesInput
  }

  export type ProductCategoryUncheckedCreateWithoutCategoryInput = {
    id?: number
    productId: string
  }

  export type ProductCategoryCreateOrConnectWithoutCategoryInput = {
    where: ProductCategoryWhereUniqueInput
    create: XOR<ProductCategoryCreateWithoutCategoryInput, ProductCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCategoryCreateManyCategoryInputEnvelope = {
    data: ProductCategoryCreateManyCategoryInput | ProductCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MediaItemCreateWithoutCategoryInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutMediaItemsInput
    product?: ProductCreateNestedOneWithoutMediaItemsInput
    createdBy?: UserCreateNestedOneWithoutCreatedMediaItemsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedMediaItemsInput
  }

  export type MediaItemUncheckedCreateWithoutCategoryInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    productId?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemCreateOrConnectWithoutCategoryInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutCategoryInput, MediaItemUncheckedCreateWithoutCategoryInput>
  }

  export type MediaItemCreateManyCategoryInputEnvelope = {
    data: MediaItemCreateManyCategoryInput | MediaItemCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedCategoriesInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedCategoriesInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedCategoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCategoriesInput, UserUncheckedCreateWithoutCreatedCategoriesInput>
  }

  export type UserCreateWithoutUpdatedCategoriesInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedCategoriesInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedCategoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedCategoriesInput, UserUncheckedCreateWithoutUpdatedCategoriesInput>
  }

  export type BrandUpsertWithoutCategoriesInput = {
    update: XOR<BrandUpdateWithoutCategoriesInput, BrandUncheckedUpdateWithoutCategoriesInput>
    create: XOR<BrandCreateWithoutCategoriesInput, BrandUncheckedCreateWithoutCategoriesInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutCategoriesInput, BrandUncheckedUpdateWithoutCategoriesInput>
  }

  export type BrandUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUpdateManyWithoutBrandNestedInput
    createdBy?: UserUpdateOneWithoutCreatedBrandsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedBrandsNestedInput
  }

  export type BrandUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type CategoryUpsertWithoutSubCategoriesInput = {
    update: XOR<CategoryUpdateWithoutSubCategoriesInput, CategoryUncheckedUpdateWithoutSubCategoriesInput>
    create: XOR<CategoryCreateWithoutSubCategoriesInput, CategoryUncheckedCreateWithoutSubCategoriesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSubCategoriesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSubCategoriesInput, CategoryUncheckedUpdateWithoutSubCategoriesInput>
  }

  export type CategoryUpdateWithoutSubCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutCategoriesNestedInput
    parent?: CategoryUpdateOneWithoutSubCategoriesNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUpdateManyWithoutCategoryNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCategoriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSubCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type ProductCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductCategoryWhereUniqueInput
    update: XOR<ProductCategoryUpdateWithoutCategoryInput, ProductCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCategoryCreateWithoutCategoryInput, ProductCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductCategoryWhereUniqueInput
    data: XOR<ProductCategoryUpdateWithoutCategoryInput, ProductCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductCategoryScalarWhereInput
    data: XOR<ProductCategoryUpdateManyMutationInput, ProductCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ProductCategoryScalarWhereInput = {
    AND?: ProductCategoryScalarWhereInput | ProductCategoryScalarWhereInput[]
    OR?: ProductCategoryScalarWhereInput[]
    NOT?: ProductCategoryScalarWhereInput | ProductCategoryScalarWhereInput[]
    id?: IntFilter<"ProductCategory"> | number
    productId?: StringFilter<"ProductCategory"> | string
    categoryId?: IntFilter<"ProductCategory"> | number
  }

  export type MediaItemUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutCategoryInput, MediaItemUncheckedUpdateWithoutCategoryInput>
    create: XOR<MediaItemCreateWithoutCategoryInput, MediaItemUncheckedCreateWithoutCategoryInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutCategoryInput, MediaItemUncheckedUpdateWithoutCategoryInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutCategoryInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutCategoryInput>
  }

  export type UserUpsertWithoutCreatedCategoriesInput = {
    update: XOR<UserUpdateWithoutCreatedCategoriesInput, UserUncheckedUpdateWithoutCreatedCategoriesInput>
    create: XOR<UserCreateWithoutCreatedCategoriesInput, UserUncheckedCreateWithoutCreatedCategoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCategoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCategoriesInput, UserUncheckedUpdateWithoutCreatedCategoriesInput>
  }

  export type UserUpdateWithoutCreatedCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedCategoriesInput = {
    update: XOR<UserUpdateWithoutUpdatedCategoriesInput, UserUncheckedUpdateWithoutUpdatedCategoriesInput>
    create: XOR<UserCreateWithoutUpdatedCategoriesInput, UserUncheckedCreateWithoutUpdatedCategoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedCategoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedCategoriesInput, UserUncheckedUpdateWithoutUpdatedCategoriesInput>
  }

  export type UserUpdateWithoutUpdatedCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductCreateWithoutColorVariantsInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateWithoutColorVariantsInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutColorVariantsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutColorVariantsInput, ProductUncheckedCreateWithoutColorVariantsInput>
  }

  export type SizeVariantsCreateWithoutColorVariantInput = {
    id: string
    size: string
    availability?: $Enums.SizeVariantsAvailability
    isSelected?: boolean
    originalOrder?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeVariantsUncheckedCreateWithoutColorVariantInput = {
    id: string
    size: string
    availability?: $Enums.SizeVariantsAvailability
    isSelected?: boolean
    originalOrder?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeVariantsCreateOrConnectWithoutColorVariantInput = {
    where: SizeVariantsWhereUniqueInput
    create: XOR<SizeVariantsCreateWithoutColorVariantInput, SizeVariantsUncheckedCreateWithoutColorVariantInput>
  }

  export type SizeVariantsCreateManyColorVariantInputEnvelope = {
    data: SizeVariantsCreateManyColorVariantInput | SizeVariantsCreateManyColorVariantInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutColorVariantsInput = {
    update: XOR<ProductUpdateWithoutColorVariantsInput, ProductUncheckedUpdateWithoutColorVariantsInput>
    create: XOR<ProductCreateWithoutColorVariantsInput, ProductUncheckedCreateWithoutColorVariantsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutColorVariantsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutColorVariantsInput, ProductUncheckedUpdateWithoutColorVariantsInput>
  }

  export type ProductUpdateWithoutColorVariantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutColorVariantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type SizeVariantsUpsertWithWhereUniqueWithoutColorVariantInput = {
    where: SizeVariantsWhereUniqueInput
    update: XOR<SizeVariantsUpdateWithoutColorVariantInput, SizeVariantsUncheckedUpdateWithoutColorVariantInput>
    create: XOR<SizeVariantsCreateWithoutColorVariantInput, SizeVariantsUncheckedCreateWithoutColorVariantInput>
  }

  export type SizeVariantsUpdateWithWhereUniqueWithoutColorVariantInput = {
    where: SizeVariantsWhereUniqueInput
    data: XOR<SizeVariantsUpdateWithoutColorVariantInput, SizeVariantsUncheckedUpdateWithoutColorVariantInput>
  }

  export type SizeVariantsUpdateManyWithWhereWithoutColorVariantInput = {
    where: SizeVariantsScalarWhereInput
    data: XOR<SizeVariantsUpdateManyMutationInput, SizeVariantsUncheckedUpdateManyWithoutColorVariantInput>
  }

  export type SizeVariantsScalarWhereInput = {
    AND?: SizeVariantsScalarWhereInput | SizeVariantsScalarWhereInput[]
    OR?: SizeVariantsScalarWhereInput[]
    NOT?: SizeVariantsScalarWhereInput | SizeVariantsScalarWhereInput[]
    id?: StringFilter<"SizeVariants"> | string
    size?: StringFilter<"SizeVariants"> | string
    availability?: EnumSizeVariantsAvailabilityFilter<"SizeVariants"> | $Enums.SizeVariantsAvailability
    isSelected?: BoolFilter<"SizeVariants"> | boolean
    originalOrder?: IntNullableFilter<"SizeVariants"> | number | null
    colorVariantId?: StringFilter<"SizeVariants"> | string
    createdAt?: DateTimeFilter<"SizeVariants"> | Date | string
    updatedAt?: DateTimeFilter<"SizeVariants"> | Date | string
  }

  export type ColorVariantsCreateWithoutSizesInput = {
    id: string
    colorName: string
    colorCode?: string | null
    price?: string | null
    hexColor?: string | null
    availability?: $Enums.ColorVariantsAvailability
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutColorVariantsInput
  }

  export type ColorVariantsUncheckedCreateWithoutSizesInput = {
    id: string
    colorName: string
    colorCode?: string | null
    price?: string | null
    hexColor?: string | null
    availability?: $Enums.ColorVariantsAvailability
    sku?: string | null
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColorVariantsCreateOrConnectWithoutSizesInput = {
    where: ColorVariantsWhereUniqueInput
    create: XOR<ColorVariantsCreateWithoutSizesInput, ColorVariantsUncheckedCreateWithoutSizesInput>
  }

  export type ColorVariantsUpsertWithoutSizesInput = {
    update: XOR<ColorVariantsUpdateWithoutSizesInput, ColorVariantsUncheckedUpdateWithoutSizesInput>
    create: XOR<ColorVariantsCreateWithoutSizesInput, ColorVariantsUncheckedCreateWithoutSizesInput>
    where?: ColorVariantsWhereInput
  }

  export type ColorVariantsUpdateToOneWithWhereWithoutSizesInput = {
    where?: ColorVariantsWhereInput
    data: XOR<ColorVariantsUpdateWithoutSizesInput, ColorVariantsUncheckedUpdateWithoutSizesInput>
  }

  export type ColorVariantsUpdateWithoutSizesInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutColorVariantsNestedInput
  }

  export type ColorVariantsUncheckedUpdateWithoutSizesInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandCreateWithoutMediaItemsInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    categories?: CategoryCreateNestedManyWithoutBrandInput
    products?: ProductCreateNestedManyWithoutBrandInput
    createdBy?: UserCreateNestedOneWithoutCreatedBrandsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedBrandsInput
  }

  export type BrandUncheckedCreateWithoutMediaItemsInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    createdById?: string | null
    updatedById?: string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutBrandInput
    products?: ProductUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutMediaItemsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutMediaItemsInput, BrandUncheckedCreateWithoutMediaItemsInput>
  }

  export type CategoryCreateWithoutMediaItemsInput = {
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutCategoriesInput
    parent?: CategoryCreateNestedOneWithoutSubCategoriesInput
    subCategories?: CategoryCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryCreateNestedManyWithoutCategoryInput
    createdBy?: UserCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutMediaItemsInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    subCategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutMediaItemsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutMediaItemsInput, CategoryUncheckedCreateWithoutMediaItemsInput>
  }

  export type ProductCreateWithoutMediaItemsInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateWithoutMediaItemsInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutMediaItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutMediaItemsInput, ProductUncheckedCreateWithoutMediaItemsInput>
  }

  export type UserCreateWithoutCreatedMediaItemsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedMediaItemsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedMediaItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedMediaItemsInput, UserUncheckedCreateWithoutCreatedMediaItemsInput>
  }

  export type UserCreateWithoutUpdatedMediaItemsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedMediaItemsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedMediaItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedMediaItemsInput, UserUncheckedCreateWithoutUpdatedMediaItemsInput>
  }

  export type BrandUpsertWithoutMediaItemsInput = {
    update: XOR<BrandUpdateWithoutMediaItemsInput, BrandUncheckedUpdateWithoutMediaItemsInput>
    create: XOR<BrandCreateWithoutMediaItemsInput, BrandUncheckedCreateWithoutMediaItemsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutMediaItemsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutMediaItemsInput, BrandUncheckedUpdateWithoutMediaItemsInput>
  }

  export type BrandUpdateWithoutMediaItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUpdateManyWithoutBrandNestedInput
    products?: ProductUpdateManyWithoutBrandNestedInput
    createdBy?: UserUpdateOneWithoutCreatedBrandsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedBrandsNestedInput
  }

  export type BrandUncheckedUpdateWithoutMediaItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUncheckedUpdateManyWithoutBrandNestedInput
    products?: ProductUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type CategoryUpsertWithoutMediaItemsInput = {
    update: XOR<CategoryUpdateWithoutMediaItemsInput, CategoryUncheckedUpdateWithoutMediaItemsInput>
    create: XOR<CategoryCreateWithoutMediaItemsInput, CategoryUncheckedCreateWithoutMediaItemsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutMediaItemsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutMediaItemsInput, CategoryUncheckedUpdateWithoutMediaItemsInput>
  }

  export type CategoryUpdateWithoutMediaItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutCategoriesNestedInput
    parent?: CategoryUpdateOneWithoutSubCategoriesNestedInput
    subCategories?: CategoryUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutCategoryNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCategoriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutMediaItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    subCategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ProductUpsertWithoutMediaItemsInput = {
    update: XOR<ProductUpdateWithoutMediaItemsInput, ProductUncheckedUpdateWithoutMediaItemsInput>
    create: XOR<ProductCreateWithoutMediaItemsInput, ProductUncheckedCreateWithoutMediaItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutMediaItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutMediaItemsInput, ProductUncheckedUpdateWithoutMediaItemsInput>
  }

  export type ProductUpdateWithoutMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserUpsertWithoutCreatedMediaItemsInput = {
    update: XOR<UserUpdateWithoutCreatedMediaItemsInput, UserUncheckedUpdateWithoutCreatedMediaItemsInput>
    create: XOR<UserCreateWithoutCreatedMediaItemsInput, UserUncheckedCreateWithoutCreatedMediaItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedMediaItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedMediaItemsInput, UserUncheckedUpdateWithoutCreatedMediaItemsInput>
  }

  export type UserUpdateWithoutCreatedMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedMediaItemsInput = {
    update: XOR<UserUpdateWithoutUpdatedMediaItemsInput, UserUncheckedUpdateWithoutUpdatedMediaItemsInput>
    create: XOR<UserCreateWithoutUpdatedMediaItemsInput, UserUncheckedCreateWithoutUpdatedMediaItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedMediaItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedMediaItemsInput, UserUncheckedUpdateWithoutUpdatedMediaItemsInput>
  }

  export type UserUpdateWithoutUpdatedMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedMediaItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutScrapingJobsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutScrapingJobsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutScrapingJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScrapingJobsInput, UserUncheckedCreateWithoutScrapingJobsInput>
  }

  export type UserUpsertWithoutScrapingJobsInput = {
    update: XOR<UserUpdateWithoutScrapingJobsInput, UserUncheckedUpdateWithoutScrapingJobsInput>
    create: XOR<UserCreateWithoutScrapingJobsInput, UserUncheckedCreateWithoutScrapingJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScrapingJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScrapingJobsInput, UserUncheckedUpdateWithoutScrapingJobsInput>
  }

  export type UserUpdateWithoutScrapingJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutScrapingJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ProductCreateWithoutPriceHistoryInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateWithoutPriceHistoryInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutPriceHistoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutPriceHistoryInput, ProductUncheckedCreateWithoutPriceHistoryInput>
  }

  export type ProductUpsertWithoutPriceHistoryInput = {
    update: XOR<ProductUpdateWithoutPriceHistoryInput, ProductUncheckedUpdateWithoutPriceHistoryInput>
    create: XOR<ProductCreateWithoutPriceHistoryInput, ProductUncheckedCreateWithoutPriceHistoryInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutPriceHistoryInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutPriceHistoryInput, ProductUncheckedUpdateWithoutPriceHistoryInput>
  }

  export type ProductUpdateWithoutPriceHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutPriceHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutColorHistoryInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateWithoutColorHistoryInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutColorHistoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutColorHistoryInput, ProductUncheckedCreateWithoutColorHistoryInput>
  }

  export type ProductUpsertWithoutColorHistoryInput = {
    update: XOR<ProductUpdateWithoutColorHistoryInput, ProductUncheckedUpdateWithoutColorHistoryInput>
    create: XOR<ProductCreateWithoutColorHistoryInput, ProductUncheckedCreateWithoutColorHistoryInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutColorHistoryInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutColorHistoryInput, ProductUncheckedUpdateWithoutColorHistoryInput>
  }

  export type ProductUpdateWithoutColorHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutColorHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutSizeHistoryInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    productCategories?: ProductCategoryCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateWithoutSizeHistoryInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    productCategories?: ProductCategoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSizeHistoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSizeHistoryInput, ProductUncheckedCreateWithoutSizeHistoryInput>
  }

  export type ProductUpsertWithoutSizeHistoryInput = {
    update: XOR<ProductUpdateWithoutSizeHistoryInput, ProductUncheckedUpdateWithoutSizeHistoryInput>
    create: XOR<ProductCreateWithoutSizeHistoryInput, ProductUncheckedCreateWithoutSizeHistoryInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSizeHistoryInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSizeHistoryInput, ProductUncheckedUpdateWithoutSizeHistoryInput>
  }

  export type ProductUpdateWithoutSizeHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutSizeHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ColorVariantsCreateWithoutProductInput = {
    id: string
    colorName: string
    colorCode?: string | null
    price?: string | null
    hexColor?: string | null
    availability?: $Enums.ColorVariantsAvailability
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sizes?: SizeVariantsCreateNestedManyWithoutColorVariantInput
  }

  export type ColorVariantsUncheckedCreateWithoutProductInput = {
    id: string
    colorName: string
    colorCode?: string | null
    price?: string | null
    hexColor?: string | null
    availability?: $Enums.ColorVariantsAvailability
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sizes?: SizeVariantsUncheckedCreateNestedManyWithoutColorVariantInput
  }

  export type ColorVariantsCreateOrConnectWithoutProductInput = {
    where: ColorVariantsWhereUniqueInput
    create: XOR<ColorVariantsCreateWithoutProductInput, ColorVariantsUncheckedCreateWithoutProductInput>
  }

  export type ColorVariantsCreateManyProductInputEnvelope = {
    data: ColorVariantsCreateManyProductInput | ColorVariantsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type PriceHistoryCreateWithoutProductInput = {
    oldPrice: number
    newPrice: number
    changedAt?: Date | string
  }

  export type PriceHistoryUncheckedCreateWithoutProductInput = {
    id?: number
    oldPrice: number
    newPrice: number
    changedAt?: Date | string
  }

  export type PriceHistoryCreateOrConnectWithoutProductInput = {
    where: PriceHistoryWhereUniqueInput
    create: XOR<PriceHistoryCreateWithoutProductInput, PriceHistoryUncheckedCreateWithoutProductInput>
  }

  export type PriceHistoryCreateManyProductInputEnvelope = {
    data: PriceHistoryCreateManyProductInput | PriceHistoryCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ColorHistoryCreateWithoutProductInput = {
    action: string
    colorName: string
    colorCode?: string | null
    hexColor?: string | null
    changedAt?: Date | string
  }

  export type ColorHistoryUncheckedCreateWithoutProductInput = {
    id?: number
    action: string
    colorName: string
    colorCode?: string | null
    hexColor?: string | null
    changedAt?: Date | string
  }

  export type ColorHistoryCreateOrConnectWithoutProductInput = {
    where: ColorHistoryWhereUniqueInput
    create: XOR<ColorHistoryCreateWithoutProductInput, ColorHistoryUncheckedCreateWithoutProductInput>
  }

  export type ColorHistoryCreateManyProductInputEnvelope = {
    data: ColorHistoryCreateManyProductInput | ColorHistoryCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type SizeHistoryCreateWithoutProductInput = {
    colorId?: string | null
    action: string
    size: string
    availability?: string | null
    changedAt?: Date | string
  }

  export type SizeHistoryUncheckedCreateWithoutProductInput = {
    id?: number
    colorId?: string | null
    action: string
    size: string
    availability?: string | null
    changedAt?: Date | string
  }

  export type SizeHistoryCreateOrConnectWithoutProductInput = {
    where: SizeHistoryWhereUniqueInput
    create: XOR<SizeHistoryCreateWithoutProductInput, SizeHistoryUncheckedCreateWithoutProductInput>
  }

  export type SizeHistoryCreateManyProductInputEnvelope = {
    data: SizeHistoryCreateManyProductInput | SizeHistoryCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type BrandCreateWithoutProductsInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    categories?: CategoryCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemCreateNestedManyWithoutBrandInput
    createdBy?: UserCreateNestedOneWithoutCreatedBrandsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedBrandsInput
  }

  export type BrandUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    createdById?: string | null
    updatedById?: string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutBrandInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandCreateOrConnectWithoutProductsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
  }

  export type ProductCategoryCreateWithoutProductInput = {
    category: CategoryCreateNestedOneWithoutProductCategoriesInput
  }

  export type ProductCategoryUncheckedCreateWithoutProductInput = {
    id?: number
    categoryId: number
  }

  export type ProductCategoryCreateOrConnectWithoutProductInput = {
    where: ProductCategoryWhereUniqueInput
    create: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput>
  }

  export type ProductCategoryCreateManyProductInputEnvelope = {
    data: ProductCategoryCreateManyProductInput | ProductCategoryCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type MediaItemCreateWithoutProductInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand?: BrandCreateNestedOneWithoutMediaItemsInput
    category?: CategoryCreateNestedOneWithoutMediaItemsInput
    createdBy?: UserCreateNestedOneWithoutCreatedMediaItemsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedMediaItemsInput
  }

  export type MediaItemUncheckedCreateWithoutProductInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    categoryId?: number | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemCreateOrConnectWithoutProductInput = {
    where: MediaItemWhereUniqueInput
    create: XOR<MediaItemCreateWithoutProductInput, MediaItemUncheckedCreateWithoutProductInput>
  }

  export type MediaItemCreateManyProductInputEnvelope = {
    data: MediaItemCreateManyProductInput | MediaItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedProductsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedProductsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
  }

  export type UserCreateWithoutUpdatedProductsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUserInput
    createdBrands?: BrandCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    createdMediaItems?: MediaItemCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedProductsInput = {
    id?: string
    name?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountUncheckedCreateNestedOneWithoutUserInput
    createdBrands?: BrandUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBrands?: BrandUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    createdMediaItems?: MediaItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMediaItems?: MediaItemUncheckedCreateNestedManyWithoutUpdatedByInput
    scrapingJobs?: ScrapingJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedProductsInput, UserUncheckedCreateWithoutUpdatedProductsInput>
  }

  export type ColorVariantsUpsertWithWhereUniqueWithoutProductInput = {
    where: ColorVariantsWhereUniqueInput
    update: XOR<ColorVariantsUpdateWithoutProductInput, ColorVariantsUncheckedUpdateWithoutProductInput>
    create: XOR<ColorVariantsCreateWithoutProductInput, ColorVariantsUncheckedCreateWithoutProductInput>
  }

  export type ColorVariantsUpdateWithWhereUniqueWithoutProductInput = {
    where: ColorVariantsWhereUniqueInput
    data: XOR<ColorVariantsUpdateWithoutProductInput, ColorVariantsUncheckedUpdateWithoutProductInput>
  }

  export type ColorVariantsUpdateManyWithWhereWithoutProductInput = {
    where: ColorVariantsScalarWhereInput
    data: XOR<ColorVariantsUpdateManyMutationInput, ColorVariantsUncheckedUpdateManyWithoutProductInput>
  }

  export type ColorVariantsScalarWhereInput = {
    AND?: ColorVariantsScalarWhereInput | ColorVariantsScalarWhereInput[]
    OR?: ColorVariantsScalarWhereInput[]
    NOT?: ColorVariantsScalarWhereInput | ColorVariantsScalarWhereInput[]
    id?: StringFilter<"ColorVariants"> | string
    colorName?: StringFilter<"ColorVariants"> | string
    colorCode?: StringNullableFilter<"ColorVariants"> | string | null
    price?: StringNullableFilter<"ColorVariants"> | string | null
    hexColor?: StringNullableFilter<"ColorVariants"> | string | null
    availability?: EnumColorVariantsAvailabilityFilter<"ColorVariants"> | $Enums.ColorVariantsAvailability
    sku?: StringNullableFilter<"ColorVariants"> | string | null
    productId?: StringFilter<"ColorVariants"> | string
    createdAt?: DateTimeFilter<"ColorVariants"> | Date | string
    updatedAt?: DateTimeFilter<"ColorVariants"> | Date | string
  }

  export type PriceHistoryUpsertWithWhereUniqueWithoutProductInput = {
    where: PriceHistoryWhereUniqueInput
    update: XOR<PriceHistoryUpdateWithoutProductInput, PriceHistoryUncheckedUpdateWithoutProductInput>
    create: XOR<PriceHistoryCreateWithoutProductInput, PriceHistoryUncheckedCreateWithoutProductInput>
  }

  export type PriceHistoryUpdateWithWhereUniqueWithoutProductInput = {
    where: PriceHistoryWhereUniqueInput
    data: XOR<PriceHistoryUpdateWithoutProductInput, PriceHistoryUncheckedUpdateWithoutProductInput>
  }

  export type PriceHistoryUpdateManyWithWhereWithoutProductInput = {
    where: PriceHistoryScalarWhereInput
    data: XOR<PriceHistoryUpdateManyMutationInput, PriceHistoryUncheckedUpdateManyWithoutProductInput>
  }

  export type PriceHistoryScalarWhereInput = {
    AND?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
    OR?: PriceHistoryScalarWhereInput[]
    NOT?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
    id?: IntFilter<"PriceHistory"> | number
    productId?: StringFilter<"PriceHistory"> | string
    oldPrice?: FloatFilter<"PriceHistory"> | number
    newPrice?: FloatFilter<"PriceHistory"> | number
    changedAt?: DateTimeFilter<"PriceHistory"> | Date | string
  }

  export type ColorHistoryUpsertWithWhereUniqueWithoutProductInput = {
    where: ColorHistoryWhereUniqueInput
    update: XOR<ColorHistoryUpdateWithoutProductInput, ColorHistoryUncheckedUpdateWithoutProductInput>
    create: XOR<ColorHistoryCreateWithoutProductInput, ColorHistoryUncheckedCreateWithoutProductInput>
  }

  export type ColorHistoryUpdateWithWhereUniqueWithoutProductInput = {
    where: ColorHistoryWhereUniqueInput
    data: XOR<ColorHistoryUpdateWithoutProductInput, ColorHistoryUncheckedUpdateWithoutProductInput>
  }

  export type ColorHistoryUpdateManyWithWhereWithoutProductInput = {
    where: ColorHistoryScalarWhereInput
    data: XOR<ColorHistoryUpdateManyMutationInput, ColorHistoryUncheckedUpdateManyWithoutProductInput>
  }

  export type ColorHistoryScalarWhereInput = {
    AND?: ColorHistoryScalarWhereInput | ColorHistoryScalarWhereInput[]
    OR?: ColorHistoryScalarWhereInput[]
    NOT?: ColorHistoryScalarWhereInput | ColorHistoryScalarWhereInput[]
    id?: IntFilter<"ColorHistory"> | number
    productId?: StringFilter<"ColorHistory"> | string
    action?: StringFilter<"ColorHistory"> | string
    colorName?: StringFilter<"ColorHistory"> | string
    colorCode?: StringNullableFilter<"ColorHistory"> | string | null
    hexColor?: StringNullableFilter<"ColorHistory"> | string | null
    changedAt?: DateTimeFilter<"ColorHistory"> | Date | string
  }

  export type SizeHistoryUpsertWithWhereUniqueWithoutProductInput = {
    where: SizeHistoryWhereUniqueInput
    update: XOR<SizeHistoryUpdateWithoutProductInput, SizeHistoryUncheckedUpdateWithoutProductInput>
    create: XOR<SizeHistoryCreateWithoutProductInput, SizeHistoryUncheckedCreateWithoutProductInput>
  }

  export type SizeHistoryUpdateWithWhereUniqueWithoutProductInput = {
    where: SizeHistoryWhereUniqueInput
    data: XOR<SizeHistoryUpdateWithoutProductInput, SizeHistoryUncheckedUpdateWithoutProductInput>
  }

  export type SizeHistoryUpdateManyWithWhereWithoutProductInput = {
    where: SizeHistoryScalarWhereInput
    data: XOR<SizeHistoryUpdateManyMutationInput, SizeHistoryUncheckedUpdateManyWithoutProductInput>
  }

  export type SizeHistoryScalarWhereInput = {
    AND?: SizeHistoryScalarWhereInput | SizeHistoryScalarWhereInput[]
    OR?: SizeHistoryScalarWhereInput[]
    NOT?: SizeHistoryScalarWhereInput | SizeHistoryScalarWhereInput[]
    id?: IntFilter<"SizeHistory"> | number
    productId?: StringFilter<"SizeHistory"> | string
    colorId?: StringNullableFilter<"SizeHistory"> | string | null
    action?: StringFilter<"SizeHistory"> | string
    size?: StringFilter<"SizeHistory"> | string
    availability?: StringNullableFilter<"SizeHistory"> | string | null
    changedAt?: DateTimeFilter<"SizeHistory"> | Date | string
  }

  export type BrandUpsertWithoutProductsInput = {
    update: XOR<BrandUpdateWithoutProductsInput, BrandUncheckedUpdateWithoutProductsInput>
    create: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutProductsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutProductsInput, BrandUncheckedUpdateWithoutProductsInput>
  }

  export type BrandUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUpdateManyWithoutBrandNestedInput
    createdBy?: UserUpdateOneWithoutCreatedBrandsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedBrandsNestedInput
  }

  export type BrandUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUncheckedUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type ProductCategoryUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductCategoryWhereUniqueInput
    update: XOR<ProductCategoryUpdateWithoutProductInput, ProductCategoryUncheckedUpdateWithoutProductInput>
    create: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput>
  }

  export type ProductCategoryUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductCategoryWhereUniqueInput
    data: XOR<ProductCategoryUpdateWithoutProductInput, ProductCategoryUncheckedUpdateWithoutProductInput>
  }

  export type ProductCategoryUpdateManyWithWhereWithoutProductInput = {
    where: ProductCategoryScalarWhereInput
    data: XOR<ProductCategoryUpdateManyMutationInput, ProductCategoryUncheckedUpdateManyWithoutProductInput>
  }

  export type MediaItemUpsertWithWhereUniqueWithoutProductInput = {
    where: MediaItemWhereUniqueInput
    update: XOR<MediaItemUpdateWithoutProductInput, MediaItemUncheckedUpdateWithoutProductInput>
    create: XOR<MediaItemCreateWithoutProductInput, MediaItemUncheckedCreateWithoutProductInput>
  }

  export type MediaItemUpdateWithWhereUniqueWithoutProductInput = {
    where: MediaItemWhereUniqueInput
    data: XOR<MediaItemUpdateWithoutProductInput, MediaItemUncheckedUpdateWithoutProductInput>
  }

  export type MediaItemUpdateManyWithWhereWithoutProductInput = {
    where: MediaItemScalarWhereInput
    data: XOR<MediaItemUpdateManyMutationInput, MediaItemUncheckedUpdateManyWithoutProductInput>
  }

  export type UserUpsertWithoutCreatedProductsInput = {
    update: XOR<UserUpdateWithoutCreatedProductsInput, UserUncheckedUpdateWithoutCreatedProductsInput>
    create: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProductsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProductsInput, UserUncheckedUpdateWithoutCreatedProductsInput>
  }

  export type UserUpdateWithoutCreatedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedProductsInput = {
    update: XOR<UserUpdateWithoutUpdatedProductsInput, UserUncheckedUpdateWithoutUpdatedProductsInput>
    create: XOR<UserCreateWithoutUpdatedProductsInput, UserUncheckedCreateWithoutUpdatedProductsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedProductsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedProductsInput, UserUncheckedUpdateWithoutUpdatedProductsInput>
  }

  export type UserUpdateWithoutUpdatedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    createdMediaItems?: MediaItemUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUncheckedUpdateOneWithoutUserNestedInput
    createdBrands?: BrandUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBrands?: BrandUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    createdMediaItems?: MediaItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMediaItems?: MediaItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    scrapingJobs?: ScrapingJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryCreateWithoutProductCategoriesInput = {
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: BrandCreateNestedOneWithoutCategoriesInput
    parent?: CategoryCreateNestedOneWithoutSubCategoriesInput
    subCategories?: CategoryCreateNestedManyWithoutParentInput
    mediaItems?: MediaItemCreateNestedManyWithoutCategoryInput
    createdBy?: UserCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutProductCategoriesInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    subCategories?: CategoryUncheckedCreateNestedManyWithoutParentInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutProductCategoriesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductCategoriesInput, CategoryUncheckedCreateWithoutProductCategoriesInput>
  }

  export type ProductCreateWithoutProductCategoriesInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    colorVariants?: ColorVariantsCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryCreateNestedManyWithoutProductInput
    brand: BrandCreateNestedOneWithoutProductsInput
    mediaItems?: MediaItemCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedProductsInput
  }

  export type ProductUncheckedCreateWithoutProductCategoriesInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    colorVariants?: ColorVariantsUncheckedCreateNestedManyWithoutProductInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutProductInput
    colorHistory?: ColorHistoryUncheckedCreateNestedManyWithoutProductInput
    sizeHistory?: SizeHistoryUncheckedCreateNestedManyWithoutProductInput
    mediaItems?: MediaItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductCategoriesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductCategoriesInput, ProductUncheckedCreateWithoutProductCategoriesInput>
  }

  export type CategoryUpsertWithoutProductCategoriesInput = {
    update: XOR<CategoryUpdateWithoutProductCategoriesInput, CategoryUncheckedUpdateWithoutProductCategoriesInput>
    create: XOR<CategoryCreateWithoutProductCategoriesInput, CategoryUncheckedCreateWithoutProductCategoriesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductCategoriesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductCategoriesInput, CategoryUncheckedUpdateWithoutProductCategoriesInput>
  }

  export type CategoryUpdateWithoutProductCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutCategoriesNestedInput
    parent?: CategoryUpdateOneWithoutSubCategoriesNestedInput
    subCategories?: CategoryUpdateManyWithoutParentNestedInput
    mediaItems?: MediaItemUpdateManyWithoutCategoryNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCategoriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutProductCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    subCategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ProductUpsertWithoutProductCategoriesInput = {
    update: XOR<ProductUpdateWithoutProductCategoriesInput, ProductUncheckedUpdateWithoutProductCategoriesInput>
    create: XOR<ProductCreateWithoutProductCategoriesInput, ProductUncheckedCreateWithoutProductCategoriesInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductCategoriesInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductCategoriesInput, ProductUncheckedUpdateWithoutProductCategoriesInput>
  }

  export type ProductUpdateWithoutProductCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type BrandCreateManyCreatedByInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    updatedById?: string | null
  }

  export type BrandCreateManyUpdatedByInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    url?: string | null
    apiProductsUrl?: string | null
    apiProductDetailsUrl?: string | null
    createdById?: string | null
  }

  export type CategoryCreateManyCreatedByInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type CategoryCreateManyUpdatedByInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type ProductCreateManyCreatedByInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type ProductCreateManyUpdatedByInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    brandId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type MediaItemCreateManyCreatedByInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    categoryId?: number | null
    productId?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaItemCreateManyUpdatedByInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    categoryId?: number | null
    productId?: string | null
    createdById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingJobCreateManyUserInput = {
    id?: string
    name: string
    status?: $Enums.ScrapingjobStatus
    type: $Enums.ScrapingjobType
    targetId?: string | null
    targetName?: string | null
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUpdateWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUpdateManyWithoutBrandNestedInput
    products?: ProductUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUpdateManyWithoutBrandNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedBrandsNestedInput
  }

  export type BrandUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUncheckedUpdateManyWithoutBrandNestedInput
    products?: ProductUncheckedUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandUpdateWithoutUpdatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUpdateManyWithoutBrandNestedInput
    products?: ProductUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUpdateManyWithoutBrandNestedInput
    createdBy?: UserUpdateOneWithoutCreatedBrandsNestedInput
  }

  export type BrandUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUncheckedUpdateManyWithoutBrandNestedInput
    products?: ProductUncheckedUpdateManyWithoutBrandNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiProductDetailsUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUpdateWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutCategoriesNestedInput
    parent?: CategoryUpdateOneWithoutSubCategoriesNestedInput
    subCategories?: CategoryUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUpdateManyWithoutCategoryNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    subCategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUpdateWithoutUpdatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutCategoriesNestedInput
    parent?: CategoryUpdateOneWithoutSubCategoriesNestedInput
    subCategories?: CategoryUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUpdateManyWithoutCategoryNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    subCategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneRequiredWithoutProductsNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaItemUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutMediaItemsNestedInput
    category?: CategoryUpdateOneWithoutMediaItemsNestedInput
    product?: ProductUpdateOneWithoutMediaItemsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedMediaItemsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutMediaItemsNestedInput
    category?: CategoryUpdateOneWithoutMediaItemsNestedInput
    product?: ProductUpdateOneWithoutMediaItemsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedMediaItemsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumScrapingjobStatusFieldUpdateOperationsInput | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFieldUpdateOperationsInput | $Enums.ScrapingjobType
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetName?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumScrapingjobStatusFieldUpdateOperationsInput | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFieldUpdateOperationsInput | $Enums.ScrapingjobType
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetName?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumScrapingjobStatusFieldUpdateOperationsInput | $Enums.ScrapingjobStatus
    type?: EnumScrapingjobTypeFieldUpdateOperationsInput | $Enums.ScrapingjobType
    targetId?: NullableStringFieldUpdateOperationsInput | string | null
    targetName?: NullableStringFieldUpdateOperationsInput | string | null
    progress?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateManyBrandInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    parentId?: number | null
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ProductCreateManyBrandInput = {
    id: string
    name: string
    slug: string
    basePrice?: string | null
    primaryImage?: string | null
    currencyCode?: string | null
    url?: string | null
    description?: string | null
    metaTitle?: string | null
    metaDescription?: string | null
    productCode?: string | null
    composition?: string | null
    careInstructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type MediaItemCreateManyBrandInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    categoryId?: number | null
    productId?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateWithoutBrandInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutSubCategoriesNestedInput
    subCategories?: CategoryUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUpdateManyWithoutCategoryNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCategoriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    subCategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    colorVariants?: ColorVariantsUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    colorVariants?: ColorVariantsUncheckedUpdateManyWithoutProductNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutProductNestedInput
    colorHistory?: ColorHistoryUncheckedUpdateManyWithoutProductNestedInput
    sizeHistory?: SizeHistoryUncheckedUpdateManyWithoutProductNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutProductNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    basePrice?: NullableStringFieldUpdateOperationsInput | string | null
    primaryImage?: NullableStringFieldUpdateOperationsInput | string | null
    currencyCode?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    productCode?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: NullableStringFieldUpdateOperationsInput | string | null
    careInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaItemUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutMediaItemsNestedInput
    product?: ProductUpdateOneWithoutMediaItemsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedMediaItemsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedMediaItemsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateManyParentInput = {
    id?: number
    name: string
    slug: string
    level: number
    sortOrder?: number
    isActive?: boolean
    gender?: string | null
    brandId: number
    apiId?: string | null
    isLeaf?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ProductCategoryCreateManyCategoryInput = {
    id?: number
    productId: string
  }

  export type MediaItemCreateManyCategoryInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    productId?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateWithoutParentInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneRequiredWithoutCategoriesNestedInput
    subCategories?: CategoryUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUpdateManyWithoutCategoryNestedInput
    createdBy?: UserUpdateOneWithoutCreatedCategoriesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    subCategories?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    productCategories?: ProductCategoryUncheckedUpdateManyWithoutCategoryNestedInput
    mediaItems?: MediaItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: IntFieldUpdateOperationsInput | number
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    isLeaf?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCategoryUpdateWithoutCategoryInput = {
    product?: ProductUpdateOneRequiredWithoutProductCategoriesNestedInput
  }

  export type ProductCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type MediaItemUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutMediaItemsNestedInput
    product?: ProductUpdateOneWithoutMediaItemsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedMediaItemsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedMediaItemsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeVariantsCreateManyColorVariantInput = {
    id: string
    size: string
    availability?: $Enums.SizeVariantsAvailability
    isSelected?: boolean
    originalOrder?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeVariantsUpdateWithoutColorVariantInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: EnumSizeVariantsAvailabilityFieldUpdateOperationsInput | $Enums.SizeVariantsAvailability
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    originalOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeVariantsUncheckedUpdateWithoutColorVariantInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: EnumSizeVariantsAvailabilityFieldUpdateOperationsInput | $Enums.SizeVariantsAvailability
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    originalOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeVariantsUncheckedUpdateManyWithoutColorVariantInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: EnumSizeVariantsAvailabilityFieldUpdateOperationsInput | $Enums.SizeVariantsAvailability
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    originalOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorVariantsCreateManyProductInput = {
    id: string
    colorName: string
    colorCode?: string | null
    price?: string | null
    hexColor?: string | null
    availability?: $Enums.ColorVariantsAvailability
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PriceHistoryCreateManyProductInput = {
    id?: number
    oldPrice: number
    newPrice: number
    changedAt?: Date | string
  }

  export type ColorHistoryCreateManyProductInput = {
    id?: number
    action: string
    colorName: string
    colorCode?: string | null
    hexColor?: string | null
    changedAt?: Date | string
  }

  export type SizeHistoryCreateManyProductInput = {
    id?: number
    colorId?: string | null
    action: string
    size: string
    availability?: string | null
    changedAt?: Date | string
  }

  export type ProductCategoryCreateManyProductInput = {
    id?: number
    categoryId: number
  }

  export type MediaItemCreateManyProductInput = {
    id?: string
    url: string
    fileName: string
    type: string
    apiId?: string | null
    brandId?: number | null
    categoryId?: number | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColorVariantsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizes?: SizeVariantsUpdateManyWithoutColorVariantNestedInput
  }

  export type ColorVariantsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizes?: SizeVariantsUncheckedUpdateManyWithoutColorVariantNestedInput
  }

  export type ColorVariantsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: EnumColorVariantsAvailabilityFieldUpdateOperationsInput | $Enums.ColorVariantsAvailability
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUpdateWithoutProductInput = {
    oldPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorHistoryUpdateWithoutProductInput = {
    action?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorHistoryUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColorHistoryUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    colorName?: StringFieldUpdateOperationsInput | string
    colorCode?: NullableStringFieldUpdateOperationsInput | string | null
    hexColor?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeHistoryUpdateWithoutProductInput = {
    colorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeHistoryUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeHistoryUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    colorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCategoryUpdateWithoutProductInput = {
    category?: CategoryUpdateOneRequiredWithoutProductCategoriesNestedInput
  }

  export type ProductCategoryUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCategoryUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type MediaItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: BrandUpdateOneWithoutMediaItemsNestedInput
    category?: CategoryUpdateOneWithoutMediaItemsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedMediaItemsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedMediaItemsNestedInput
  }

  export type MediaItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    apiId?: NullableStringFieldUpdateOperationsInput | string | null
    brandId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}