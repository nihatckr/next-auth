
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  password: 'password',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  expires: 'expires',
  email: 'email'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  url: 'url',
  apiProductsUrl: 'apiProductsUrl',
  apiProductDetailsUrl: 'apiProductDetailsUrl',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  level: 'level',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  gender: 'gender',
  brandId: 'brandId',
  parentId: 'parentId',
  apiId: 'apiId',
  isLeaf: 'isLeaf',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ColorVariantsScalarFieldEnum = {
  id: 'id',
  colorName: 'colorName',
  colorCode: 'colorCode',
  price: 'price',
  hexColor: 'hexColor',
  availability: 'availability',
  sku: 'sku',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SizeVariantsScalarFieldEnum = {
  id: 'id',
  size: 'size',
  availability: 'availability',
  isSelected: 'isSelected',
  originalOrder: 'originalOrder',
  colorVariantId: 'colorVariantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MediaItemScalarFieldEnum = {
  id: 'id',
  url: 'url',
  fileName: 'fileName',
  type: 'type',
  apiId: 'apiId',
  brandId: 'brandId',
  categoryId: 'categoryId',
  productId: 'productId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScrapingJobScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  type: 'type',
  targetId: 'targetId',
  targetName: 'targetName',
  progress: 'progress',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  oldPrice: 'oldPrice',
  newPrice: 'newPrice',
  changedAt: 'changedAt'
};

exports.Prisma.ColorHistoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  action: 'action',
  colorName: 'colorName',
  colorCode: 'colorCode',
  hexColor: 'hexColor',
  changedAt: 'changedAt'
};

exports.Prisma.SizeHistoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  colorId: 'colorId',
  action: 'action',
  size: 'size',
  availability: 'availability',
  changedAt: 'changedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  basePrice: 'basePrice',
  primaryImage: 'primaryImage',
  currencyCode: 'currencyCode',
  url: 'url',
  description: 'description',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  productCode: 'productCode',
  composition: 'composition',
  careInstructions: 'careInstructions',
  brandId: 'brandId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  categoryId: 'categoryId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  password: 'password',
  email: 'email',
  image: 'image'
};

exports.Prisma.PasswordResetTokenOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.BrandOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  url: 'url',
  apiProductsUrl: 'apiProductsUrl',
  apiProductDetailsUrl: 'apiProductDetailsUrl',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  gender: 'gender',
  apiId: 'apiId',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ColorVariantsOrderByRelevanceFieldEnum = {
  id: 'id',
  colorName: 'colorName',
  colorCode: 'colorCode',
  price: 'price',
  hexColor: 'hexColor',
  sku: 'sku',
  productId: 'productId'
};

exports.Prisma.SizeVariantsOrderByRelevanceFieldEnum = {
  id: 'id',
  size: 'size',
  colorVariantId: 'colorVariantId'
};

exports.Prisma.MediaItemOrderByRelevanceFieldEnum = {
  id: 'id',
  url: 'url',
  fileName: 'fileName',
  type: 'type',
  apiId: 'apiId',
  productId: 'productId',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ScrapingJobOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  targetId: 'targetId',
  targetName: 'targetName',
  userId: 'userId'
};

exports.Prisma.PriceHistoryOrderByRelevanceFieldEnum = {
  productId: 'productId'
};

exports.Prisma.ColorHistoryOrderByRelevanceFieldEnum = {
  productId: 'productId',
  action: 'action',
  colorName: 'colorName',
  colorCode: 'colorCode',
  hexColor: 'hexColor'
};

exports.Prisma.SizeHistoryOrderByRelevanceFieldEnum = {
  productId: 'productId',
  colorId: 'colorId',
  action: 'action',
  size: 'size',
  availability: 'availability'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  basePrice: 'basePrice',
  primaryImage: 'primaryImage',
  currencyCode: 'currencyCode',
  url: 'url',
  description: 'description',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  productCode: 'productCode',
  composition: 'composition',
  careInstructions: 'careInstructions',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ProductCategoryOrderByRelevanceFieldEnum = {
  productId: 'productId'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.ColorVariantsAvailability = exports.$Enums.ColorVariantsAvailability = {
  IN_STOCK: 'IN_STOCK',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  PRE_ORDER: 'PRE_ORDER'
};

exports.SizeVariantsAvailability = exports.$Enums.SizeVariantsAvailability = {
  IN_STOCK: 'IN_STOCK',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  PRE_ORDER: 'PRE_ORDER'
};

exports.ScrapingjobStatus = exports.$Enums.ScrapingjobStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.ScrapingjobType = exports.$Enums.ScrapingjobType = {
  CATEGORY: 'CATEGORY',
  PRODUCT: 'PRODUCT',
  BRAND: 'BRAND',
  BULK: 'BULK'
};

exports.Prisma.ModelName = {
  User: 'User',
  PasswordResetToken: 'PasswordResetToken',
  VerificationToken: 'VerificationToken',
  Account: 'Account',
  Brand: 'Brand',
  Category: 'Category',
  ColorVariants: 'ColorVariants',
  SizeVariants: 'SizeVariants',
  MediaItem: 'MediaItem',
  ScrapingJob: 'ScrapingJob',
  PriceHistory: 'PriceHistory',
  ColorHistory: 'ColorHistory',
  SizeHistory: 'SizeHistory',
  Product: 'Product',
  ProductCategory: 'ProductCategory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
