"use server"

import * as z from 'zod'
import  bcrypt from 'bcryptjs'
import { NewPasswordSchema } from '@/schemas'
import { getUserByEmail } from '../data/user'
import { getPasswordResetTokenByToken } from '../data/password-reset-token'
import db from '@/lib/db'
import { sendPasswordChangedEmail } from '@/lib/mail'

// Yeni ≈üifre belirleme i≈ülemini yapan server action
export const newPasswordAction = async (values: z.infer<typeof NewPasswordSchema>, token: string | null) => {

  if(!token) {
    return { error: 'Ge√ßersiz veya s√ºresi dolmu≈ü token' }
  }

  const validatedFields = NewPasswordSchema.safeParse(values)

  if (!validatedFields.success) {
    return {error: 'Ge√ßersiz giri≈ü' }
  }
 const { password } = validatedFields.data

 const existingToken = await getPasswordResetTokenByToken(token)

 if (!existingToken) {
  return { error: 'Ge√ßersiz veya s√ºresi dolmu≈ü token' }
 }

 console.log("üîç Token doƒürulamasƒ±:")
 console.log("- Token s√ºresi:", existingToken.expires)
 console.log("- ≈ûu anki zaman:", new Date())
 console.log("- Token kullanƒ±ldƒ± mƒ±:", existingToken.used)

 const hasExpired = new Date(existingToken.expires) < new Date()
 console.log("- S√ºresi doldu mu:", hasExpired)

 if (hasExpired) {
  return { error: 'Token\'ƒ±n s√ºresi dolmu≈ü' }
 }

 if (existingToken.used) {
  return { error: 'Token zaten kullanƒ±lmƒ±≈ü' }
 }
const existingUser = await getUserByEmail(existingToken.email)

if (!existingUser) {
  return { error: 'Kullanƒ±cƒ± bulunamadƒ±' }
}

const hashedPassword = await bcrypt.hash(password, 10)

await db.user.update({
  where: { id: existingUser.id },
  data: { password: hashedPassword }
})

try {
  // Token'ƒ± kullanƒ±ldƒ± olarak i≈üaretle (silmek yerine)
  await db.passwordResetToken.update({
    where: { id: existingToken.id },
    data: { used: true }
  })

  console.log('‚úÖ ≈ûifre ba≈üarƒ±yla g√ºncellendi ve token kullanƒ±ldƒ± olarak i≈üaretlendi')

  // ≈ûifre deƒüi≈ütirildi bildirimi g√∂nder (background'da)
  if (existingUser.name) {
    sendPasswordChangedEmail(existingUser.email!, existingUser.name)
      .catch(err => console.log('‚ö†Ô∏è Password changed notification failed (non-critical):', err))
  }

  return { success: '≈ûifre ba≈üarƒ±yla g√ºncellendi!' }

} catch (error) {
  console.error('‚ùå ≈ûifre g√ºncelleme hatasƒ±:', error)
  return { error: '≈ûifre g√ºncellenirken bir hata olu≈ütu. L√ºtfen tekrar deneyin.' }
}

}
