generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  account       Account?

  // ✅ İLİŞKİLER - Oluşturduğu kayıtlar
  createdBrands     Brand[]    @relation("BrandCreatedBy")
  updatedBrands     Brand[]    @relation("BrandUpdatedBy")
  createdCategories Category[] @relation("CategoryCreatedBy")
  updatedCategories Category[] @relation("CategoryUpdatedBy")
  createdProducts   Product[]  @relation("ProductCreatedBy")
  updatedProducts   Product[]  @relation("ProductUpdatedBy")

  // ✅ MEDIA İLİŞKİLERİ
  createdMediaItems MediaItem[] @relation("MediaCreatedBy")
  updatedMediaItems MediaItem[] @relation("MediaUpdatedBy")

  // ✅ SCRAPING İLİŞKİLERİ
  scrapingJobs ScrapingJob[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique(map: "PasswordResetToken_token_key")
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([email, token], map: "PasswordResetToken_email_token_key")
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique(map: "VerificationToken_token_key")
  expires DateTime
  email   String

  @@unique([email, token], map: "VerificationToken_email_token_key")
}

enum UserRole {
  ADMIN
  USER
  URETICI
  BUYER
  KUMAS
}

enum ScrapingjobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ScrapingjobType {
  CATEGORY
  PRODUCT
  BRAND
  BULK
}

model Account {
  id                String   @default(cuid())
  userId            String   @unique(map: "Account_userId_key")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String   @unique(map: "Brand_name_key")
  slug        String   @unique(map: "Brand_slug_key")
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  url         String?

  // ✅ API KONFIGÜRASYONU
  apiProductsUrl       String?
  apiProductDetailsUrl String?

  categories Category[]
  products   Product[]
  mediaItems MediaItem[]

  // ✅ USER İLİŞKİLERİ
  createdById String?
  createdBy   User?   @relation("BrandCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById String?
  updatedBy   User?   @relation("BrandUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([createdById], map: "Brand_createdById_fkey")
  @@index([updatedById], map: "Brand_updatedById_fkey")
}

model Category {
  id        Int     @id @default(autoincrement())
  name      String
  slug      String
  level     Int
  sortOrder Int     @default(0)
  isActive  Boolean @default(true)
  gender    String?

  brandId  Int
  parentId Int?

  // ✅ API SCRAPING ALANLARI
  apiId  String? // API'ye gönderilecek kategori ID'si
  isLeaf Boolean @default(false) // Scraping için gerekli (son seviye kategori mi?)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  brand             Brand             @relation(fields: [brandId], references: [id], map: "Category_brandId_fkey")
  parent            Category?         @relation("categoryTocategory", fields: [parentId], references: [id], map: "Category_parentId_fkey")
  subCategories     Category[]        @relation("categoryTocategory")
  productCategories ProductCategory[]
  mediaItems        MediaItem[]

  // ✅ USER İLİŞKİLERİ
  createdById String?
  createdBy   User?   @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById String?
  updatedBy   User?   @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([slug, brandId], map: "Category_slug_brandId_key")
  @@index([name], map: "Category_name_fkey")
  @@index([brandId], map: "Category_brandId_fkey")
  @@index([parentId], map: "Category_parentId_fkey")
  @@index([apiId], map: "Category_apiId_fkey")
  @@index([isLeaf], map: "Category_isLeaf_fkey")
  @@index([createdById], map: "Category_createdById_fkey")
  @@index([updatedById], map: "Category_updatedById_fkey")
}

model ColorVariants {
  id        String  @id
  colorName String
  colorCode String?
  price     String?

  hexColor     String?
  availability ColorVariantsAvailability @default(IN_STOCK)
  sku          String?
  productId    String
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt

  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizes   SizeVariants[]

  @@index([productId], map: "color_variants_productId_fkey")
}

model SizeVariants {
  id             String                   @id
  size           String
  availability   SizeVariantsAvailability @default(IN_STOCK)
  isSelected     Boolean                  @default(false)
  originalOrder  Int?
  colorVariantId String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt

  colorVariant ColorVariants @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)

  @@index([colorVariantId], map: "size_variants_colorVariantId_fkey")
}

// ✅ MEDIA LIBRARY MODELİ - BASİT
model MediaItem {
  id       String  @id @default(cuid())
  url      String
  fileName String
  type     String // image, video, document
  apiId    String?
  // İlişkiler
  brandId  Int?

  brand       Brand?    @relation(fields: [brandId], references: [id], onDelete: SetNull)
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  productId   String?
  product     Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  createdById String?
  createdBy   User?     @relation("MediaCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById String?
  updatedBy   User?     @relation("MediaUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Zaman damgaları
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type], map: "MediaItem_type_fkey")
  @@index([brandId], map: "MediaItem_brandId_fkey")
  @@index([categoryId], map: "MediaItem_categoryId_fkey")
  @@index([productId], map: "MediaItem_productId_fkey")
  @@index([createdById], map: "MediaItem_createdById_fkey")
  @@index([updatedById], map: "MediaItem_updatedById_fkey")
  @@map("media_items")
}

// ✅ SCRAPING JOB MODELİ
model ScrapingJob {
  id         String            @id @default(cuid())
  name       String
  status     ScrapingjobStatus @default(PENDING)
  type       ScrapingjobType
  targetId   String?
  targetName String?
  progress   Float             @default(0.0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], map: "ScrapingJob_userId_fkey")
  @@index([status], map: "ScrapingJob_status_fkey")
  @@index([type], map: "ScrapingJob_type_fkey")
  @@map("scraping_jobs")
}

model PriceHistory {
  id        Int      @id @default(autoincrement())
  productId String
  oldPrice  Float
  newPrice  Float
  changedAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], map: "PriceHistory_productId_fkey")

  @@index([productId], map: "PriceHistory_productId_fkey")
}

model ColorHistory {
  id        Int      @id @default(autoincrement())
  productId String
  action    String // 'ADDED', 'REMOVED', 'UPDATED'
  colorName String
  colorCode String?
  hexColor  String?
  changedAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], map: "ColorHistory_productId_fkey")

  @@index([productId], map: "ColorHistory_productId_fkey")
}

model SizeHistory {
  id           Int      @id @default(autoincrement())
  productId    String
  colorId      String?
  action       String // 'ADDED', 'REMOVED', 'UPDATED'
  size         String
  availability String?
  changedAt    DateTime @default(now())
  product      Product  @relation(fields: [productId], references: [id], map: "SizeHistory_productId_fkey")

  @@index([productId], map: "SizeHistory_productId_fkey")
}

model Product {
  id           String  @id
  name         String
  slug         String  @unique(map: "Product_slug_key")
  basePrice    String?
  primaryImage String?

  currencyCode     String?
  url              String?
  description      String? @db.Text
  metaTitle        String?
  metaDescription  String?
  productCode      String? @unique(map: "Product_productCode_key")
  composition      String? @db.Text
  careInstructions String? @db.Text

  brandId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  colorVariants     ColorVariants[]
  priceHistory      PriceHistory[]
  colorHistory      ColorHistory[]
  sizeHistory       SizeHistory[]
  brand             Brand             @relation(fields: [brandId], references: [id], map: "Product_brandId_fkey")
  productCategories ProductCategory[]
  mediaItems        MediaItem[]

  // ✅ USER İLİŞKİLERİ
  createdById String?
  createdBy   User?   @relation("ProductCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById String?
  updatedBy   User?   @relation("ProductUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([brandId], map: "Product_brandId_fkey")
  @@index([createdById], map: "Product_createdById_fkey")
  @@index([updatedById], map: "Product_updatedById_fkey")
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  productId  String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "ProductCategory_categoryId_fkey")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductCategory_productId_fkey")

  @@unique([productId, categoryId], map: "ProductCategory_productId_categoryId_key")
  @@index([categoryId], map: "ProductCategory_categoryId_fkey")
}

enum ColorVariantsAvailability {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
}

enum SizeVariantsAvailability {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
}
